(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{233:function(t,e,s){"use strict";s.r(e);var a=s(3),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"worker-threads"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-threads"}},[t._v("#")]),t._v(" Worker Threads")]),t._v(" "),s("blockquote",[s("p",[t._v("Stability: 2 - Stable")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("worker_threads")]),t._v(" module enables the use of threads that execute JavaScript\nin parallel. To access it:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" worker "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_threads'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Workers (threads) are useful for performing CPU-intensive JavaScript operations.\nThey will not help much with I/O-intensive work. Node.jsâ€™s built-in asynchronous\nI/O operations are more efficient than Workers can be.")]),t._v(" "),s("p",[t._v("Unlike "),s("code",[t._v("child_process")]),t._v(" or "),s("code",[t._v("cluster")]),t._v(", "),s("code",[t._v("worker_threads")]),t._v(" can share memory. They do\nso by transferring "),s("code",[t._v("ArrayBuffer")]),t._v(" instances or sharing "),s("code",[t._v("SharedArrayBuffer")]),t._v("\ninstances.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isMainThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parentPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workerData\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_threads'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isMainThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseJSAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" worker "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        workerData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" script\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'exit'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("code")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("Worker stopped with exit code ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" parse "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some-js-parsing-library'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" script "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workerData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  parentPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("The above example spawns a Worker thread for each "),s("code",[t._v("parse()")]),t._v(" call. In actual\npractice, use a pool of Workers instead for these kinds of tasks. Otherwise, the\noverhead of creating Workers would likely exceed their benefit.")]),t._v(" "),s("p",[t._v("When implementing a worker pool, use the "),s("router-link",{attrs:{to:"/node/async_hooks.html#async_hooks_class_asyncresource"}},[s("code",[t._v("AsyncResource")])]),t._v(" API to inform\ndiagnostic tools (e.g. in order to provide asynchronous stack traces) about the\ncorrelation between tasks and their outcomes.")],1),t._v(" "),s("h2",{attrs:{id:"worker-ismainthread"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-ismainthread"}},[t._v("#")]),t._v(" worker.isMainThread")]),t._v(" "),s("ul",[s("li",[t._v("{boolean}")])]),t._v(" "),s("p",[t._v("Is "),s("code",[t._v("true")]),t._v(" if this code is not running inside of a "),s("a",{attrs:{href:"#worker_threads_class_worker"}},[s("code",[t._v("Worker")])]),t._v(" thread.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isMainThread "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_threads'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isMainThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This re-loads the current file inside a Worker instance.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Inside Worker!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isMainThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints 'false'.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"worker-movemessageporttocontext-port-contextifiedsandbox"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-movemessageporttocontext-port-contextifiedsandbox"}},[t._v("#")]),t._v(" worker.moveMessagePortToContext(port, contextifiedSandbox)")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("port")]),t._v(" {MessagePort} The message port which will be transferred.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("contextifiedSandbox")]),t._v(" {Object} A "),s("router-link",{attrs:{to:"/node/vm.html#vm_what_does_it_mean_to_contextify_an_object"}},[t._v("contextified")]),t._v(" object as returned by the\n"),s("code",[t._v("vm.createContext()")]),t._v(" method.")],1)]),t._v(" "),s("li",[s("p",[t._v("Returns: {MessagePort}")])])]),t._v(" "),s("p",[t._v("Transfer a "),s("code",[t._v("MessagePort")]),t._v(" to a different "),s("router-link",{attrs:{to:"/node/vm.html"}},[s("code",[t._v("vm")])]),t._v(" Context. The original "),s("code",[t._v("port")]),t._v("\nobject will be rendered unusable, and the returned "),s("code",[t._v("MessagePort")]),t._v(" instance will\ntake its place.")],1),t._v(" "),s("p",[t._v("The returned "),s("code",[t._v("MessagePort")]),t._v(" will be an object in the target context, and will\ninherit from its global "),s("code",[t._v("Object")]),t._v(" class. Objects passed to the\n"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("port.onmessage()")]),s("OutboundLink")],1),t._v(" listener will also be created in the target context\nand inherit from its global "),s("code",[t._v("Object")]),t._v(" class.")]),t._v(" "),s("p",[t._v("However, the created "),s("code",[t._v("MessagePort")]),t._v(" will no longer inherit from\n"),s("router-link",{attrs:{to:"/node/events.html"}},[s("code",[t._v("EventEmitter")])]),t._v(", and only "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("port.onmessage()")]),s("OutboundLink")],1),t._v(" can be used to receive\nevents using it.")],1),t._v(" "),s("h2",{attrs:{id:"worker-parentport"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-parentport"}},[t._v("#")]),t._v(" worker.parentPort")]),t._v(" "),s("ul",[s("li",[t._v("{null|MessagePort}")])]),t._v(" "),s("p",[t._v("If this thread was spawned as a "),s("a",{attrs:{href:"#worker_threads_class_worker"}},[s("code",[t._v("Worker")])]),t._v(", this will be a "),s("a",{attrs:{href:"#worker_threads_class_messageport"}},[s("code",[t._v("MessagePort")])]),t._v("\nallowing communication with the parent thread. Messages sent using\n"),s("code",[t._v("parentPort.postMessage()")]),t._v(" will be available in the parent thread\nusing "),s("code",[t._v("worker.on('message')")]),t._v(", and messages sent from the parent thread\nusing "),s("code",[t._v("worker.postMessage()")]),t._v(" will be available in this thread using\n"),s("code",[t._v("parentPort.on('message')")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isMainThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parentPort "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_threads'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isMainThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" worker "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("once")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints 'Hello, world!'.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, world!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When a message from the parent thread is received, send it back:")]),t._v("\n  parentPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("once")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    parentPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"worker-receivemessageonport-port"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-receivemessageonport-port"}},[t._v("#")]),t._v(" worker.receiveMessageOnPort(port)")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("port")]),t._v(" {MessagePort}")])]),t._v(" "),s("li",[s("p",[t._v("Returns: {Object|undefined}")])])]),t._v(" "),s("p",[t._v("Receive a single message from a given "),s("code",[t._v("MessagePort")]),t._v(". If no message is available,\n"),s("code",[t._v("undefined")]),t._v(" is returned, otherwise an object with a single "),s("code",[t._v("message")]),t._v(" property\nthat contains the message payload, corresponding to the oldest message in the\n"),s("code",[t._v("MessagePort")]),t._v("â€™s queue.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" MessageChannel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiveMessageOnPort "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_threads'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" port1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageChannel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nport1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" hello"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("receiveMessageOnPort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: { message: { hello: 'world' } }")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("receiveMessageOnPort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: undefined")]),t._v("\n")])])]),s("p",[t._v("When this function is used, no "),s("code",[t._v("'message'")]),t._v(" event will be emitted and the\n"),s("code",[t._v("onmessage")]),t._v(" listener will not be invoked.")]),t._v(" "),s("h3",{attrs:{id:"worker-resourcelimits"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-resourcelimits"}},[t._v("#")]),t._v(" worker.resourceLimits")]),t._v(" "),s("ul",[s("li",[t._v("{Object|undefined}\n"),s("ul",[s("li",[s("code",[t._v("maxYoungGenerationSizeMb")]),t._v(" {number}")]),t._v(" "),s("li",[s("code",[t._v("maxOldGenerationSizeMb")]),t._v(" {number}")]),t._v(" "),s("li",[s("code",[t._v("codeRangeSizeMb")]),t._v(" {number}")])])])]),t._v(" "),s("p",[t._v("Provides the set of JS engine resource constraints inside this Worker thread.\nIf the "),s("code",[t._v("resourceLimits")]),t._v(" option was passed to the "),s("a",{attrs:{href:"#worker_threads_class_worker"}},[s("code",[t._v("Worker")])]),t._v(" constructor,\nthis matches its values.")]),t._v(" "),s("p",[t._v("If this is used in the main thread, its value is an empty object.")]),t._v(" "),s("h2",{attrs:{id:"worker-share-env"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-share-env"}},[t._v("#")]),t._v(" worker.SHARE_ENV")]),t._v(" "),s("ul",[s("li",[t._v("{symbol}")])]),t._v(" "),s("p",[t._v("A special value that can be passed as the "),s("code",[t._v("env")]),t._v(" option of the "),s("a",{attrs:{href:"#worker_threads_class_worker"}},[s("code",[t._v("Worker")])]),t._v("\nconstructor, to indicate that the current thread and the Worker thread should\nshare read and write access to the same set of environment variables.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SHARE_ENV")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_threads'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'process.env.SET_IN_WORKER = \"foo\"'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" eval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SHARE_ENV")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'exit'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SET_IN_WORKER")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints 'foo'.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"worker-threadid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-threadid"}},[t._v("#")]),t._v(" worker.threadId")]),t._v(" "),s("ul",[s("li",[t._v("{integer}")])]),t._v(" "),s("p",[t._v("An integer identifier for the current thread. On the corresponding worker object\n(if there is any), it is available as "),s("a",{attrs:{href:"#worker_threads_worker_threadid_1"}},[s("code",[t._v("worker.threadId")])]),t._v(".\nThis value is unique for each "),s("a",{attrs:{href:"#worker_threads_class_worker"}},[s("code",[t._v("Worker")])]),t._v(" instance inside a single process.")]),t._v(" "),s("h2",{attrs:{id:"worker-workerdata"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-workerdata"}},[t._v("#")]),t._v(" worker.workerData")]),t._v(" "),s("p",[t._v("An arbitrary JavaScript value that contains a clone of the data passed\nto this threadâ€™s "),s("code",[t._v("Worker")]),t._v(" constructor.")]),t._v(" "),s("p",[t._v("The data is cloned as if using "),s("a",{attrs:{href:"#worker_threads_port_postmessage_value_transferlist"}},[s("code",[t._v("postMessage()")])]),t._v(",\naccording to the "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML structured clone algorithm"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isMainThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workerData "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_threads'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isMainThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" worker "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" workerData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, world!'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workerData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints 'Hello, world!'.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"class-messagechannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-messagechannel"}},[t._v("#")]),t._v(" Class: MessageChannel")]),t._v(" "),s("p",[t._v("Instances of the "),s("code",[t._v("worker.MessageChannel")]),t._v(" class represent an asynchronous,\ntwo-way communications channel.\nThe "),s("code",[t._v("MessageChannel")]),t._v(" has no methods of its own. "),s("code",[t._v("new MessageChannel()")]),t._v("\nyields an object with "),s("code",[t._v("port1")]),t._v(" and "),s("code",[t._v("port2")]),t._v(" properties, which refer to linked\n"),s("a",{attrs:{href:"#worker_threads_class_messageport"}},[s("code",[t._v("MessagePort")])]),t._v(" instances.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" MessageChannel "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_threads'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" port1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageChannel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nport1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'received'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nport2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: received { foo: 'bar' } from the `port1.on('message')` listener")]),t._v("\n")])])]),s("h2",{attrs:{id:"class-messageport"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-messageport"}},[t._v("#")]),t._v(" Class: MessagePort")]),t._v(" "),s("ul",[s("li",[t._v("Extends: {EventEmitter}")])]),t._v(" "),s("p",[t._v("Instances of the "),s("code",[t._v("worker.MessagePort")]),t._v(" class represent one end of an\nasynchronous, two-way communications channel. It can be used to transfer\nstructured data, memory regions and other "),s("code",[t._v("MessagePort")]),t._v("s between different\n"),s("a",{attrs:{href:"#worker_threads_class_worker"}},[s("code",[t._v("Worker")])]),t._v("s.")]),t._v(" "),s("p",[t._v("With the exception of "),s("code",[t._v("MessagePort")]),t._v("s being "),s("router-link",{attrs:{to:"/node/events.html"}},[s("code",[t._v("EventEmitter")])]),t._v("s rather\nthan "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("EventTarget")]),s("OutboundLink")],1),t._v("s, this implementation matches "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/MessagePort",target:"_blank",rel:"noopener noreferrer"}},[t._v("browser "),s("code",[t._v("MessagePort")]),s("OutboundLink")],1),t._v("s.")],1),t._v(" "),s("h3",{attrs:{id:"event-close"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-close"}},[t._v("#")]),t._v(" Event: 'close'")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("'close'")]),t._v(" event is emitted once either side of the channel has been\ndisconnected.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" MessageChannel "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_threads'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" port1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageChannel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   foobar")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   closed!")]),t._v("\nport2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nport2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'close'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'closed!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nport1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foobar'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nport1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"event-message"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-message"}},[t._v("#")]),t._v(" Event: 'message'")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("value")]),t._v(" {any} The transmitted value")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("'message'")]),t._v(" event is emitted for any incoming message, containing the cloned\ninput of "),s("a",{attrs:{href:"#worker_threads_port_postmessage_value_transferlist"}},[s("code",[t._v("port.postMessage()")])]),t._v(".")]),t._v(" "),s("p",[t._v("Listeners on this event will receive a clone of the "),s("code",[t._v("value")]),t._v(" parameter as passed\nto "),s("code",[t._v("postMessage()")]),t._v(" and no further arguments.")]),t._v(" "),s("h3",{attrs:{id:"port-close"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#port-close"}},[t._v("#")]),t._v(" port.close()")]),t._v(" "),s("p",[t._v("Disables further sending of messages on either side of the connection.\nThis method can be called when no further communication will happen over this\n"),s("code",[t._v("MessagePort")]),t._v(".")]),t._v(" "),s("p",[t._v("The "),s("a",{attrs:{href:"#worker_threads_event_close"}},[s("code",[t._v("'close'")]),t._v(" event")]),t._v(" will be emitted on both "),s("code",[t._v("MessagePort")]),t._v(" instances that\nare part of the channel.")]),t._v(" "),s("h3",{attrs:{id:"port-postmessage-value-transferlist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#port-postmessage-value-transferlist"}},[t._v("#")]),t._v(" port.postMessage(value[, transferList])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("value")]),t._v(" {any}")]),t._v(" "),s("li",[s("code",[t._v("transferList")]),t._v(" {Object[]}")])]),t._v(" "),s("p",[t._v("Sends a JavaScript value to the receiving side of this channel.\n"),s("code",[t._v("value")]),t._v(" will be transferred in a way which is compatible with\nthe "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML structured clone algorithm"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("In particular, the significant differences to "),s("code",[t._v("JSON")]),t._v(" are:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("value")]),t._v(" may contain circular references.")]),t._v(" "),s("li",[s("code",[t._v("value")]),t._v(" may contain instances of builtin JS types such as "),s("code",[t._v("RegExp")]),t._v("s,\n"),s("code",[t._v("BigInt")]),t._v("s, "),s("code",[t._v("Map")]),t._v("s, "),s("code",[t._v("Set")]),t._v("s, etc.")]),t._v(" "),s("li",[s("code",[t._v("value")]),t._v(" may contain typed arrays, both using "),s("code",[t._v("ArrayBuffer")]),t._v("s\nand "),s("code",[t._v("SharedArrayBuffer")]),t._v("s.")]),t._v(" "),s("li",[s("code",[t._v("value")]),t._v(" may contain "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("WebAssembly.Module")]),s("OutboundLink")],1),t._v(" instances.")]),t._v(" "),s("li",[s("code",[t._v("value")]),t._v(" may not contain native (C++-backed) objects other than "),s("code",[t._v("MessagePort")]),t._v("s.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" MessageChannel "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_threads'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" port1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageChannel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nport1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" circularData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncircularData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" circularData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: { foo: [Circular] }")]),t._v("\nport2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("circularData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("transferList")]),t._v(" may be a list of "),s("code",[t._v("ArrayBuffer")]),t._v(" and "),s("code",[t._v("MessagePort")]),t._v(" objects.\nAfter transferring, they will not be usable on the sending side of the channel\nanymore (even if they are not contained in "),s("code",[t._v("value")]),t._v("). Unlike with\n"),s("router-link",{attrs:{to:"/node/child_process.html"}},[t._v("child processes")]),t._v(", transferring handles such as network sockets is currently\nnot supported.")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("value")]),t._v(" contains "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("SharedArrayBuffer")]),s("OutboundLink")],1),t._v(" instances, those will be accessible\nfrom either thread. They cannot be listed in "),s("code",[t._v("transferList")]),t._v(".")]),t._v(" "),s("p",[s("code",[t._v("value")]),t._v(" may still contain "),s("code",[t._v("ArrayBuffer")]),t._v(" instances that are not in\n"),s("code",[t._v("transferList")]),t._v("; in that case, the underlying memory is copied rather than moved.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" MessageChannel "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_threads'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" port1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageChannel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nport1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" uint8Array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This posts a copy of `uint8Array`:")]),t._v("\nport2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint8Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This does not copy data, but renders `uint8Array` unusable:")]),t._v("\nport2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint8Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" uint8Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buffer "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The memory for the `sharedUint8Array` will be accessible from both the")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// original and the copy received by `.on('message')`:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sharedUint8Array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SharedArrayBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nport2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sharedUint8Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This transfers a freshly created message port to the receiver.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This can be used, for example, to create communication channels between")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// multiple `Worker` threads that are children of the same parent thread.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" otherChannel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageChannel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nport2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" otherChannel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" otherChannel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Because the object cloning uses the structured clone algorithm,\nnon-enumerable properties, property accessors, and object prototypes are\nnot preserved. In particular, "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" objects will be read as\nplain "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Uint8Array")]),s("OutboundLink")],1),t._v("s on the receiving side.")],1),t._v(" "),s("p",[t._v("The message object will be cloned immediately, and can be modified after\nposting without having side effects.")]),t._v(" "),s("p",[t._v("For more information on the serialization and deserialization mechanisms\nbehind this API, see the "),s("router-link",{attrs:{to:"/node/v8.html#v8_serialization_api"}},[t._v("serialization API of the "),s("code",[t._v("v8")]),t._v(" module")]),t._v(".")],1),t._v(" "),s("h3",{attrs:{id:"port-ref"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#port-ref"}},[t._v("#")]),t._v(" port.ref()")]),t._v(" "),s("p",[t._v("Opposite of "),s("code",[t._v("unref()")]),t._v(". Calling "),s("code",[t._v("ref()")]),t._v(" on a previously "),s("code",[t._v("unref()")]),t._v("ed port will\n"),s("em",[t._v("not")]),t._v(" let the program exit if it's the only active handle left (the default\nbehavior). If the port is "),s("code",[t._v("ref()")]),t._v("ed, calling "),s("code",[t._v("ref()")]),t._v(" again will have no effect.")]),t._v(" "),s("p",[t._v("If listeners are attached or removed using "),s("code",[t._v(".on('message')")]),t._v(", the port will\nbe "),s("code",[t._v("ref()")]),t._v("ed and "),s("code",[t._v("unref()")]),t._v("ed automatically depending on whether\nlisteners for the event exist.")]),t._v(" "),s("h3",{attrs:{id:"port-start"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#port-start"}},[t._v("#")]),t._v(" port.start()")]),t._v(" "),s("p",[t._v("Starts receiving messages on this "),s("code",[t._v("MessagePort")]),t._v(". When using this port\nas an event emitter, this will be called automatically once "),s("code",[t._v("'message'")]),t._v("\nlisteners are attached.")]),t._v(" "),s("p",[t._v("This method exists for parity with the Web "),s("code",[t._v("MessagePort")]),t._v(" API. In Node.js,\nit is only useful for ignoring messages when no event listener is present.\nNode.js also diverges in its handling of "),s("code",[t._v(".onmessage")]),t._v(". Setting it will\nautomatically call "),s("code",[t._v(".start()")]),t._v(", but unsetting it will let messages queue up\nuntil a new handler is set or the port is discarded.")]),t._v(" "),s("h3",{attrs:{id:"port-unref"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#port-unref"}},[t._v("#")]),t._v(" port.unref()")]),t._v(" "),s("p",[t._v("Calling "),s("code",[t._v("unref()")]),t._v(" on a port will allow the thread to exit if this is the only\nactive handle in the event system. If the port is already "),s("code",[t._v("unref()")]),t._v("ed calling\n"),s("code",[t._v("unref()")]),t._v(" again will have no effect.")]),t._v(" "),s("p",[t._v("If listeners are attached or removed using "),s("code",[t._v(".on('message')")]),t._v(", the port will\nbe "),s("code",[t._v("ref()")]),t._v("ed and "),s("code",[t._v("unref()")]),t._v("ed automatically depending on whether\nlisteners for the event exist.")]),t._v(" "),s("h2",{attrs:{id:"class-worker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-worker"}},[t._v("#")]),t._v(" Class: Worker")]),t._v(" "),s("ul",[s("li",[t._v("Extends: {EventEmitter}")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Worker")]),t._v(" class represents an independent JavaScript execution thread.\nMost Node.js APIs are available inside of it.")]),t._v(" "),s("p",[t._v("Notable differences inside a Worker environment are:")]),t._v(" "),s("ul",[s("li",[t._v("The "),s("router-link",{attrs:{to:"/node/process.html#process_process_stdin"}},[s("code",[t._v("process.stdin")])]),t._v(", "),s("router-link",{attrs:{to:"/node/process.html#process_process_stdout"}},[s("code",[t._v("process.stdout")])]),t._v(" and "),s("router-link",{attrs:{to:"/node/process.html#process_process_stderr"}},[s("code",[t._v("process.stderr")])]),t._v("\nmay be redirected by the parent thread.")],1),t._v(" "),s("li",[t._v("The "),s("a",{attrs:{href:"#worker_threads_worker_ismainthread"}},[s("code",[t._v("require('worker_threads').isMainThread")])]),t._v(" property is set to "),s("code",[t._v("false")]),t._v(".")]),t._v(" "),s("li",[t._v("The "),s("a",{attrs:{href:"#worker_threads_worker_parentport"}},[s("code",[t._v("require('worker_threads').parentPort")])]),t._v(" message port is available.")]),t._v(" "),s("li",[s("router-link",{attrs:{to:"/node/process.html#process_process_exit_code"}},[s("code",[t._v("process.exit()")])]),t._v(" does not stop the whole program, just the single thread,\nand "),s("router-link",{attrs:{to:"/node/process.html#process_process_abort"}},[s("code",[t._v("process.abort()")])]),t._v(" is not available.")],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/node/process.html#process_process_chdir_directory"}},[s("code",[t._v("process.chdir()")])]),t._v(" and "),s("code",[t._v("process")]),t._v(" methods that set group or user ids\nare not available.")],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/node/process.html#process_process_env"}},[s("code",[t._v("process.env")])]),t._v(" is a copy of the parent thread's environment variables,\nunless otherwise specified. Changes to one copy will not be visible in other\nthreads, and will not be visible to native add-ons (unless\n"),s("a",{attrs:{href:"#worker_threads_worker_share_env"}},[s("code",[t._v("worker.SHARE_ENV")])]),t._v(" has been passed as the "),s("code",[t._v("env")]),t._v(" option to the\n"),s("a",{attrs:{href:"#worker_threads_class_worker"}},[s("code",[t._v("Worker")])]),t._v(" constructor).")],1),t._v(" "),s("li",[s("router-link",{attrs:{to:"/node/process.html#process_process_title"}},[s("code",[t._v("process.title")])]),t._v(" cannot be modified.")],1),t._v(" "),s("li",[t._v("Signals will not be delivered through "),s("router-link",{attrs:{to:"/node/process.html#process_signal_events"}},[s("code",[t._v("process.on('...')")])]),t._v(".")],1),t._v(" "),s("li",[t._v("Execution may stop at any point as a result of "),s("a",{attrs:{href:"#worker_threads_worker_terminate"}},[s("code",[t._v("worker.terminate()")])]),t._v("\nbeing invoked.")]),t._v(" "),s("li",[t._v("IPC channels from parent processes are not accessible.")]),t._v(" "),s("li",[t._v("The "),s("router-link",{attrs:{to:"/node/tracing.html"}},[s("code",[t._v("trace_events")])]),t._v(" module is not supported.")],1),t._v(" "),s("li",[t._v("Native add-ons can only be loaded from multiple threads if they fulfill\n"),s("router-link",{attrs:{to:"/node/addons.html#addons_worker_support"}},[t._v("certain conditions")]),t._v(".")],1)]),t._v(" "),s("p",[t._v("Creating "),s("code",[t._v("Worker")]),t._v(" instances inside of other "),s("code",[t._v("Worker")]),t._v("s is possible.")]),t._v(" "),s("p",[t._v("Like "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web Workers"),s("OutboundLink")],1),t._v(" and the "),s("router-link",{attrs:{to:"/node/cluster.html"}},[s("code",[t._v("cluster")]),t._v(" module")]),t._v(", two-way communication can be\nachieved through inter-thread message passing. Internally, a "),s("code",[t._v("Worker")]),t._v(" has a\nbuilt-in pair of "),s("a",{attrs:{href:"#worker_threads_class_messageport"}},[s("code",[t._v("MessagePort")])]),t._v("s that are already associated with each other\nwhen the "),s("code",[t._v("Worker")]),t._v(" is created. While the "),s("code",[t._v("MessagePort")]),t._v(" object on the parent side\nis not directly exposed, its functionalities are exposed through\n"),s("a",{attrs:{href:"#worker_threads_worker_postmessage_value_transferlist"}},[s("code",[t._v("worker.postMessage()")])]),t._v(" and the "),s("a",{attrs:{href:"#worker_threads_event_message_1"}},[s("code",[t._v("worker.on('message')")])]),t._v(" event\non the "),s("code",[t._v("Worker")]),t._v(" object for the parent thread.")],1),t._v(" "),s("p",[t._v("To create custom messaging channels (which is encouraged over using the default\nglobal channel because it facilitates separation of concerns), users can create\na "),s("code",[t._v("MessageChannel")]),t._v(" object on either thread and pass one of the\n"),s("code",[t._v("MessagePort")]),t._v("s on that "),s("code",[t._v("MessageChannel")]),t._v(" to the other thread through a\npre-existing channel, such as the global one.")]),t._v(" "),s("p",[t._v("See "),s("a",{attrs:{href:"#worker_threads_port_postmessage_value_transferlist"}},[s("code",[t._v("port.postMessage()")])]),t._v(" for more information on how messages are passed,\nand what kind of JavaScript values can be successfully transported through\nthe thread barrier.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" assert "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'assert'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MessageChannel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MessagePort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isMainThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parentPort\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_threads'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isMainThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" worker "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subChannel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageChannel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  worker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" hereIsYourPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" subChannel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("subChannel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  subChannel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'received:'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  parentPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("once")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hereIsYourPort "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessagePort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hereIsYourPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'the worker is sending this'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hereIsYourPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"new-worker-filename-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new-worker-filename-options"}},[t._v("#")]),t._v(" new Worker(filename[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("filename")]),t._v(" {string} The path to the Workerâ€™s main script. Must be\neither an absolute path or a relative path (i.e. relative to the\ncurrent working directory) starting with "),s("code",[t._v("./")]),t._v(" or "),s("code",[t._v("../")]),t._v(".\nIf "),s("code",[t._v("options.eval")]),t._v(" is "),s("code",[t._v("true")]),t._v(", this is a string containing JavaScript code\nrather than a path.")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("env")]),t._v(" {Object} If set, specifies the initial value of "),s("code",[t._v("process.env")]),t._v(" inside\nthe Worker thread. As a special value, "),s("a",{attrs:{href:"#worker_threads_worker_share_env"}},[s("code",[t._v("worker.SHARE_ENV")])]),t._v(" may be used\nto specify that the parent thread and the child thread should share their\nenvironment variables; in that case, changes to one threadâ€™s "),s("code",[t._v("process.env")]),t._v("\nobject will affect the other thread as well. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("process.env")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("eval")]),t._v(" {boolean} If "),s("code",[t._v("true")]),t._v(", interpret the first argument to the constructor\nas a script that is executed once the worker is online.")]),t._v(" "),s("li",[s("code",[t._v("execArgv")]),t._v(" {string[]} List of node CLI options passed to the worker.\nV8 options (such as "),s("code",[t._v("--max-old-space-size")]),t._v(") and options that affect the\nprocess (such as "),s("code",[t._v("--title")]),t._v(") are not supported. If set, this will be provided\nas "),s("router-link",{attrs:{to:"/node/process.html#process_process_execargv"}},[s("code",[t._v("process.execArgv")])]),t._v(" inside the worker. By default, options will be\ninherited from the parent thread.")],1),t._v(" "),s("li",[s("code",[t._v("stdin")]),t._v(" {boolean} If this is set to "),s("code",[t._v("true")]),t._v(", then "),s("code",[t._v("worker.stdin")]),t._v(" will\nprovide a writable stream whose contents will appear as "),s("code",[t._v("process.stdin")]),t._v("\ninside the Worker. By default, no data is provided.")]),t._v(" "),s("li",[s("code",[t._v("stdout")]),t._v(" {boolean} If this is set to "),s("code",[t._v("true")]),t._v(", then "),s("code",[t._v("worker.stdout")]),t._v(" will\nnot automatically be piped through to "),s("code",[t._v("process.stdout")]),t._v(" in the parent.")]),t._v(" "),s("li",[s("code",[t._v("stderr")]),t._v(" {boolean} If this is set to "),s("code",[t._v("true")]),t._v(", then "),s("code",[t._v("worker.stderr")]),t._v(" will\nnot automatically be piped through to "),s("code",[t._v("process.stderr")]),t._v(" in the parent.")]),t._v(" "),s("li",[s("code",[t._v("workerData")]),t._v(" {any} Any JavaScript value that will be cloned and made\navailable as "),s("a",{attrs:{href:"#worker_threads_worker_workerdata"}},[s("code",[t._v("require('worker_threads').workerData")])]),t._v(". The cloning will\noccur as described in the "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML structured clone algorithm"),s("OutboundLink")],1),t._v(", and an error\nwill be thrown if the object cannot be cloned (e.g. because it contains\n"),s("code",[t._v("function")]),t._v("s).")]),t._v(" "),s("li",[s("code",[t._v("resourceLimits")]),t._v(" {Object} An optional set of resource limits for the new\nJS engine instance. Reaching these limits will lead to termination of the\n"),s("code",[t._v("Worker")]),t._v(" instance. These limits only affect the JS engine, and no external\ndata, including no "),s("code",[t._v("ArrayBuffer")]),t._v("s. Even if these limits are set, the process\nmay still abort if it encounters a global out-of-memory situation.\n"),s("ul",[s("li",[s("code",[t._v("maxOldGenerationSizeMb")]),t._v(" {number} The maximum size of the main heap in MB.")]),t._v(" "),s("li",[s("code",[t._v("maxYoungGenerationSizeMb")]),t._v(" {number} The maximum size of a heap space for\nrecently created objects.")]),t._v(" "),s("li",[s("code",[t._v("codeRangeSizeMb")]),t._v(" {number} The size of a pre-allocated memory range\nused for generated code.")])])])])])]),t._v(" "),s("h3",{attrs:{id:"event-error"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-error"}},[t._v("#")]),t._v(" Event: 'error'")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("'error'")]),t._v(" event is emitted if the worker thread throws an uncaught\nexception. In that case, the worker will be terminated.")]),t._v(" "),s("h3",{attrs:{id:"event-exit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-exit"}},[t._v("#")]),t._v(" Event: 'exit'")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("exitCode")]),t._v(" {integer}")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("'exit'")]),t._v(" event is emitted once the worker has stopped. If the worker\nexited by calling "),s("router-link",{attrs:{to:"/node/process.html#process_process_exit_code"}},[s("code",[t._v("process.exit()")])]),t._v(", the "),s("code",[t._v("exitCode")]),t._v(" parameter will be the\npassed exit code. If the worker was terminated, the "),s("code",[t._v("exitCode")]),t._v(" parameter will\nbe "),s("code",[t._v("1")]),t._v(".")],1),t._v(" "),s("h3",{attrs:{id:"event-message-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-message-2"}},[t._v("#")]),t._v(" Event: 'message'")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("value")]),t._v(" {any} The transmitted value")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("'message'")]),t._v(" event is emitted when the worker thread has invoked\n"),s("a",{attrs:{href:"#worker_threads_worker_postmessage_value_transferlist"}},[s("code",[t._v("require('worker_threads').parentPort.postMessage()")])]),t._v(".\nSee the "),s("a",{attrs:{href:"#worker_threads_event_message"}},[s("code",[t._v("port.on('message')")])]),t._v(" event for more details.")]),t._v(" "),s("h3",{attrs:{id:"event-online"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-online"}},[t._v("#")]),t._v(" Event: 'online'")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("'online'")]),t._v(" event is emitted when the worker thread has started executing\nJavaScript code.")]),t._v(" "),s("h3",{attrs:{id:"worker-postmessage-value-transferlist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-postmessage-value-transferlist"}},[t._v("#")]),t._v(" worker.postMessage(value[, transferList])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("value")]),t._v(" {any}")]),t._v(" "),s("li",[s("code",[t._v("transferList")]),t._v(" {Object[]}")])]),t._v(" "),s("p",[t._v("Send a message to the worker that will be received via\n"),s("a",{attrs:{href:"#worker_threads_event_message"}},[s("code",[t._v("require('worker_threads').parentPort.on('message')")])]),t._v(".\nSee "),s("a",{attrs:{href:"#worker_threads_port_postmessage_value_transferlist"}},[s("code",[t._v("port.postMessage()")])]),t._v(" for more details.")]),t._v(" "),s("h3",{attrs:{id:"worker-ref"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-ref"}},[t._v("#")]),t._v(" worker.ref()")]),t._v(" "),s("p",[t._v("Opposite of "),s("code",[t._v("unref()")]),t._v(", calling "),s("code",[t._v("ref()")]),t._v(" on a previously "),s("code",[t._v("unref()")]),t._v("ed worker will\n"),s("em",[t._v("not")]),t._v(" let the program exit if it's the only active handle left (the default\nbehavior). If the worker is "),s("code",[t._v("ref()")]),t._v("ed, calling "),s("code",[t._v("ref()")]),t._v(" again will have\nno effect.")]),t._v(" "),s("h3",{attrs:{id:"worker-resourcelimits-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-resourcelimits-2"}},[t._v("#")]),t._v(" worker.resourceLimits")]),t._v(" "),s("ul",[s("li",[t._v("{Object}\n"),s("ul",[s("li",[s("code",[t._v("maxYoungGenerationSizeMb")]),t._v(" {number}")]),t._v(" "),s("li",[s("code",[t._v("maxOldGenerationSizeMb")]),t._v(" {number}")]),t._v(" "),s("li",[s("code",[t._v("codeRangeSizeMb")]),t._v(" {number}")])])])]),t._v(" "),s("p",[t._v("Provides the set of JS engine resource constraints for this Worker thread.\nIf the "),s("code",[t._v("resourceLimits")]),t._v(" option was passed to the "),s("a",{attrs:{href:"#worker_threads_class_worker"}},[s("code",[t._v("Worker")])]),t._v(" constructor,\nthis matches its values.")]),t._v(" "),s("p",[t._v("If the worker has stopped, the return value is an empty object.")]),t._v(" "),s("h3",{attrs:{id:"worker-stderr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-stderr"}},[t._v("#")]),t._v(" worker.stderr")]),t._v(" "),s("ul",[s("li",[t._v("{stream.Readable}")])]),t._v(" "),s("p",[t._v("This is a readable stream which contains data written to "),s("router-link",{attrs:{to:"/node/process.html#process_process_stderr"}},[s("code",[t._v("process.stderr")])]),t._v("\ninside the worker thread. If "),s("code",[t._v("stderr: true")]),t._v(" was not passed to the\n"),s("a",{attrs:{href:"#worker_threads_class_worker"}},[s("code",[t._v("Worker")])]),t._v(" constructor, then data will be piped to the parent thread's\n"),s("router-link",{attrs:{to:"/node/process.html#process_process_stderr"}},[s("code",[t._v("process.stderr")])]),t._v(" stream.")],1),t._v(" "),s("h3",{attrs:{id:"worker-stdin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-stdin"}},[t._v("#")]),t._v(" worker.stdin")]),t._v(" "),s("ul",[s("li",[t._v("{null|stream.Writable}")])]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("stdin: true")]),t._v(" was passed to the "),s("a",{attrs:{href:"#worker_threads_class_worker"}},[s("code",[t._v("Worker")])]),t._v(" constructor, this is a\nwritable stream. The data written to this stream will be made available in\nthe worker thread as "),s("router-link",{attrs:{to:"/node/process.html#process_process_stdin"}},[s("code",[t._v("process.stdin")])]),t._v(".")],1),t._v(" "),s("h3",{attrs:{id:"worker-stdout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-stdout"}},[t._v("#")]),t._v(" worker.stdout")]),t._v(" "),s("ul",[s("li",[t._v("{stream.Readable}")])]),t._v(" "),s("p",[t._v("This is a readable stream which contains data written to "),s("router-link",{attrs:{to:"/node/process.html#process_process_stdout"}},[s("code",[t._v("process.stdout")])]),t._v("\ninside the worker thread. If "),s("code",[t._v("stdout: true")]),t._v(" was not passed to the\n"),s("a",{attrs:{href:"#worker_threads_class_worker"}},[s("code",[t._v("Worker")])]),t._v(" constructor, then data will be piped to the parent thread's\n"),s("router-link",{attrs:{to:"/node/process.html#process_process_stdout"}},[s("code",[t._v("process.stdout")])]),t._v(" stream.")],1),t._v(" "),s("h3",{attrs:{id:"worker-terminate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-terminate"}},[t._v("#")]),t._v(" worker.terminate()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Stop all JavaScript execution in the worker thread as soon as possible.\nReturns a Promise for the exit code that is fulfilled when the\n"),s("a",{attrs:{href:"#worker_threads_event_exit"}},[s("code",[t._v("'exit'")]),t._v(" event")]),t._v(" is emitted.")]),t._v(" "),s("h3",{attrs:{id:"worker-threadid-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-threadid-2"}},[t._v("#")]),t._v(" worker.threadId")]),t._v(" "),s("ul",[s("li",[t._v("{integer}")])]),t._v(" "),s("p",[t._v("An integer identifier for the referenced thread. Inside the worker thread,\nit is available as "),s("a",{attrs:{href:"#worker_threads_worker_threadid"}},[s("code",[t._v("require('worker_threads').threadId")])]),t._v(".\nThis value is unique for each "),s("code",[t._v("Worker")]),t._v(" instance inside a single process.")]),t._v(" "),s("h3",{attrs:{id:"worker-unref"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-unref"}},[t._v("#")]),t._v(" worker.unref()")]),t._v(" "),s("p",[t._v("Calling "),s("code",[t._v("unref()")]),t._v(" on a worker will allow the thread to exit if this is the only\nactive handle in the event system. If the worker is already "),s("code",[t._v("unref()")]),t._v("ed calling\n"),s("code",[t._v("unref()")]),t._v(" again will have no effect.")])])}),[],!1,null,null,null);e.default=n.exports}}]);