(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{238:function(t,s,e){"use strict";e.r(s);var a=e(3),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"readline"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readline"}},[t._v("#")]),t._v(" Readline")]),t._v(" "),e("blockquote",[e("p",[t._v("Stability: 2 - Stable")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("readline")]),t._v(" module provides an interface for reading data from a "),e("router-link",{attrs:{to:"/node/stream.html#stream_readable_streams"}},[t._v("Readable")]),t._v("\nstream (such as "),e("router-link",{attrs:{to:"/node/process.html#process_process_stdin"}},[e("code",[t._v("process.stdin")])]),t._v(") one line at a time. It can be accessed\nusing:")],1),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" readline "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readline'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The following simple example illustrates the basic use of the "),e("code",[t._v("readline")]),t._v(" module.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" readline "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readline'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" readline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createInterface")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  input"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  output"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nrl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("question")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'What do you think of Node.js? '")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("answer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO: Log the answer in a database")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Thank you for your valuable feedback: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("answer"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Once this code is invoked, the Node.js application will not terminate until the\n"),e("code",[t._v("readline.Interface")]),t._v(" is closed because the interface waits for data to be\nreceived on the "),e("code",[t._v("input")]),t._v(" stream.")]),t._v(" "),e("h2",{attrs:{id:"class-interface"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class-interface"}},[t._v("#")]),t._v(" Class: Interface")]),t._v(" "),e("ul",[e("li",[t._v("Extends: {EventEmitter}")])]),t._v(" "),e("p",[t._v("Instances of the "),e("code",[t._v("readline.Interface")]),t._v(" class are constructed using the\n"),e("code",[t._v("readline.createInterface()")]),t._v(" method. Every instance is associated with a\nsingle "),e("code",[t._v("input")]),t._v(" "),e("router-link",{attrs:{to:"/node/stream.html#stream_readable_streams"}},[t._v("Readable")]),t._v(" stream and a single "),e("code",[t._v("output")]),t._v(" "),e("router-link",{attrs:{to:"/node/stream.html#stream_writable_streams"}},[t._v("Writable")]),t._v(" stream.\nThe "),e("code",[t._v("output")]),t._v(" stream is used to print prompts for user input that arrives on,\nand is read from, the "),e("code",[t._v("input")]),t._v(" stream.")],1),t._v(" "),e("h3",{attrs:{id:"event-close"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-close"}},[t._v("#")]),t._v(" Event: 'close'")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'close'")]),t._v(" event is emitted when one of the following occur:")]),t._v(" "),e("ul",[e("li",[t._v("The "),e("code",[t._v("rl.close()")]),t._v(" method is called and the "),e("code",[t._v("readline.Interface")]),t._v(" instance has\nrelinquished control over the "),e("code",[t._v("input")]),t._v(" and "),e("code",[t._v("output")]),t._v(" streams;")]),t._v(" "),e("li",[t._v("The "),e("code",[t._v("input")]),t._v(" stream receives its "),e("code",[t._v("'end'")]),t._v(" event;")]),t._v(" "),e("li",[t._v("The "),e("code",[t._v("input")]),t._v(" stream receives "),e("code",[t._v("<ctrl>-D")]),t._v(" to signal end-of-transmission (EOT);")]),t._v(" "),e("li",[t._v("The "),e("code",[t._v("input")]),t._v(" stream receives "),e("code",[t._v("<ctrl>-C")]),t._v(" to signal "),e("code",[t._v("SIGINT")]),t._v(" and there is no\n"),e("code",[t._v("'SIGINT'")]),t._v(" event listener registered on the "),e("code",[t._v("readline.Interface")]),t._v(" instance.")])]),t._v(" "),e("p",[t._v("The listener function is called without passing any arguments.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("readline.Interface")]),t._v(" instance is finished once the "),e("code",[t._v("'close'")]),t._v(" event is\nemitted.")]),t._v(" "),e("h3",{attrs:{id:"event-line"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-line"}},[t._v("#")]),t._v(" Event: 'line'")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'line'")]),t._v(" event is emitted whenever the "),e("code",[t._v("input")]),t._v(" stream receives an\nend-of-line input ("),e("code",[t._v("\\n")]),t._v(", "),e("code",[t._v("\\r")]),t._v(", or "),e("code",[t._v("\\r\\n")]),t._v("). This usually occurs when the user\npresses the "),e("code",[t._v("<Enter>")]),t._v(", or "),e("code",[t._v("<Return>")]),t._v(" keys.")]),t._v(" "),e("p",[t._v("The listener function is called with a string containing the single line of\nreceived input.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'line'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("input")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Received: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("input"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"event-pause"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-pause"}},[t._v("#")]),t._v(" Event: 'pause'")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'pause'")]),t._v(" event is emitted when one of the following occur:")]),t._v(" "),e("ul",[e("li",[t._v("The "),e("code",[t._v("input")]),t._v(" stream is paused.")]),t._v(" "),e("li",[t._v("The "),e("code",[t._v("input")]),t._v(" stream is not paused and receives the "),e("code",[t._v("'SIGCONT'")]),t._v(" event. (See\nevents "),e("router-link",{attrs:{to:"/node/readline.html#readline_event_sigtstp"}},[e("code",[t._v("'SIGTSTP'")])]),t._v(" and "),e("router-link",{attrs:{to:"/node/readline.html#readline_event_sigcont"}},[e("code",[t._v("'SIGCONT'")])]),t._v(".)")],1)]),t._v(" "),e("p",[t._v("The listener function is called without passing any arguments.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pause'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Readline paused.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"event-resume"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-resume"}},[t._v("#")]),t._v(" Event: 'resume'")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'resume'")]),t._v(" event is emitted whenever the "),e("code",[t._v("input")]),t._v(" stream is resumed.")]),t._v(" "),e("p",[t._v("The listener function is called without passing any arguments.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'resume'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Readline resumed.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"event-sigcont"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-sigcont"}},[t._v("#")]),t._v(" Event: 'SIGCONT'")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'SIGCONT'")]),t._v(" event is emitted when a Node.js process previously moved into\nthe background using "),e("code",[t._v("<ctrl>-Z")]),t._v(" (i.e. "),e("code",[t._v("SIGTSTP")]),t._v(") is then brought back to the\nforeground using fg(1p).")]),t._v(" "),e("p",[t._v("If the "),e("code",[t._v("input")]),t._v(" stream was paused "),e("em",[t._v("before")]),t._v(" the "),e("code",[t._v("SIGTSTP")]),t._v(" request, this event will\nnot be emitted.")]),t._v(" "),e("p",[t._v("The listener function is invoked without passing any arguments.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SIGCONT'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `prompt` will automatically resume the stream")]),t._v("\n  rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("prompt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The "),e("code",[t._v("'SIGCONT'")]),t._v(" event is "),e("em",[t._v("not")]),t._v(" supported on Windows.")]),t._v(" "),e("h3",{attrs:{id:"event-sigint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-sigint"}},[t._v("#")]),t._v(" Event: 'SIGINT'")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'SIGINT'")]),t._v(" event is emitted whenever the "),e("code",[t._v("input")]),t._v(" stream receives a\n"),e("code",[t._v("<ctrl>-C")]),t._v(" input, known typically as "),e("code",[t._v("SIGINT")]),t._v(". If there are no "),e("code",[t._v("'SIGINT'")]),t._v(" event\nlisteners registered when the "),e("code",[t._v("input")]),t._v(" stream receives a "),e("code",[t._v("SIGINT")]),t._v(", the "),e("code",[t._v("'pause'")]),t._v("\nevent will be emitted.")]),t._v(" "),e("p",[t._v("The listener function is invoked without passing any arguments.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SIGINT'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("question")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Are you sure you want to exit? '")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("answer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("answer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^y(es)?$/i")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("pause")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"event-sigtstp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-sigtstp"}},[t._v("#")]),t._v(" Event: 'SIGTSTP'")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'SIGTSTP'")]),t._v(" event is emitted when the "),e("code",[t._v("input")]),t._v(" stream receives a "),e("code",[t._v("<ctrl>-Z")]),t._v("\ninput, typically known as "),e("code",[t._v("SIGTSTP")]),t._v(". If there are no "),e("code",[t._v("'SIGTSTP'")]),t._v(" event listeners\nregistered when the "),e("code",[t._v("input")]),t._v(" stream receives a "),e("code",[t._v("SIGTSTP")]),t._v(", the Node.js process\nwill be sent to the background.")]),t._v(" "),e("p",[t._v("When the program is resumed using fg(1p), the "),e("code",[t._v("'pause'")]),t._v(" and "),e("code",[t._v("'SIGCONT'")]),t._v(" events\nwill be emitted. These can be used to resume the "),e("code",[t._v("input")]),t._v(" stream.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'pause'")]),t._v(" and "),e("code",[t._v("'SIGCONT'")]),t._v(" events will not be emitted if the "),e("code",[t._v("input")]),t._v(" was\npaused before the process was sent to the background.")]),t._v(" "),e("p",[t._v("The listener function is invoked without passing any arguments.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SIGTSTP'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This will override SIGTSTP and prevent the program from going to the")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// background.")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Caught SIGTSTP.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The "),e("code",[t._v("'SIGTSTP'")]),t._v(" event is "),e("em",[t._v("not")]),t._v(" supported on Windows.")]),t._v(" "),e("h3",{attrs:{id:"rl-close"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rl-close"}},[t._v("#")]),t._v(" rl.close()")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("rl.close()")]),t._v(" method closes the "),e("code",[t._v("readline.Interface")]),t._v(" instance and\nrelinquishes control over the "),e("code",[t._v("input")]),t._v(" and "),e("code",[t._v("output")]),t._v(" streams. When called,\nthe "),e("code",[t._v("'close'")]),t._v(" event will be emitted.")]),t._v(" "),e("p",[t._v("Calling "),e("code",[t._v("rl.close()")]),t._v(" does not immediately stop other events (including "),e("code",[t._v("'line'")]),t._v(")\nfrom being emitted by the "),e("code",[t._v("readline.Interface")]),t._v(" instance.")]),t._v(" "),e("h3",{attrs:{id:"rl-pause"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rl-pause"}},[t._v("#")]),t._v(" rl.pause()")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("rl.pause()")]),t._v(" method pauses the "),e("code",[t._v("input")]),t._v(" stream, allowing it to be resumed\nlater if necessary.")]),t._v(" "),e("p",[t._v("Calling "),e("code",[t._v("rl.pause()")]),t._v(" does not immediately pause other events (including\n"),e("code",[t._v("'line'")]),t._v(") from being emitted by the "),e("code",[t._v("readline.Interface")]),t._v(" instance.")]),t._v(" "),e("h3",{attrs:{id:"rl-prompt-preservecursor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rl-prompt-preservecursor"}},[t._v("#")]),t._v(" rl.prompt([preserveCursor])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("preserveCursor")]),t._v(" {boolean} If "),e("code",[t._v("true")]),t._v(", prevents the cursor placement from\nbeing reset to "),e("code",[t._v("0")]),t._v(".")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("rl.prompt()")]),t._v(" method writes the "),e("code",[t._v("readline.Interface")]),t._v(" instances configured\n"),e("code",[t._v("prompt")]),t._v(" to a new line in "),e("code",[t._v("output")]),t._v(" in order to provide a user with a new\nlocation at which to provide input.")]),t._v(" "),e("p",[t._v("When called, "),e("code",[t._v("rl.prompt()")]),t._v(" will resume the "),e("code",[t._v("input")]),t._v(" stream if it has been\npaused.")]),t._v(" "),e("p",[t._v("If the "),e("code",[t._v("readline.Interface")]),t._v(" was created with "),e("code",[t._v("output")]),t._v(" set to "),e("code",[t._v("null")]),t._v(" or\n"),e("code",[t._v("undefined")]),t._v(" the prompt is not written.")]),t._v(" "),e("h3",{attrs:{id:"rl-question-query-callback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rl-question-query-callback"}},[t._v("#")]),t._v(" rl.question(query, callback)")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("query")]),t._v(" {string} A statement or query to write to "),e("code",[t._v("output")]),t._v(", prepended to the\nprompt.")]),t._v(" "),e("li",[e("code",[t._v("callback")]),t._v(" {Function} A callback function that is invoked with the user's\ninput in response to the "),e("code",[t._v("query")]),t._v(".")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("rl.question()")]),t._v(" method displays the "),e("code",[t._v("query")]),t._v(" by writing it to the "),e("code",[t._v("output")]),t._v(",\nwaits for user input to be provided on "),e("code",[t._v("input")]),t._v(", then invokes the "),e("code",[t._v("callback")]),t._v("\nfunction passing the provided input as the first argument.")]),t._v(" "),e("p",[t._v("When called, "),e("code",[t._v("rl.question()")]),t._v(" will resume the "),e("code",[t._v("input")]),t._v(" stream if it has been\npaused.")]),t._v(" "),e("p",[t._v("If the "),e("code",[t._v("readline.Interface")]),t._v(" was created with "),e("code",[t._v("output")]),t._v(" set to "),e("code",[t._v("null")]),t._v(" or\n"),e("code",[t._v("undefined")]),t._v(" the "),e("code",[t._v("query")]),t._v(" is not written.")]),t._v(" "),e("p",[t._v("Example usage:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("question")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'What is your favorite food? '")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("answer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Oh, so your favorite food is ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("answer"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The "),e("code",[t._v("callback")]),t._v(" function passed to "),e("code",[t._v("rl.question()")]),t._v(" does not follow the typical\npattern of accepting an "),e("code",[t._v("Error")]),t._v(" object or "),e("code",[t._v("null")]),t._v(" as the first argument.\nThe "),e("code",[t._v("callback")]),t._v(" is called with the provided answer as the only argument.")]),t._v(" "),e("h3",{attrs:{id:"rl-resume"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rl-resume"}},[t._v("#")]),t._v(" rl.resume()")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("rl.resume()")]),t._v(" method resumes the "),e("code",[t._v("input")]),t._v(" stream if it has been paused.")]),t._v(" "),e("h3",{attrs:{id:"rl-setprompt-prompt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rl-setprompt-prompt"}},[t._v("#")]),t._v(" rl.setPrompt(prompt)")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("prompt")]),t._v(" {string}")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("rl.setPrompt()")]),t._v(" method sets the prompt that will be written to "),e("code",[t._v("output")]),t._v("\nwhenever "),e("code",[t._v("rl.prompt()")]),t._v(" is called.")]),t._v(" "),e("h3",{attrs:{id:"rl-write-data-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rl-write-data-key"}},[t._v("#")]),t._v(" rl.write(data[, key])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("data")]),t._v(" {string}")]),t._v(" "),e("li",[e("code",[t._v("key")]),t._v(" {Object}\n"),e("ul",[e("li",[e("code",[t._v("ctrl")]),t._v(" {boolean} "),e("code",[t._v("true")]),t._v(" to indicate the "),e("code",[t._v("<ctrl>")]),t._v(" key.")]),t._v(" "),e("li",[e("code",[t._v("meta")]),t._v(" {boolean} "),e("code",[t._v("true")]),t._v(" to indicate the "),e("code",[t._v("<Meta>")]),t._v(" key.")]),t._v(" "),e("li",[e("code",[t._v("shift")]),t._v(" {boolean} "),e("code",[t._v("true")]),t._v(" to indicate the "),e("code",[t._v("<Shift>")]),t._v(" key.")]),t._v(" "),e("li",[e("code",[t._v("name")]),t._v(" {string} The name of the a key.")])])])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("rl.write()")]),t._v(" method will write either "),e("code",[t._v("data")]),t._v(" or a key sequence identified\nby "),e("code",[t._v("key")]),t._v(" to the "),e("code",[t._v("output")]),t._v(". The "),e("code",[t._v("key")]),t._v(" argument is supported only if "),e("code",[t._v("output")]),t._v(" is\na "),e("router-link",{attrs:{to:"/node/tty.html"}},[t._v("TTY")]),t._v(" text terminal.")],1),t._v(" "),e("p",[t._v("If "),e("code",[t._v("key")]),t._v(" is specified, "),e("code",[t._v("data")]),t._v(" is ignored.")]),t._v(" "),e("p",[t._v("When called, "),e("code",[t._v("rl.write()")]),t._v(" will resume the "),e("code",[t._v("input")]),t._v(" stream if it has been\npaused.")]),t._v(" "),e("p",[t._v("If the "),e("code",[t._v("readline.Interface")]),t._v(" was created with "),e("code",[t._v("output")]),t._v(" set to "),e("code",[t._v("null")]),t._v(" or\n"),e("code",[t._v("undefined")]),t._v(" the "),e("code",[t._v("data")]),t._v(" and "),e("code",[t._v("key")]),t._v(" are not written.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Delete this!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Simulate Ctrl+u to delete the line written previously")]),t._v("\nrl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ctrl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'u'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The "),e("code",[t._v("rl.write()")]),t._v(" method will write the data to the "),e("code",[t._v("readline")]),t._v(" "),e("code",[t._v("Interface")]),t._v("'s\n"),e("code",[t._v("input")]),t._v(" "),e("em",[t._v("as if it were provided by the user")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"rl-symbol-asynciterator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rl-symbol-asynciterator"}},[t._v("#")]),t._v(" rl[Symbol.asyncIterator]()")]),t._v(" "),e("ul",[e("li",[t._v("Returns: {AsyncIterator}")])]),t._v(" "),e("p",[t._v("Create an "),e("code",[t._v("AsyncIterator")]),t._v(" object that iterates through each line in the input\nstream as a string. This method allows asynchronous iteration of\n"),e("code",[t._v("readline.Interface")]),t._v(" objects through "),e("code",[t._v("for await...of")]),t._v(" loops.")]),t._v(" "),e("p",[t._v("Errors in the input stream are not forwarded.")]),t._v(" "),e("p",[t._v("If the loop is terminated with "),e("code",[t._v("break")]),t._v(", "),e("code",[t._v("throw")]),t._v(", or "),e("code",[t._v("return")]),t._v(",\n"),e("a",{attrs:{href:"#readline_rl_close"}},[e("code",[t._v("rl.close()")])]),t._v(" will be called. In other words, iterating over a\n"),e("code",[t._v("readline.Interface")]),t._v(" will always consume the input stream fully.")]),t._v(" "),e("p",[t._v("Performance is not on par with the traditional "),e("code",[t._v("'line'")]),t._v(" event API. Use "),e("code",[t._v("'line'")]),t._v("\ninstead for performance-sensitive applications.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("processLineByLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" readline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createInterface")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" line "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Each line in the readline input will be successively available here as")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `line`.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"readline-clearline-stream-dir-callback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readline-clearline-stream-dir-callback"}},[t._v("#")]),t._v(" readline.clearLine(stream, dir[, callback])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("stream")]),t._v(" {stream.Writable}")]),t._v(" "),e("li",[e("code",[t._v("dir")]),t._v(" {number}\n"),e("ul",[e("li",[e("code",[t._v("-1")]),t._v(": to the left from cursor")]),t._v(" "),e("li",[e("code",[t._v("1")]),t._v(": to the right from cursor")]),t._v(" "),e("li",[e("code",[t._v("0")]),t._v(": the entire line")])])]),t._v(" "),e("li",[e("code",[t._v("callback")]),t._v(" {Function} Invoked once the operation completes.")]),t._v(" "),e("li",[t._v("Returns: {boolean} "),e("code",[t._v("false")]),t._v(" if "),e("code",[t._v("stream")]),t._v(" wishes for the calling code to wait for\nthe "),e("code",[t._v("'drain'")]),t._v(" event to be emitted before continuing to write additional data;\notherwise "),e("code",[t._v("true")]),t._v(".")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("readline.clearLine()")]),t._v(" method clears current line of given "),e("router-link",{attrs:{to:"/node/tty.html"}},[t._v("TTY")]),t._v(" stream\nin a specified direction identified by "),e("code",[t._v("dir")]),t._v(".")],1),t._v(" "),e("h2",{attrs:{id:"readline-clearscreendown-stream-callback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readline-clearscreendown-stream-callback"}},[t._v("#")]),t._v(" readline.clearScreenDown(stream[, callback])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("stream")]),t._v(" {stream.Writable}")]),t._v(" "),e("li",[e("code",[t._v("callback")]),t._v(" {Function} Invoked once the operation completes.")]),t._v(" "),e("li",[t._v("Returns: {boolean} "),e("code",[t._v("false")]),t._v(" if "),e("code",[t._v("stream")]),t._v(" wishes for the calling code to wait for\nthe "),e("code",[t._v("'drain'")]),t._v(" event to be emitted before continuing to write additional data;\notherwise "),e("code",[t._v("true")]),t._v(".")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("readline.clearScreenDown()")]),t._v(" method clears the given "),e("router-link",{attrs:{to:"/node/tty.html"}},[t._v("TTY")]),t._v(" stream from\nthe current position of the cursor down.")],1),t._v(" "),e("h2",{attrs:{id:"readline-createinterface-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readline-createinterface-options"}},[t._v("#")]),t._v(" readline.createInterface(options)")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("options")]),t._v(" {Object}\n"),e("ul",[e("li",[e("code",[t._v("input")]),t._v(" {stream.Readable} The "),e("router-link",{attrs:{to:"/node/stream.html#stream_readable_streams"}},[t._v("Readable")]),t._v(" stream to listen to. This option\nis "),e("em",[t._v("required")]),t._v(".")],1),t._v(" "),e("li",[e("code",[t._v("output")]),t._v(" {stream.Writable} The "),e("router-link",{attrs:{to:"/node/stream.html#stream_writable_streams"}},[t._v("Writable")]),t._v(" stream to write readline data\nto.")],1),t._v(" "),e("li",[e("code",[t._v("completer")]),t._v(" {Function} An optional function used for Tab autocompletion.")]),t._v(" "),e("li",[e("code",[t._v("terminal")]),t._v(" {boolean} "),e("code",[t._v("true")]),t._v(" if the "),e("code",[t._v("input")]),t._v(" and "),e("code",[t._v("output")]),t._v(" streams should be\ntreated like a TTY, and have ANSI/VT100 escape codes written to it.\n"),e("strong",[t._v("Default:")]),t._v(" checking "),e("code",[t._v("isTTY")]),t._v(" on the "),e("code",[t._v("output")]),t._v(" stream upon instantiation.")]),t._v(" "),e("li",[e("code",[t._v("historySize")]),t._v(" {number} Maximum number of history lines retained. To disable\nthe history set this value to "),e("code",[t._v("0")]),t._v(". This option makes sense only if\n"),e("code",[t._v("terminal")]),t._v(" is set to "),e("code",[t._v("true")]),t._v(" by the user or by an internal "),e("code",[t._v("output")]),t._v(" check,\notherwise the history caching mechanism is not initialized at all.\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("30")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("prompt")]),t._v(" {string} The prompt string to use. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'> '")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("crlfDelay")]),t._v(" {number} If the delay between "),e("code",[t._v("\\r")]),t._v(" and "),e("code",[t._v("\\n")]),t._v(" exceeds\n"),e("code",[t._v("crlfDelay")]),t._v(" milliseconds, both "),e("code",[t._v("\\r")]),t._v(" and "),e("code",[t._v("\\n")]),t._v(" will be treated as separate\nend-of-line input. "),e("code",[t._v("crlfDelay")]),t._v(" will be coerced to a number no less than\n"),e("code",[t._v("100")]),t._v(". It can be set to "),e("code",[t._v("Infinity")]),t._v(", in which case "),e("code",[t._v("\\r")]),t._v(" followed by "),e("code",[t._v("\\n")]),t._v("\nwill always be considered a single newline (which may be reasonable for\n"),e("a",{attrs:{href:"#readline_example_read_file_stream_line_by_line"}},[t._v("reading files")]),t._v(" with "),e("code",[t._v("\\r\\n")]),t._v(" line delimiter). "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("100")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("removeHistoryDuplicates")]),t._v(" {boolean} If "),e("code",[t._v("true")]),t._v(", when a new input line added\nto the history list duplicates an older one, this removes the older line\nfrom the list. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("escapeCodeTimeout")]),t._v(" {number} The duration "),e("code",[t._v("readline")]),t._v(" will wait for a\ncharacter (when reading an ambiguous key sequence in milliseconds one that\ncan both form a complete key sequence using the input read so far and can\ntake additional input to complete a longer key sequence).\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("500")]),t._v(".")])])])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("readline.createInterface()")]),t._v(" method creates a new "),e("code",[t._v("readline.Interface")]),t._v("\ninstance.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" readline "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readline'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" readline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createInterface")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  input"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  output"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Once the "),e("code",[t._v("readline.Interface")]),t._v(" instance is created, the most common case is to\nlisten for the "),e("code",[t._v("'line'")]),t._v(" event:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'line'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("line")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Received: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("line"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("If "),e("code",[t._v("terminal")]),t._v(" is "),e("code",[t._v("true")]),t._v(" for this instance then the "),e("code",[t._v("output")]),t._v(" stream will get\nthe best compatibility if it defines an "),e("code",[t._v("output.columns")]),t._v(" property and emits\na "),e("code",[t._v("'resize'")]),t._v(" event on the "),e("code",[t._v("output")]),t._v(" if or when the columns ever change\n("),e("router-link",{attrs:{to:"/node/process.html#process_process_stdout"}},[e("code",[t._v("process.stdout")])]),t._v(" does this automatically when it is a TTY).")],1),t._v(" "),e("h3",{attrs:{id:"use-of-the-completer-function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#use-of-the-completer-function"}},[t._v("#")]),t._v(" Use of the "),e("code",[t._v("completer")]),t._v(" Function")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("completer")]),t._v(" function takes the current line entered by the user\nas an argument, and returns an "),e("code",[t._v("Array")]),t._v(" with 2 entries:")]),t._v(" "),e("ul",[e("li",[t._v("An "),e("code",[t._v("Array")]),t._v(" with matching entries for the completion.")]),t._v(" "),e("li",[t._v("The substring that was used for the matching.")])]),t._v(" "),e("p",[t._v("For instance: "),e("code",[t._v("[[substr1, substr2, ...], originalsubstring]")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("completer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("line")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" completions "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.help .error .exit .quit .q'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hits "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completions"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("line"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Show all completions if none found")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("hits"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" hits "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" completions"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" line"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("The "),e("code",[t._v("completer")]),t._v(" function can be called asynchronously if it accepts two\narguments:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("completer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("linePartial"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" linePartial"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"readline-cursorto-stream-x-y-callback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readline-cursorto-stream-x-y-callback"}},[t._v("#")]),t._v(" readline.cursorTo(stream, x[, y][, callback])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("stream")]),t._v(" {stream.Writable}")]),t._v(" "),e("li",[e("code",[t._v("x")]),t._v(" {number}")]),t._v(" "),e("li",[e("code",[t._v("y")]),t._v(" {number}")]),t._v(" "),e("li",[e("code",[t._v("callback")]),t._v(" {Function} Invoked once the operation completes.")]),t._v(" "),e("li",[t._v("Returns: {boolean} "),e("code",[t._v("false")]),t._v(" if "),e("code",[t._v("stream")]),t._v(" wishes for the calling code to wait for\nthe "),e("code",[t._v("'drain'")]),t._v(" event to be emitted before continuing to write additional data;\notherwise "),e("code",[t._v("true")]),t._v(".")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("readline.cursorTo()")]),t._v(" method moves cursor to the specified position in a\ngiven "),e("router-link",{attrs:{to:"/node/tty.html"}},[t._v("TTY")]),t._v(" "),e("code",[t._v("stream")]),t._v(".")],1),t._v(" "),e("h2",{attrs:{id:"readline-emitkeypressevents-stream-interface"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readline-emitkeypressevents-stream-interface"}},[t._v("#")]),t._v(" readline.emitKeypressEvents(stream[, interface])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("stream")]),t._v(" {stream.Readable}")]),t._v(" "),e("li",[e("code",[t._v("interface")]),t._v(" {readline.Interface}")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("readline.emitKeypressEvents()")]),t._v(" method causes the given "),e("router-link",{attrs:{to:"/node/stream.html#stream_readable_streams"}},[t._v("Readable")]),t._v("\nstream to begin emitting "),e("code",[t._v("'keypress'")]),t._v(" events corresponding to received input.")],1),t._v(" "),e("p",[t._v("Optionally, "),e("code",[t._v("interface")]),t._v(" specifies a "),e("code",[t._v("readline.Interface")]),t._v(" instance for which\nautocompletion is disabled when copy-pasted input is detected.")]),t._v(" "),e("p",[t._v("If the "),e("code",[t._v("stream")]),t._v(" is a "),e("router-link",{attrs:{to:"/node/tty.html"}},[t._v("TTY")]),t._v(", then it must be in raw mode.")],1),t._v(" "),e("p",[t._v("This is automatically called by any readline instance on its "),e("code",[t._v("input")]),t._v(" if the\n"),e("code",[t._v("input")]),t._v(" is a terminal. Closing the "),e("code",[t._v("readline")]),t._v(" instance does not stop\nthe "),e("code",[t._v("input")]),t._v(" from emitting "),e("code",[t._v("'keypress'")]),t._v(" events.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("readline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("emitKeypressEvents")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isTTY"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setRawMode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"readline-movecursor-stream-dx-dy-callback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readline-movecursor-stream-dx-dy-callback"}},[t._v("#")]),t._v(" readline.moveCursor(stream, dx, dy[, callback])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("stream")]),t._v(" {stream.Writable}")]),t._v(" "),e("li",[e("code",[t._v("dx")]),t._v(" {number}")]),t._v(" "),e("li",[e("code",[t._v("dy")]),t._v(" {number}")]),t._v(" "),e("li",[e("code",[t._v("callback")]),t._v(" {Function} Invoked once the operation completes.")]),t._v(" "),e("li",[t._v("Returns: {boolean} "),e("code",[t._v("false")]),t._v(" if "),e("code",[t._v("stream")]),t._v(" wishes for the calling code to wait for\nthe "),e("code",[t._v("'drain'")]),t._v(" event to be emitted before continuing to write additional data;\notherwise "),e("code",[t._v("true")]),t._v(".")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("readline.moveCursor()")]),t._v(" method moves the cursor "),e("em",[t._v("relative")]),t._v(" to its current\nposition in a given "),e("router-link",{attrs:{to:"/node/tty.html"}},[t._v("TTY")]),t._v(" "),e("code",[t._v("stream")]),t._v(".")],1),t._v(" "),e("h2",{attrs:{id:"example-tiny-cli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-tiny-cli"}},[t._v("#")]),t._v(" Example: Tiny CLI")]),t._v(" "),e("p",[t._v("The following example illustrates the use of "),e("code",[t._v("readline.Interface")]),t._v(" class to\nimplement a small command-line interface:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" readline "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readline'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" readline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createInterface")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  input"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  output"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  prompt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'OHAI> '")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nrl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("prompt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nrl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'line'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("line")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("line"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Say what? I might have heard '")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("line"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("prompt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'close'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Have a great day!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"example-read-file-stream-line-by-line"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-read-file-stream-line-by-line"}},[t._v("#")]),t._v(" Example: Read File Stream Line-by-Line")]),t._v(" "),e("p",[t._v("A common use case for "),e("code",[t._v("readline")]),t._v(" is to consume an input file one line at a\ntime. The easiest way to do so is leveraging the "),e("router-link",{attrs:{to:"/node/fs.html#fs_class_fs_readstream"}},[e("code",[t._v("fs.ReadStream")])]),t._v(" API as\nwell as a "),e("code",[t._v("for await...of")]),t._v(" loop:")],1),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" readline "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readline'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("processLineByLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fileStream "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'input.txt'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" readline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createInterface")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    input"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fileStream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    crlfDelay"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Note: we use the crlfDelay option to recognize all instances of CR LF")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ('\\r\\n') in input.txt as a single line break.")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" line "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Each line in input.txt will be successively available here as `line`.")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Line from file: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("line"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("processLineByLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Alternatively, one could use the "),e("a",{attrs:{href:"#readline_event_line"}},[e("code",[t._v("'line'")])]),t._v(" event:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" readline "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readline'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" readline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createInterface")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  input"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sample.txt'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  crlfDelay"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nrl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'line'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("line")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Line from file: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("line"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Currently, "),e("code",[t._v("for await...of")]),t._v(" loop can be a bit slower. If "),e("code",[t._v("async")]),t._v(" / "),e("code",[t._v("await")]),t._v("\nflow and speed are both essential, a mixed approach can be applied:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" once "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'events'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createReadStream "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createInterface "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readline'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("processLineByLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createInterface")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      input"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'big-file.txt'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      crlfDelay"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'line'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("line")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Process the line.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("once")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'close'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'File processed.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);