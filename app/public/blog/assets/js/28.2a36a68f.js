(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{212:function(t,e,s){"use strict";s.r(e);var a=s(3),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"file-system"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-system"}},[t._v("#")]),t._v(" File System")]),t._v(" "),s("blockquote",[s("p",[t._v("Stability: 2 - Stable")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("fs")]),t._v(" module provides an API for interacting with the file system in a\nmanner closely modeled around standard POSIX functions.")]),t._v(" "),s("p",[t._v("To use this module:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("All file system operations have synchronous and asynchronous forms.")]),t._v(" "),s("p",[t._v("The asynchronous form always takes a completion callback as its last argument.\nThe arguments passed to the completion callback depend on the method, but the\nfirst argument is always reserved for an exception. If the operation was\ncompleted successfully, then the first argument will be "),s("code",[t._v("null")]),t._v(" or "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlink")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'successfully deleted /tmp/hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Exceptions that occur using synchronous operations are thrown immediately and\nmay be handled using "),s("code",[t._v("tryâ€¦catch")]),t._v(", or may be allowed to bubble up.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlinkSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'successfully deleted /tmp/hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// handle the error")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("There is no guaranteed ordering when using asynchronous methods. So the\nfollowing is prone to error because the "),s("code",[t._v("fs.stat()")]),t._v(" operation may complete\nbefore the "),s("code",[t._v("fs.rename()")]),t._v(" operation:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/world'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'renamed complete'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/world'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stats")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("stats: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stats"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("To correctly order the operations, move the "),s("code",[t._v("fs.stat()")]),t._v(" call into the callback\nof the "),s("code",[t._v("fs.rename()")]),t._v(" operation:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/world'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/world'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stats")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("stats: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stats"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("In busy processes, use the asynchronous versions of these calls. The synchronous\nversions will block the entire process until they complete, halting all\nconnections.")]),t._v(" "),s("p",[t._v("While it is not recommended, most fs functions allow the callback argument to\nbe omitted, in which case a default callback is used that rethrows errors. To\nget a trace to the original call site, set the "),s("code",[t._v("NODE_DEBUG")]),t._v(" environment\nvariable:")]),t._v(" "),s("p",[t._v("Omitting the callback function on asynchronous fs functions is deprecated and\nmay result in an error being thrown in the future.")]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ cat script.js\nfunction bad() {\n  require('fs').readFile('/');\n}\nbad();\n\n$ env NODE_DEBUG=fs node script.js\nfs.js:88\n        throw backtrace;\n        ^\nError: EISDIR: illegal operation on a directory, read\n    <stack trace.>\n")])])]),s("h2",{attrs:{id:"file-paths"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-paths"}},[t._v("#")]),t._v(" File paths")]),t._v(" "),s("p",[t._v("Most "),s("code",[t._v("fs")]),t._v(" operations accept filepaths that may be specified in the form of\na string, a "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffer"}},[s("code",[t._v("Buffer")])]),t._v(", or a "),s("router-link",{attrs:{to:"/node/url.html#url_the_whatwg_url_api"}},[s("code",[t._v("URL")])]),t._v(" object using the "),s("code",[t._v("file:")]),t._v(" protocol.")],1),t._v(" "),s("p",[t._v("String form paths are interpreted as UTF-8 character sequences identifying\nthe absolute or relative filename. Relative paths will be resolved relative\nto the current working directory as specified by "),s("code",[t._v("process.cwd()")]),t._v(".")]),t._v(" "),s("p",[t._v("Example using an absolute path on POSIX:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/open/some/file.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Example using a relative path on POSIX (relative to "),s("code",[t._v("process.cwd()")]),t._v("):")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Paths specified using a "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffer"}},[s("code",[t._v("Buffer")])]),t._v(" are useful primarily on certain POSIX\noperating systems that treat file paths as opaque byte sequences. On such\nsystems, it is possible for a single file path to contain sub-sequences that\nuse multiple character encodings. As with string paths, "),s("code",[t._v("Buffer")]),t._v(" paths may\nbe relative or absolute:")],1),t._v(" "),s("p",[t._v("Example using an absolute path on POSIX:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/open/some/file.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("On Windows, Node.js follows the concept of per-drive working directory. This\nbehavior can be observed when using a drive path without a backslash. For\nexample "),s("code",[t._v("fs.readdirSync('c:\\\\')")]),t._v(" can potentially return a different result than\n"),s("code",[t._v("fs.readdirSync('c:')")]),t._v(". For more information, see\n"),s("a",{attrs:{href:"https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths",target:"_blank",rel:"noopener noreferrer"}},[t._v("this MSDN page"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"url-object-support"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#url-object-support"}},[t._v("#")]),t._v(" URL object support")]),t._v(" "),s("p",[t._v("For most "),s("code",[t._v("fs")]),t._v(" module functions, the "),s("code",[t._v("path")]),t._v(" or "),s("code",[t._v("filename")]),t._v(" argument may be passed\nas a WHATWG "),s("router-link",{attrs:{to:"/node/url.html#url_the_whatwg_url_api"}},[s("code",[t._v("URL")])]),t._v(" object. Only "),s("router-link",{attrs:{to:"/node/url.html#url_the_whatwg_url_api"}},[s("code",[t._v("URL")])]),t._v(" objects using the "),s("code",[t._v("file:")]),t._v(" protocol\nare supported.")],1),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fileUrl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file:///tmp/hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fileUrl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("file:")]),t._v(" URLs are always absolute paths.")]),t._v(" "),s("p",[t._v("Using WHATWG "),s("router-link",{attrs:{to:"/node/url.html#url_the_whatwg_url_api"}},[s("code",[t._v("URL")])]),t._v(" objects might introduce platform-specific behaviors.")],1),t._v(" "),s("p",[t._v("On Windows, "),s("code",[t._v("file:")]),t._v(" URLs with a hostname convert to UNC paths, while "),s("code",[t._v("file:")]),t._v("\nURLs with drive letters convert to local absolute paths. "),s("code",[t._v("file:")]),t._v(" URLs without a\nhostname nor a drive letter will result in a throw:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// On Windows :")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - WHATWG file URLs with hostname convert to UNC path")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// file://hostname/p/a/t/h/file => \\\\hostname\\p\\a\\t\\h\\file")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file://hostname/p/a/t/h/file'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - WHATWG file URLs with drive letters convert to absolute path")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// file:///C:/tmp/hello => C:\\tmp\\hello")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file:///C:/tmp/hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - WHATWG file URLs without hostname must have a drive letters")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file:///notdriveletter/p/a/t/h/file'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file:///c/p/a/t/h/file'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must be absolute")]),t._v("\n")])])]),s("p",[s("code",[t._v("file:")]),t._v(" URLs with drive letters must use "),s("code",[t._v(":")]),t._v(" as a separator just after\nthe drive letter. Using another separator will result in a throw.")]),t._v(" "),s("p",[t._v("On all other platforms, "),s("code",[t._v("file:")]),t._v(" URLs with a hostname are unsupported and will\nresult in a throw:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// On other platforms:")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - WHATWG file URLs with hostname are unsupported")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// file://hostname/p/a/t/h/file => throw!")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file://hostname/p/a/t/h/file'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeError [ERR_INVALID_FILE_URL_PATH]: must be absolute")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// - WHATWG file URLs convert to absolute path")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// file:///tmp/hello => /tmp/hello")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file:///tmp/hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("A "),s("code",[t._v("file:")]),t._v(" URL having encoded slash characters will result in a throw on all\nplatforms:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// On Windows")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file:///C:/p/a/t/h/%2F'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file:///C:/p/a/t/h/%2f'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded\n\\ or / characters */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// On POSIX")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file:///p/a/t/h/%2F'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file:///p/a/t/h/%2f'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded\n/ characters */")]),t._v("\n")])])]),s("p",[t._v("On Windows, "),s("code",[t._v("file:")]),t._v(" URLs having encoded backslash will result in a throw:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// On Windows")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file:///C:/path/%5C'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'file:///C:/path/%5c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded\n\\ or / characters */")]),t._v("\n")])])]),s("h2",{attrs:{id:"file-descriptors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-descriptors"}},[t._v("#")]),t._v(" File Descriptors")]),t._v(" "),s("p",[t._v("On POSIX systems, for every process, the kernel maintains a table of currently\nopen files and resources. Each open file is assigned a simple numeric\nidentifier called a "),s("em",[t._v("file descriptor")]),t._v(". At the system-level, all file system\noperations use these file descriptors to identify and track each specific\nfile. Windows systems use a different but conceptually similar mechanism for\ntracking resources. To simplify things for users, Node.js abstracts away the\nspecific differences between operating systems and assigns all open files a\nnumeric file descriptor.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("fs.open()")]),t._v(" method is used to allocate a new file descriptor. Once\nallocated, the file descriptor may be used to read data from, write data to,\nor request information about the file.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/open/some/file.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fstat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use stat")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// always close the file descriptor!")]),t._v("\n    fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Most operating systems limit the number of file descriptors that may be open\nat any given time so it is critical to close the descriptor when operations\nare completed. Failure to do so will result in a memory leak that will\neventually cause an application to crash.")]),t._v(" "),s("h2",{attrs:{id:"threadpool-usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#threadpool-usage"}},[t._v("#")]),t._v(" Threadpool Usage")]),t._v(" "),s("p",[t._v("All file system APIs except "),s("code",[t._v("fs.FSWatcher()")]),t._v(" and those that are explicitly\nsynchronous use libuv's threadpool, which can have surprising and negative\nperformance implications for some applications. See the\n"),s("router-link",{attrs:{to:"/node/cli.html#cli_uv_threadpool_size_size"}},[s("code",[t._v("UV_THREADPOOL_SIZE")])]),t._v(" documentation for more information.")],1),t._v(" "),s("h2",{attrs:{id:"class-fs-dir"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-fs-dir"}},[t._v("#")]),t._v(" Class fs.Dir")]),t._v(" "),s("p",[t._v("A class representing a directory stream.")]),t._v(" "),s("p",[t._v("Created by "),s("a",{attrs:{href:"#fs_fs_opendir_path_options_callback"}},[s("code",[t._v("fs.opendir()")])]),t._v(", "),s("a",{attrs:{href:"#fs_fs_opendirsync_path_options"}},[s("code",[t._v("fs.opendirSync()")])]),t._v(", or\n"),s("a",{attrs:{href:"#fs_fspromises_opendir_path_options"}},[s("code",[t._v("fsPromises.opendir()")])]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("path")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dir "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("promises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("opendir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dirent "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" dir"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"dir-close"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dir-close"}},[t._v("#")]),t._v(" dir.close()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronously close the directory's underlying resource handle.\nSubsequent reads will result in errors.")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("Promise")]),t._v(" is returned that will be resolved after the resource has been\nclosed.")]),t._v(" "),s("h3",{attrs:{id:"dir-close-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dir-close-callback"}},[t._v("#")]),t._v(" dir.close(callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronously close the directory's underlying resource handle.\nSubsequent reads will result in errors.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("callback")]),t._v(" will be called after the resource handle has been closed.")]),t._v(" "),s("h3",{attrs:{id:"dir-closesync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dir-closesync"}},[t._v("#")]),t._v(" dir.closeSync()")]),t._v(" "),s("p",[t._v("Synchronously close the directory's underlying resource handle.\nSubsequent reads will result in errors.")]),t._v(" "),s("h3",{attrs:{id:"dir-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dir-path"}},[t._v("#")]),t._v(" dir.path")]),t._v(" "),s("ul",[s("li",[t._v("{string}")])]),t._v(" "),s("p",[t._v("The read-only path of this directory as was provided to "),s("a",{attrs:{href:"#fs_fs_opendir_path_options_callback"}},[s("code",[t._v("fs.opendir()")])]),t._v(",\n"),s("a",{attrs:{href:"#fs_fs_opendirsync_path_options"}},[s("code",[t._v("fs.opendirSync()")])]),t._v(", or "),s("a",{attrs:{href:"#fs_fspromises_opendir_path_options"}},[s("code",[t._v("fsPromises.opendir()")])]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"dir-read"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dir-read"}},[t._v("#")]),t._v(" dir.read()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {Promise} containing {fs.Dirent|null}")])]),t._v(" "),s("p",[t._v("Asynchronously read the next directory entry via readdir(3) as an\n"),s("a",{attrs:{href:"#fs_class_fs_dirent"}},[s("code",[t._v("fs.Dirent")])]),t._v(".")]),t._v(" "),s("p",[t._v("After the read is completed, a "),s("code",[t._v("Promise")]),t._v(" is returned that will be resolved with\nan "),s("a",{attrs:{href:"#fs_class_fs_dirent"}},[s("code",[t._v("fs.Dirent")])]),t._v(", or "),s("code",[t._v("null")]),t._v(" if there are no more directory entries to read.")]),t._v(" "),s("p",[t._v("Directory entries returned by this function are in no particular order as\nprovided by the operating system's underlying directory mechanisms.\nEntries added or removed while iterating over the directory may or may not be\nincluded in the iteration results.")]),t._v(" "),s("h3",{attrs:{id:"dir-read-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dir-read-callback"}},[t._v("#")]),t._v(" dir.read(callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("dirent")]),t._v(" {fs.Dirent|null}")])])])]),t._v(" "),s("p",[t._v("Asynchronously read the next directory entry via readdir(3) as an\n"),s("a",{attrs:{href:"#fs_class_fs_dirent"}},[s("code",[t._v("fs.Dirent")])]),t._v(".")]),t._v(" "),s("p",[t._v("After the read is completed, the "),s("code",[t._v("callback")]),t._v(" will be called with an\n"),s("a",{attrs:{href:"#fs_class_fs_dirent"}},[s("code",[t._v("fs.Dirent")])]),t._v(", or "),s("code",[t._v("null")]),t._v(" if there are no more directory entries to read.")]),t._v(" "),s("p",[t._v("Directory entries returned by this function are in no particular order as\nprovided by the operating system's underlying directory mechanisms.\nEntries added or removed while iterating over the directory may or may not be\nincluded in the iteration results.")]),t._v(" "),s("h3",{attrs:{id:"dir-readsync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dir-readsync"}},[t._v("#")]),t._v(" dir.readSync()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {fs.Dirent|null}")])]),t._v(" "),s("p",[t._v("Synchronously read the next directory entry via readdir(3) as an\n"),s("a",{attrs:{href:"#fs_class_fs_dirent"}},[s("code",[t._v("fs.Dirent")])]),t._v(".")]),t._v(" "),s("p",[t._v("If there are no more directory entries to read, "),s("code",[t._v("null")]),t._v(" will be returned.")]),t._v(" "),s("p",[t._v("Directory entries returned by this function are in no particular order as\nprovided by the operating system's underlying directory mechanisms.\nEntries added or removed while iterating over the directory may or may not be\nincluded in the iteration results.")]),t._v(" "),s("h3",{attrs:{id:"dir-symbol-asynciterator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dir-symbol-asynciterator"}},[t._v("#")]),t._v(" dir[Symbol.asyncIterator]()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {AsyncIterator} of {fs.Dirent}")])]),t._v(" "),s("p",[t._v("Asynchronously iterates over the directory via readdir(3) until all entries have\nbeen read.")]),t._v(" "),s("p",[t._v("Entries returned by the async iterator are always an "),s("a",{attrs:{href:"#fs_class_fs_dirent"}},[s("code",[t._v("fs.Dirent")])]),t._v(".\nThe "),s("code",[t._v("null")]),t._v(" case from "),s("code",[t._v("dir.read()")]),t._v(" is handled internally.")]),t._v(" "),s("p",[t._v("See "),s("a",{attrs:{href:"#fs_class_fs_dir"}},[s("code",[t._v("fs.Dir")])]),t._v(" for an example.")]),t._v(" "),s("p",[t._v("Directory entries returned by this iterator are in no particular order as\nprovided by the operating system's underlying directory mechanisms.\nEntries added or removed while iterating over the directory may or may not be\nincluded in the iteration results.")]),t._v(" "),s("h2",{attrs:{id:"class-fs-dirent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-fs-dirent"}},[t._v("#")]),t._v(" Class: fs.Dirent")]),t._v(" "),s("p",[t._v("A representation of a directory entry, as returned by reading from an\n"),s("a",{attrs:{href:"#fs_class_fs_dir"}},[s("code",[t._v("fs.Dir")])]),t._v(".")]),t._v(" "),s("p",[t._v("Additionally, when "),s("a",{attrs:{href:"#fs_fs_readdir_path_options_callback"}},[s("code",[t._v("fs.readdir()")])]),t._v(" or "),s("a",{attrs:{href:"#fs_fs_readdirsync_path_options"}},[s("code",[t._v("fs.readdirSync()")])]),t._v(" is called with\nthe "),s("code",[t._v("withFileTypes")]),t._v(" option set to "),s("code",[t._v("true")]),t._v(", the resulting array is filled with\n"),s("code",[t._v("fs.Dirent")]),t._v(" objects, rather than strings or "),s("code",[t._v("Buffers")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"dirent-isblockdevice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirent-isblockdevice"}},[t._v("#")]),t._v(" dirent.isBlockDevice()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Dirent")]),t._v(" object describes a block device.")]),t._v(" "),s("h3",{attrs:{id:"dirent-ischaracterdevice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirent-ischaracterdevice"}},[t._v("#")]),t._v(" dirent.isCharacterDevice()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Dirent")]),t._v(" object describes a character device.")]),t._v(" "),s("h3",{attrs:{id:"dirent-isdirectory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirent-isdirectory"}},[t._v("#")]),t._v(" dirent.isDirectory()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Dirent")]),t._v(" object describes a file system\ndirectory.")]),t._v(" "),s("h3",{attrs:{id:"dirent-isfifo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirent-isfifo"}},[t._v("#")]),t._v(" dirent.isFIFO()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Dirent")]),t._v(" object describes a first-in-first-out\n(FIFO) pipe.")]),t._v(" "),s("h3",{attrs:{id:"dirent-isfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirent-isfile"}},[t._v("#")]),t._v(" dirent.isFile()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Dirent")]),t._v(" object describes a regular file.")]),t._v(" "),s("h3",{attrs:{id:"dirent-issocket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirent-issocket"}},[t._v("#")]),t._v(" dirent.isSocket()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Dirent")]),t._v(" object describes a socket.")]),t._v(" "),s("h3",{attrs:{id:"dirent-issymboliclink"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirent-issymboliclink"}},[t._v("#")]),t._v(" dirent.isSymbolicLink()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Dirent")]),t._v(" object describes a symbolic link.")]),t._v(" "),s("h3",{attrs:{id:"dirent-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirent-name"}},[t._v("#")]),t._v(" dirent.name")]),t._v(" "),s("ul",[s("li",[t._v("{string|Buffer}")])]),t._v(" "),s("p",[t._v("The file name that this "),s("code",[t._v("fs.Dirent")]),t._v(" object refers to. The type of this\nvalue is determined by the "),s("code",[t._v("options.encoding")]),t._v(" passed to "),s("a",{attrs:{href:"#fs_fs_readdir_path_options_callback"}},[s("code",[t._v("fs.readdir()")])]),t._v(" or\n"),s("a",{attrs:{href:"#fs_fs_readdirsync_path_options"}},[s("code",[t._v("fs.readdirSync()")])]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"class-fs-fswatcher"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-fs-fswatcher"}},[t._v("#")]),t._v(" Class: fs.FSWatcher")]),t._v(" "),s("ul",[s("li",[t._v("Extends {EventEmitter}")])]),t._v(" "),s("p",[t._v("A successful call to "),s("a",{attrs:{href:"#fs_fs_watch_filename_options_listener"}},[s("code",[t._v("fs.watch()")])]),t._v(" method will return a new "),s("code",[t._v("fs.FSWatcher")]),t._v("\nobject.")]),t._v(" "),s("p",[t._v("All "),s("code",[t._v("fs.FSWatcher")]),t._v(" objects emit a "),s("code",[t._v("'change'")]),t._v(" event whenever a specific watched\nfile is modified.")]),t._v(" "),s("h3",{attrs:{id:"event-change"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-change"}},[t._v("#")]),t._v(" Event: 'change'")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("eventType")]),t._v(" {string} The type of change event that has occurred")]),t._v(" "),s("li",[s("code",[t._v("filename")]),t._v(" {string|Buffer} The filename that changed (if relevant/available)")])]),t._v(" "),s("p",[t._v("Emitted when something changes in a watched directory or file.\nSee more details in "),s("a",{attrs:{href:"#fs_fs_watch_filename_options_listener"}},[s("code",[t._v("fs.watch()")])]),t._v(".")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("filename")]),t._v(" argument may not be provided depending on operating system\nsupport. If "),s("code",[t._v("filename")]),t._v(" is provided, it will be provided as a "),s("code",[t._v("Buffer")]),t._v(" if\n"),s("code",[t._v("fs.watch()")]),t._v(" is called with its "),s("code",[t._v("encoding")]),t._v(" option set to "),s("code",[t._v("'buffer'")]),t._v(", otherwise\n"),s("code",[t._v("filename")]),t._v(" will be a UTF-8 string.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Example when handled through fs.watch() listener")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./tmp'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'buffer'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("eventType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: <Buffer ...>")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"event-close"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-close"}},[t._v("#")]),t._v(" Event: 'close'")]),t._v(" "),s("p",[t._v("Emitted when the watcher stops watching for changes. The closed\n"),s("code",[t._v("fs.FSWatcher")]),t._v(" object is no longer usable in the event handler.")]),t._v(" "),s("h3",{attrs:{id:"event-error"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-error"}},[t._v("#")]),t._v(" Event: 'error'")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("error")]),t._v(" {Error}")])]),t._v(" "),s("p",[t._v("Emitted when an error occurs while watching the file. The errored\n"),s("code",[t._v("fs.FSWatcher")]),t._v(" object is no longer usable in the event handler.")]),t._v(" "),s("h3",{attrs:{id:"watcher-close"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watcher-close"}},[t._v("#")]),t._v(" watcher.close()")]),t._v(" "),s("p",[t._v("Stop watching for changes on the given "),s("code",[t._v("fs.FSWatcher")]),t._v(". Once stopped, the\n"),s("code",[t._v("fs.FSWatcher")]),t._v(" object is no longer usable.")]),t._v(" "),s("h2",{attrs:{id:"class-fs-readstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-fs-readstream"}},[t._v("#")]),t._v(" Class: fs.ReadStream")]),t._v(" "),s("ul",[s("li",[t._v("Extends: {stream.Readable}")])]),t._v(" "),s("p",[t._v("A successful call to "),s("code",[t._v("fs.createReadStream()")]),t._v(" will return a new "),s("code",[t._v("fs.ReadStream")]),t._v("\nobject.")]),t._v(" "),s("h3",{attrs:{id:"event-close-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-close-2"}},[t._v("#")]),t._v(" Event: 'close'")]),t._v(" "),s("p",[t._v("Emitted when the "),s("code",[t._v("fs.ReadStream")]),t._v("'s underlying file descriptor has been closed.")]),t._v(" "),s("h3",{attrs:{id:"event-open"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-open"}},[t._v("#")]),t._v(" Event: 'open'")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer} Integer file descriptor used by the "),s("code",[t._v("ReadStream")]),t._v(".")])]),t._v(" "),s("p",[t._v("Emitted when the "),s("code",[t._v("fs.ReadStream")]),t._v("'s file descriptor has been opened.")]),t._v(" "),s("h3",{attrs:{id:"event-ready"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-ready"}},[t._v("#")]),t._v(" Event: 'ready'")]),t._v(" "),s("p",[t._v("Emitted when the "),s("code",[t._v("fs.ReadStream")]),t._v(" is ready to be used.")]),t._v(" "),s("p",[t._v("Fires immediately after "),s("code",[t._v("'open'")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"readstream-bytesread"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readstream-bytesread"}},[t._v("#")]),t._v(" readStream.bytesRead")]),t._v(" "),s("ul",[s("li",[t._v("{number}")])]),t._v(" "),s("p",[t._v("The number of bytes that have been read so far.")]),t._v(" "),s("h3",{attrs:{id:"readstream-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readstream-path"}},[t._v("#")]),t._v(" readStream.path")]),t._v(" "),s("ul",[s("li",[t._v("{string|Buffer}")])]),t._v(" "),s("p",[t._v("The path to the file the stream is reading from as specified in the first\nargument to "),s("code",[t._v("fs.createReadStream()")]),t._v(". If "),s("code",[t._v("path")]),t._v(" is passed as a string, then\n"),s("code",[t._v("readStream.path")]),t._v(" will be a string. If "),s("code",[t._v("path")]),t._v(" is passed as a "),s("code",[t._v("Buffer")]),t._v(", then\n"),s("code",[t._v("readStream.path")]),t._v(" will be a "),s("code",[t._v("Buffer")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"readstream-pending"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readstream-pending"}},[t._v("#")]),t._v(" readStream.pending")]),t._v(" "),s("ul",[s("li",[t._v("{boolean}")])]),t._v(" "),s("p",[t._v("This property is "),s("code",[t._v("true")]),t._v(" if the underlying file has not been opened yet,\ni.e. before the "),s("code",[t._v("'ready'")]),t._v(" event is emitted.")]),t._v(" "),s("h2",{attrs:{id:"class-fs-stats"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-fs-stats"}},[t._v("#")]),t._v(" Class: fs.Stats")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("fs.Stats")]),t._v(" object provides information about a file.")]),t._v(" "),s("p",[t._v("Objects returned from "),s("a",{attrs:{href:"#fs_fs_stat_path_options_callback"}},[s("code",[t._v("fs.stat()")])]),t._v(", "),s("a",{attrs:{href:"#fs_fs_lstat_path_options_callback"}},[s("code",[t._v("fs.lstat()")])]),t._v(" and "),s("a",{attrs:{href:"#fs_fs_fstat_fd_options_callback"}},[s("code",[t._v("fs.fstat()")])]),t._v(" and\ntheir synchronous counterparts are of this type.\nIf "),s("code",[t._v("bigint")]),t._v(" in the "),s("code",[t._v("options")]),t._v(" passed to those methods is true, the numeric values\nwill be "),s("code",[t._v("bigint")]),t._v(" instead of "),s("code",[t._v("number")]),t._v(", and the object will contain additional\nnanosecond-precision properties suffixed with "),s("code",[t._v("Ns")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Stats {\n  dev: 2114,\n  ino: 48064969,\n  mode: 33188,\n  nlink: 1,\n  uid: 85,\n  gid: 100,\n  rdev: 0,\n  size: 527,\n  blksize: 4096,\n  blocks: 8,\n  atimeMs: 1318289051000.1,\n  mtimeMs: 1318289051000.1,\n  ctimeMs: 1318289051000.1,\n  birthtimeMs: 1318289051000.1,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n  birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\n")])])]),s("p",[s("code",[t._v("bigint")]),t._v(" version:")]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("BigIntStats {\n  dev: 2114n,\n  ino: 48064969n,\n  mode: 33188n,\n  nlink: 1n,\n  uid: 85n,\n  gid: 100n,\n  rdev: 0n,\n  size: 527n,\n  blksize: 4096n,\n  blocks: 8n,\n  atimeMs: 1318289051000n,\n  mtimeMs: 1318289051000n,\n  ctimeMs: 1318289051000n,\n  birthtimeMs: 1318289051000n,\n  atimeNs: 1318289051000000000n,\n  mtimeNs: 1318289051000000000n,\n  ctimeNs: 1318289051000000000n,\n  birthtimeNs: 1318289051000000000n,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n  birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\n")])])]),s("h3",{attrs:{id:"stats-isblockdevice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-isblockdevice"}},[t._v("#")]),t._v(" stats.isBlockDevice()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Stats")]),t._v(" object describes a block device.")]),t._v(" "),s("h3",{attrs:{id:"stats-ischaracterdevice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-ischaracterdevice"}},[t._v("#")]),t._v(" stats.isCharacterDevice()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Stats")]),t._v(" object describes a character device.")]),t._v(" "),s("h3",{attrs:{id:"stats-isdirectory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-isdirectory"}},[t._v("#")]),t._v(" stats.isDirectory()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Stats")]),t._v(" object describes a file system directory.")]),t._v(" "),s("h3",{attrs:{id:"stats-isfifo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-isfifo"}},[t._v("#")]),t._v(" stats.isFIFO()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Stats")]),t._v(" object describes a first-in-first-out (FIFO)\npipe.")]),t._v(" "),s("h3",{attrs:{id:"stats-isfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-isfile"}},[t._v("#")]),t._v(" stats.isFile()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Stats")]),t._v(" object describes a regular file.")]),t._v(" "),s("h3",{attrs:{id:"stats-issocket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-issocket"}},[t._v("#")]),t._v(" stats.isSocket()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Stats")]),t._v(" object describes a socket.")]),t._v(" "),s("h3",{attrs:{id:"stats-issymboliclink"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-issymboliclink"}},[t._v("#")]),t._v(" stats.isSymbolicLink()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the "),s("code",[t._v("fs.Stats")]),t._v(" object describes a symbolic link.")]),t._v(" "),s("p",[t._v("This method is only valid when using "),s("a",{attrs:{href:"#fs_fs_lstat_path_options_callback"}},[s("code",[t._v("fs.lstat()")])]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"stats-dev"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-dev"}},[t._v("#")]),t._v(" stats.dev")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v("The numeric identifier of the device containing the file.")]),t._v(" "),s("h3",{attrs:{id:"stats-ino"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-ino"}},[t._v("#")]),t._v(" stats.ino")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v('The file system specific "Inode" number for the file.')]),t._v(" "),s("h3",{attrs:{id:"stats-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-mode"}},[t._v("#")]),t._v(" stats.mode")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v("A bit-field describing the file type and mode.")]),t._v(" "),s("h3",{attrs:{id:"stats-nlink"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-nlink"}},[t._v("#")]),t._v(" stats.nlink")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v("The number of hard-links that exist for the file.")]),t._v(" "),s("h3",{attrs:{id:"stats-uid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-uid"}},[t._v("#")]),t._v(" stats.uid")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v("The numeric user identifier of the user that owns the file (POSIX).")]),t._v(" "),s("h3",{attrs:{id:"stats-gid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-gid"}},[t._v("#")]),t._v(" stats.gid")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v("The numeric group identifier of the group that owns the file (POSIX).")]),t._v(" "),s("h3",{attrs:{id:"stats-rdev"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-rdev"}},[t._v("#")]),t._v(" stats.rdev")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v('A numeric device identifier if the file is considered "special".')]),t._v(" "),s("h3",{attrs:{id:"stats-size"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-size"}},[t._v("#")]),t._v(" stats.size")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v("The size of the file in bytes.")]),t._v(" "),s("h3",{attrs:{id:"stats-blksize"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-blksize"}},[t._v("#")]),t._v(" stats.blksize")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v("The file system block size for i/o operations.")]),t._v(" "),s("h3",{attrs:{id:"stats-blocks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-blocks"}},[t._v("#")]),t._v(" stats.blocks")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v("The number of blocks allocated for this file.")]),t._v(" "),s("h3",{attrs:{id:"stats-atimems"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-atimems"}},[t._v("#")]),t._v(" stats.atimeMs")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v("The timestamp indicating the last time this file was accessed expressed in\nmilliseconds since the POSIX Epoch.")]),t._v(" "),s("h3",{attrs:{id:"stats-mtimems"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-mtimems"}},[t._v("#")]),t._v(" stats.mtimeMs")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v("The timestamp indicating the last time this file was modified expressed in\nmilliseconds since the POSIX Epoch.")]),t._v(" "),s("h3",{attrs:{id:"stats-ctimems"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-ctimems"}},[t._v("#")]),t._v(" stats.ctimeMs")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v("The timestamp indicating the last time the file status was changed expressed\nin milliseconds since the POSIX Epoch.")]),t._v(" "),s("h3",{attrs:{id:"stats-birthtimems"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-birthtimems"}},[t._v("#")]),t._v(" stats.birthtimeMs")]),t._v(" "),s("ul",[s("li",[t._v("{number|bigint}")])]),t._v(" "),s("p",[t._v("The timestamp indicating the creation time of this file expressed in\nmilliseconds since the POSIX Epoch.")]),t._v(" "),s("h3",{attrs:{id:"stats-atimens"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-atimens"}},[t._v("#")]),t._v(" stats.atimeNs")]),t._v(" "),s("ul",[s("li",[t._v("{bigint}")])]),t._v(" "),s("p",[t._v("Only present when "),s("code",[t._v("bigint: true")]),t._v(" is passed into the method that generates\nthe object.\nThe timestamp indicating the last time this file was accessed expressed in\nnanoseconds since the POSIX Epoch.")]),t._v(" "),s("h3",{attrs:{id:"stats-mtimens"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-mtimens"}},[t._v("#")]),t._v(" stats.mtimeNs")]),t._v(" "),s("ul",[s("li",[t._v("{bigint}")])]),t._v(" "),s("p",[t._v("Only present when "),s("code",[t._v("bigint: true")]),t._v(" is passed into the method that generates\nthe object.\nThe timestamp indicating the last time this file was modified expressed in\nnanoseconds since the POSIX Epoch.")]),t._v(" "),s("h3",{attrs:{id:"stats-ctimens"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-ctimens"}},[t._v("#")]),t._v(" stats.ctimeNs")]),t._v(" "),s("ul",[s("li",[t._v("{bigint}")])]),t._v(" "),s("p",[t._v("Only present when "),s("code",[t._v("bigint: true")]),t._v(" is passed into the method that generates\nthe object.\nThe timestamp indicating the last time the file status was changed expressed\nin nanoseconds since the POSIX Epoch.")]),t._v(" "),s("h3",{attrs:{id:"stats-birthtimens"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-birthtimens"}},[t._v("#")]),t._v(" stats.birthtimeNs")]),t._v(" "),s("ul",[s("li",[t._v("{bigint}")])]),t._v(" "),s("p",[t._v("Only present when "),s("code",[t._v("bigint: true")]),t._v(" is passed into the method that generates\nthe object.\nThe timestamp indicating the creation time of this file expressed in\nnanoseconds since the POSIX Epoch.")]),t._v(" "),s("h3",{attrs:{id:"stats-atime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-atime"}},[t._v("#")]),t._v(" stats.atime")]),t._v(" "),s("ul",[s("li",[t._v("{Date}")])]),t._v(" "),s("p",[t._v("The timestamp indicating the last time this file was accessed.")]),t._v(" "),s("h3",{attrs:{id:"stats-mtime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-mtime"}},[t._v("#")]),t._v(" stats.mtime")]),t._v(" "),s("ul",[s("li",[t._v("{Date}")])]),t._v(" "),s("p",[t._v("The timestamp indicating the last time this file was modified.")]),t._v(" "),s("h3",{attrs:{id:"stats-ctime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-ctime"}},[t._v("#")]),t._v(" stats.ctime")]),t._v(" "),s("ul",[s("li",[t._v("{Date}")])]),t._v(" "),s("p",[t._v("The timestamp indicating the last time the file status was changed.")]),t._v(" "),s("h3",{attrs:{id:"stats-birthtime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stats-birthtime"}},[t._v("#")]),t._v(" stats.birthtime")]),t._v(" "),s("ul",[s("li",[t._v("{Date}")])]),t._v(" "),s("p",[t._v("The timestamp indicating the creation time of this file.")]),t._v(" "),s("h3",{attrs:{id:"stat-time-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stat-time-values"}},[t._v("#")]),t._v(" Stat Time Values")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("atimeMs")]),t._v(", "),s("code",[t._v("mtimeMs")]),t._v(", "),s("code",[t._v("ctimeMs")]),t._v(", "),s("code",[t._v("birthtimeMs")]),t._v(" properties are\nnumeric values that hold the corresponding times in milliseconds. Their\nprecision is platform specific. When "),s("code",[t._v("bigint: true")]),t._v(" is passed into the\nmethod that generates the object, the properties will be "),s("a",{attrs:{href:"https://tc39.github.io/proposal-bigint",target:"_blank",rel:"noopener noreferrer"}},[t._v("bigints"),s("OutboundLink")],1),t._v(",\notherwise they will be "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",target:"_blank",rel:"noopener noreferrer"}},[t._v("numbers"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("atimeNs")]),t._v(", "),s("code",[t._v("mtimeNs")]),t._v(", "),s("code",[t._v("ctimeNs")]),t._v(", "),s("code",[t._v("birthtimeNs")]),t._v(" properties are\n"),s("a",{attrs:{href:"https://tc39.github.io/proposal-bigint",target:"_blank",rel:"noopener noreferrer"}},[t._v("bigints"),s("OutboundLink")],1),t._v(" that hold the corresponding times in nanoseconds. They are\nonly present when "),s("code",[t._v("bigint: true")]),t._v(" is passed into the method that generates\nthe object. Their precision is platform specific.")]),t._v(" "),s("p",[s("code",[t._v("atime")]),t._v(", "),s("code",[t._v("mtime")]),t._v(", "),s("code",[t._v("ctime")]),t._v(", and "),s("code",[t._v("birthtime")]),t._v(" are\n"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Date")]),s("OutboundLink")],1),t._v(" object alternate representations of the various times. The\n"),s("code",[t._v("Date")]),t._v(" and number values are not connected. Assigning a new number value, or\nmutating the "),s("code",[t._v("Date")]),t._v(" value, will not be reflected in the corresponding alternate\nrepresentation.")]),t._v(" "),s("p",[t._v("The times in the stat object have the following semantics:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("atime")]),t._v(' "Access Time": Time when file data last accessed. Changed\nby the mknod(2), utimes(2), and read(2) system calls.')]),t._v(" "),s("li",[s("code",[t._v("mtime")]),t._v(' "Modified Time": Time when file data last modified.\nChanged by the mknod(2), utimes(2), and write(2) system calls.')]),t._v(" "),s("li",[s("code",[t._v("ctime")]),t._v(' "Change Time": Time when file status was last changed\n(inode data modification). Changed by the chmod(2), chown(2),\nlink(2), mknod(2), rename(2), unlink(2), utimes(2),\nread(2), and write(2) system calls.')]),t._v(" "),s("li",[s("code",[t._v("birthtime")]),t._v(' "Birth Time": Time of file creation. Set once when the\nfile is created. On filesystems where birthtime is not available,\nthis field may instead hold either the '),s("code",[t._v("ctime")]),t._v(" or\n"),s("code",[t._v("1970-01-01T00:00Z")]),t._v(" (ie, Unix epoch timestamp "),s("code",[t._v("0")]),t._v("). This value may be greater\nthan "),s("code",[t._v("atime")]),t._v(" or "),s("code",[t._v("mtime")]),t._v(" in this case. On Darwin and other FreeBSD variants,\nalso set if the "),s("code",[t._v("atime")]),t._v(" is explicitly set to an earlier value than the current\n"),s("code",[t._v("birthtime")]),t._v(" using the utimes(2) system call.")])]),t._v(" "),s("p",[t._v("Prior to Node.js 0.12, the "),s("code",[t._v("ctime")]),t._v(" held the "),s("code",[t._v("birthtime")]),t._v(" on Windows systems. As\nof 0.12, "),s("code",[t._v("ctime")]),t._v(' is not "creation time", and on Unix systems, it never was.')]),t._v(" "),s("h2",{attrs:{id:"class-fs-writestream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-fs-writestream"}},[t._v("#")]),t._v(" Class: fs.WriteStream")]),t._v(" "),s("ul",[s("li",[t._v("Extends {stream.Writable}")])]),t._v(" "),s("h3",{attrs:{id:"event-close-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-close-3"}},[t._v("#")]),t._v(" Event: 'close'")]),t._v(" "),s("p",[t._v("Emitted when the "),s("code",[t._v("WriteStream")]),t._v("'s underlying file descriptor has been closed.")]),t._v(" "),s("h3",{attrs:{id:"event-open-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-open-2"}},[t._v("#")]),t._v(" Event: 'open'")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer} Integer file descriptor used by the "),s("code",[t._v("WriteStream")]),t._v(".")])]),t._v(" "),s("p",[t._v("Emitted when the "),s("code",[t._v("WriteStream")]),t._v("'s file is opened.")]),t._v(" "),s("h3",{attrs:{id:"event-ready-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-ready-2"}},[t._v("#")]),t._v(" Event: 'ready'")]),t._v(" "),s("p",[t._v("Emitted when the "),s("code",[t._v("fs.WriteStream")]),t._v(" is ready to be used.")]),t._v(" "),s("p",[t._v("Fires immediately after "),s("code",[t._v("'open'")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"writestream-byteswritten"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writestream-byteswritten"}},[t._v("#")]),t._v(" writeStream.bytesWritten")]),t._v(" "),s("p",[t._v("The number of bytes written so far. Does not include data that is still queued\nfor writing.")]),t._v(" "),s("h3",{attrs:{id:"writestream-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writestream-path"}},[t._v("#")]),t._v(" writeStream.path")]),t._v(" "),s("p",[t._v("The path to the file the stream is writing to as specified in the first\nargument to "),s("a",{attrs:{href:"#fs_fs_createwritestream_path_options"}},[s("code",[t._v("fs.createWriteStream()")])]),t._v(". If "),s("code",[t._v("path")]),t._v(" is passed as a string, then\n"),s("code",[t._v("writeStream.path")]),t._v(" will be a string. If "),s("code",[t._v("path")]),t._v(" is passed as a "),s("code",[t._v("Buffer")]),t._v(", then\n"),s("code",[t._v("writeStream.path")]),t._v(" will be a "),s("code",[t._v("Buffer")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"writestream-pending"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writestream-pending"}},[t._v("#")]),t._v(" writeStream.pending")]),t._v(" "),s("ul",[s("li",[t._v("{boolean}")])]),t._v(" "),s("p",[t._v("This property is "),s("code",[t._v("true")]),t._v(" if the underlying file has not been opened yet,\ni.e. before the "),s("code",[t._v("'ready'")]),t._v(" event is emitted.")]),t._v(" "),s("h2",{attrs:{id:"fs-access-path-mode-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-access-path-mode-callback"}},[t._v("#")]),t._v(" fs.access(path[, mode], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("fs.constants.F_OK")])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Tests a user's permissions for the file or directory specified by "),s("code",[t._v("path")]),t._v(".\nThe "),s("code",[t._v("mode")]),t._v(" argument is an optional integer that specifies the accessibility\nchecks to be performed. Check "),s("a",{attrs:{href:"#fs_file_access_constants"}},[t._v("File Access Constants")]),t._v(" for possible values\nof "),s("code",[t._v("mode")]),t._v(". It is possible to create a mask consisting of the bitwise OR of\ntwo or more values (e.g. "),s("code",[t._v("fs.constants.W_OK | fs.constants.R_OK")]),t._v(").")]),t._v(" "),s("p",[t._v("The final argument, "),s("code",[t._v("callback")]),t._v(", is a callback function that is invoked with\na possible error argument. If any of the accessibility checks fail, the error\nargument will be an "),s("code",[t._v("Error")]),t._v(" object. The following examples check if\n"),s("code",[t._v("package.json")]),t._v(" exists, and if it is readable or writable.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" file "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'package.json'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if the file exists in the current directory.")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("access")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F_OK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'does not exist'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'exists'")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if the file is readable.")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("access")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R_OK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'is not readable'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'is readable'")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if the file is writable.")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("access")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("W_OK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'is not writable'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'is writable'")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if the file exists in the current directory, and if it is writable.")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("access")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F_OK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("W_OK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ENOENT'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'does not exist'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'is read-only'")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" exists, and it is writable")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Using "),s("code",[t._v("fs.access()")]),t._v(" to check for the accessibility of a file before calling\n"),s("code",[t._v("fs.open()")]),t._v(", "),s("code",[t._v("fs.readFile()")]),t._v(" or "),s("code",[t._v("fs.writeFile()")]),t._v(" is not recommended. Doing\nso introduces a race condition, since other processes may change the file's\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file is not accessible.")]),t._v(" "),s("p",[s("strong",[t._v("write (NOT RECOMMENDED)")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("access")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile already exists'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeMyData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("write (RECOMMENDED)")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'EEXIST'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile already exists'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeMyData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("read (NOT RECOMMENDED)")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("access")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ENOENT'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile does not exist'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readMyData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("read (RECOMMENDED)")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ENOENT'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile does not exist'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readMyData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v('The "not recommended" examples above check for accessibility and then use the\nfile; the "recommended" examples are better because they use the file directly\nand handle the error, if any.')]),t._v(" "),s("p",[t._v("In general, check for the accessibility of a file only if the file will not be\nused directly, for example when its accessibility is a signal from another\nprocess.")]),t._v(" "),s("p",[t._v("On Windows, access-control policies (ACLs) on a directory may limit access to\na file or directory. The "),s("code",[t._v("fs.access()")]),t._v(" function, however, does not check the\nACL and therefore may report that a path is accessible even if the ACL restricts\nthe user from reading or writing to it.")]),t._v(" "),s("h2",{attrs:{id:"fs-accesssync-path-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-accesssync-path-mode"}},[t._v("#")]),t._v(" fs.accessSync(path[, mode])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("fs.constants.F_OK")])])]),t._v(" "),s("p",[t._v("Synchronously tests a user's permissions for the file or directory specified\nby "),s("code",[t._v("path")]),t._v(". The "),s("code",[t._v("mode")]),t._v(" argument is an optional integer that specifies the\naccessibility checks to be performed. Check "),s("a",{attrs:{href:"#fs_file_access_constants"}},[t._v("File Access Constants")]),t._v(" for\npossible values of "),s("code",[t._v("mode")]),t._v(". It is possible to create a mask consisting of\nthe bitwise OR of two or more values\n(e.g. "),s("code",[t._v("fs.constants.W_OK | fs.constants.R_OK")]),t._v(").")]),t._v(" "),s("p",[t._v("If any of the accessibility checks fail, an "),s("code",[t._v("Error")]),t._v(" will be thrown. Otherwise,\nthe method will return "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("accessSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'etc/passwd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R_OK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("W_OK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'can read/write'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'no access!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"fs-appendfile-path-data-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-appendfile-path-data-options-callback"}},[t._v("#")]),t._v(" fs.appendFile(path, data[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL|number} filename or file descriptor")]),t._v(" "),s("li",[s("code",[t._v("data")]),t._v(" {string|Buffer}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|string}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")])]),t._v(" "),s("li",[s("code",[t._v("flag")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'a'")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronously append data to a file, creating the file if it does not yet\nexist. "),s("code",[t._v("data")]),t._v(" can be a string or a "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffer"}},[s("code",[t._v("Buffer")])]),t._v(".")],1),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data to append'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The \"data to append\" was appended to file!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("If "),s("code",[t._v("options")]),t._v(" is a string, then it specifies the encoding:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data to append'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The "),s("code",[t._v("path")]),t._v(" may be specified as a numeric file descriptor that has been opened\nfor appending (using "),s("code",[t._v("fs.open()")]),t._v(" or "),s("code",[t._v("fs.openSync()")]),t._v("). The file descriptor will\nnot be closed automatically.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data to append'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"fs-appendfilesync-path-data-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-appendfilesync-path-data-options"}},[t._v("#")]),t._v(" fs.appendFileSync(path, data[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL|number} filename or file descriptor")]),t._v(" "),s("li",[s("code",[t._v("data")]),t._v(" {string|Buffer}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|string}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")])]),t._v(" "),s("li",[s("code",[t._v("flag")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'a'")]),t._v(".")])])])]),t._v(" "),s("p",[t._v("Synchronously append data to a file, creating the file if it does not yet\nexist. "),s("code",[t._v("data")]),t._v(" can be a string or a "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffer"}},[s("code",[t._v("Buffer")])]),t._v(".")],1),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data to append'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The \"data to append\" was appended to file!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Handle the error */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("If "),s("code",[t._v("options")]),t._v(" is a string, then it specifies the encoding:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data to append'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The "),s("code",[t._v("path")]),t._v(" may be specified as a numeric file descriptor that has been opened\nfor appending (using "),s("code",[t._v("fs.open()")]),t._v(" or "),s("code",[t._v("fs.openSync()")]),t._v("). The file descriptor will\nnot be closed automatically.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("openSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data to append'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Handle the error */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("closeSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"fs-chmod-path-mode-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-chmod-path-mode-callback"}},[t._v("#")]),t._v(" fs.chmod(path, mode, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronously changes the permissions of a file. No arguments other than a\npossible exception are given to the completion callback.")]),t._v(" "),s("p",[t._v("See also: chmod(2).")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my_file.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0o775")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The permissions for file \"my_file.txt\" have been changed!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"file-modes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-modes"}},[t._v("#")]),t._v(" File modes")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("mode")]),t._v(" argument used in both the "),s("code",[t._v("fs.chmod()")]),t._v(" and "),s("code",[t._v("fs.chmodSync()")]),t._v("\nmethods is a numeric bitmask created using a logical OR of the following\nconstants:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Constant")]),t._v(" "),s("th",[t._v("Octal")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("fs.constants.S_IRUSR")])]),t._v(" "),s("td",[s("code",[t._v("0o400")])]),t._v(" "),s("td",[t._v("read by owner")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("fs.constants.S_IWUSR")])]),t._v(" "),s("td",[s("code",[t._v("0o200")])]),t._v(" "),s("td",[t._v("write by owner")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("fs.constants.S_IXUSR")])]),t._v(" "),s("td",[s("code",[t._v("0o100")])]),t._v(" "),s("td",[t._v("execute/search by owner")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("fs.constants.S_IRGRP")])]),t._v(" "),s("td",[s("code",[t._v("0o40")])]),t._v(" "),s("td",[t._v("read by group")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("fs.constants.S_IWGRP")])]),t._v(" "),s("td",[s("code",[t._v("0o20")])]),t._v(" "),s("td",[t._v("write by group")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("fs.constants.S_IXGRP")])]),t._v(" "),s("td",[s("code",[t._v("0o10")])]),t._v(" "),s("td",[t._v("execute/search by group")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("fs.constants.S_IROTH")])]),t._v(" "),s("td",[s("code",[t._v("0o4")])]),t._v(" "),s("td",[t._v("read by others")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("fs.constants.S_IWOTH")])]),t._v(" "),s("td",[s("code",[t._v("0o2")])]),t._v(" "),s("td",[t._v("write by others")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("fs.constants.S_IXOTH")])]),t._v(" "),s("td",[s("code",[t._v("0o1")])]),t._v(" "),s("td",[t._v("execute/search by others")])])])]),t._v(" "),s("p",[t._v("An easier method of constructing the "),s("code",[t._v("mode")]),t._v(" is to use a sequence of three\noctal digits (e.g. "),s("code",[t._v("765")]),t._v("). The left-most digit ("),s("code",[t._v("7")]),t._v(" in the example), specifies\nthe permissions for the file owner. The middle digit ("),s("code",[t._v("6")]),t._v(" in the example),\nspecifies permissions for the group. The right-most digit ("),s("code",[t._v("5")]),t._v(" in the example),\nspecifies the permissions for others.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Number")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("7")])]),t._v(" "),s("td",[t._v("read, write, and execute")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("6")])]),t._v(" "),s("td",[t._v("read and write")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("5")])]),t._v(" "),s("td",[t._v("read and execute")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("4")])]),t._v(" "),s("td",[t._v("read only")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("3")])]),t._v(" "),s("td",[t._v("write and execute")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("2")])]),t._v(" "),s("td",[t._v("write only")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("1")])]),t._v(" "),s("td",[t._v("execute only")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("0")])]),t._v(" "),s("td",[t._v("no permission")])])])]),t._v(" "),s("p",[t._v("For example, the octal value "),s("code",[t._v("0o765")]),t._v(" means:")]),t._v(" "),s("ul",[s("li",[t._v("The owner may read, write and execute the file.")]),t._v(" "),s("li",[t._v("The group may read and write the file.")]),t._v(" "),s("li",[t._v("Others may read and execute the file.")])]),t._v(" "),s("p",[t._v("When using raw numbers where file modes are expected, any value larger than\n"),s("code",[t._v("0o777")]),t._v(" may result in platform-specific behaviors that are not supported to work\nconsistently. Therefore constants like "),s("code",[t._v("S_ISVTX")]),t._v(", "),s("code",[t._v("S_ISGID")]),t._v(" or "),s("code",[t._v("S_ISUID")]),t._v(" are not\nexposed in "),s("code",[t._v("fs.constants")]),t._v(".")]),t._v(" "),s("p",[t._v("Caveats: on Windows only the write permission can be changed, and the\ndistinction among the permissions of group, owner or others is not\nimplemented.")]),t._v(" "),s("h2",{attrs:{id:"fs-chmodsync-path-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-chmodsync-path-mode"}},[t._v("#")]),t._v(" fs.chmodSync(path, mode)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer}")])]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_chmod_path_mode_callback"}},[s("code",[t._v("fs.chmod()")])]),t._v(".")]),t._v(" "),s("p",[t._v("See also: chmod(2).")]),t._v(" "),s("h2",{attrs:{id:"fs-chown-path-uid-gid-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-chown-path-uid-gid-callback"}},[t._v("#")]),t._v(" fs.chown(path, uid, gid, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("uid")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("gid")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronously changes owner and group of a file. No arguments other than a\npossible exception are given to the completion callback.")]),t._v(" "),s("p",[t._v("See also: chown(2).")]),t._v(" "),s("h2",{attrs:{id:"fs-chownsync-path-uid-gid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-chownsync-path-uid-gid"}},[t._v("#")]),t._v(" fs.chownSync(path, uid, gid)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("uid")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("gid")]),t._v(" {integer}")])]),t._v(" "),s("p",[t._v("Synchronously changes owner and group of a file. Returns "),s("code",[t._v("undefined")]),t._v(".\nThis is the synchronous version of "),s("a",{attrs:{href:"#fs_fs_chown_path_uid_gid_callback"}},[s("code",[t._v("fs.chown()")])]),t._v(".")]),t._v(" "),s("p",[t._v("See also: chown(2).")]),t._v(" "),s("h2",{attrs:{id:"fs-close-fd-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-close-fd-callback"}},[t._v("#")]),t._v(" fs.close(fd, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronous close(2). No arguments other than a possible exception are given\nto the completion callback.")]),t._v(" "),s("h2",{attrs:{id:"fs-closesync-fd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-closesync-fd"}},[t._v("#")]),t._v(" fs.closeSync(fd)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")])]),t._v(" "),s("p",[t._v("Synchronous close(2). Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-constants"}},[t._v("#")]),t._v(" fs.constants")]),t._v(" "),s("ul",[s("li",[t._v("{Object}")])]),t._v(" "),s("p",[t._v("Returns an object containing commonly used constants for file system\noperations. The specific constants currently defined are described in\n"),s("a",{attrs:{href:"#fs_fs_constants_1"}},[t._v("FS Constants")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-copyfile-src-dest-flags-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-copyfile-src-dest-flags-callback"}},[t._v("#")]),t._v(" fs.copyFile(src, dest[, flags], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("src")]),t._v(" {string|Buffer|URL} source filename to copy")]),t._v(" "),s("li",[s("code",[t._v("dest")]),t._v(" {string|Buffer|URL} destination filename of the copy operation")]),t._v(" "),s("li",[s("code",[t._v("flags")]),t._v(" {number} modifiers for copy operation. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}")])]),t._v(" "),s("p",[t._v("Asynchronously copies "),s("code",[t._v("src")]),t._v(" to "),s("code",[t._v("dest")]),t._v(". By default, "),s("code",[t._v("dest")]),t._v(" is overwritten if it\nalready exists. No arguments other than a possible exception are given to the\ncallback function. Node.js makes no guarantees about the atomicity of the copy\noperation. If an error occurs after the destination file has been opened for\nwriting, Node.js will attempt to remove the destination.")]),t._v(" "),s("p",[s("code",[t._v("flags")]),t._v(" is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n"),s("code",[t._v("fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE")]),t._v(").")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fs.constants.COPYFILE_EXCL")]),t._v(": The copy operation will fail if "),s("code",[t._v("dest")]),t._v(" already\nexists.")]),t._v(" "),s("li",[s("code",[t._v("fs.constants.COPYFILE_FICLONE")]),t._v(": The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used.")]),t._v(" "),s("li",[s("code",[t._v("fs.constants.COPYFILE_FICLONE_FORCE")]),t._v(": The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support copy-on-write,\nthen the operation will fail.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// destination.txt will be created or overwritten by default.")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'destination.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source.txt was copied to destination.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("If the third argument is a number, then it specifies "),s("code",[t._v("flags")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COPYFILE_EXCL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'destination.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COPYFILE_EXCL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"fs-copyfilesync-src-dest-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-copyfilesync-src-dest-flags"}},[t._v("#")]),t._v(" fs.copyFileSync(src, dest[, flags])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("src")]),t._v(" {string|Buffer|URL} source filename to copy")]),t._v(" "),s("li",[s("code",[t._v("dest")]),t._v(" {string|Buffer|URL} destination filename of the copy operation")]),t._v(" "),s("li",[s("code",[t._v("flags")]),t._v(" {number} modifiers for copy operation. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0")]),t._v(".")])]),t._v(" "),s("p",[t._v("Synchronously copies "),s("code",[t._v("src")]),t._v(" to "),s("code",[t._v("dest")]),t._v(". By default, "),s("code",[t._v("dest")]),t._v(" is overwritten if it\nalready exists. Returns "),s("code",[t._v("undefined")]),t._v(". Node.js makes no guarantees about the\natomicity of the copy operation. If an error occurs after the destination file\nhas been opened for writing, Node.js will attempt to remove the destination.")]),t._v(" "),s("p",[s("code",[t._v("flags")]),t._v(" is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n"),s("code",[t._v("fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE")]),t._v(").")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fs.constants.COPYFILE_EXCL")]),t._v(": The copy operation will fail if "),s("code",[t._v("dest")]),t._v(" already\nexists.")]),t._v(" "),s("li",[s("code",[t._v("fs.constants.COPYFILE_FICLONE")]),t._v(": The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used.")]),t._v(" "),s("li",[s("code",[t._v("fs.constants.COPYFILE_FICLONE_FORCE")]),t._v(": The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support copy-on-write,\nthen the operation will fail.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// destination.txt will be created or overwritten by default.")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'destination.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source.txt was copied to destination.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("If the third argument is a number, then it specifies "),s("code",[t._v("flags")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COPYFILE_EXCL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'destination.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COPYFILE_EXCL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"fs-createreadstream-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-createreadstream-path-options"}},[t._v("#")]),t._v(" fs.createReadStream(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("flags")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'r'")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("fd")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")])]),t._v(" "),s("li",[s("code",[t._v("autoClose")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("true")])]),t._v(" "),s("li",[s("code",[t._v("emitClose")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")])]),t._v(" "),s("li",[s("code",[t._v("start")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("end")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("Infinity")])]),t._v(" "),s("li",[s("code",[t._v("highWaterMark")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("64 * 1024")])])])]),t._v(" "),s("li",[t._v("Returns: {fs.ReadStream}")])]),t._v(" "),s("p",[t._v("Unlike the 16 kb default "),s("code",[t._v("highWaterMark")]),t._v(" for a readable stream, the stream\nreturned by this method has a default "),s("code",[t._v("highWaterMark")]),t._v(" of 64 kb.")]),t._v(" "),s("p",[s("code",[t._v("options")]),t._v(" can include "),s("code",[t._v("start")]),t._v(" and "),s("code",[t._v("end")]),t._v(" values to read a range of bytes from\nthe file instead of the entire file. Both "),s("code",[t._v("start")]),t._v(" and "),s("code",[t._v("end")]),t._v(" are inclusive and\nstart counting at 0, allowed values are in the\n[0, "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Number.MAX_SAFE_INTEGER")]),s("OutboundLink")],1),t._v("] range. If "),s("code",[t._v("fd")]),t._v(" is specified and "),s("code",[t._v("start")]),t._v(" is\nomitted or "),s("code",[t._v("undefined")]),t._v(", "),s("code",[t._v("fs.createReadStream()")]),t._v(" reads sequentially from the\ncurrent file position. The "),s("code",[t._v("encoding")]),t._v(" can be any one of those accepted by\n"),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffer"}},[s("code",[t._v("Buffer")])]),t._v(".")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("fd")]),t._v(" is specified, "),s("code",[t._v("ReadStream")]),t._v(" will ignore the "),s("code",[t._v("path")]),t._v(" argument and will use\nthe specified file descriptor. This means that no "),s("code",[t._v("'open'")]),t._v(" event will be\nemitted. "),s("code",[t._v("fd")]),t._v(" should be blocking; non-blocking "),s("code",[t._v("fd")]),t._v("s should be passed to\n"),s("router-link",{attrs:{to:"/node/net.html#net_class_net_socket"}},[s("code",[t._v("net.Socket")])]),t._v(".")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("fd")]),t._v(" points to a character device that only supports blocking reads\n(such as keyboard or sound card), read operations do not finish until data is\navailable. This can prevent the process from exiting and the stream from\nclosing naturally.")]),t._v(" "),s("p",[t._v("By default, the stream will not emit a "),s("code",[t._v("'close'")]),t._v(" event after it has been\ndestroyed. This is the opposite of the default for other "),s("code",[t._v("Readable")]),t._v(" streams.\nSet the "),s("code",[t._v("emitClose")]),t._v(" option to "),s("code",[t._v("true")]),t._v(" to change this behavior.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create a stream from some character device.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/dev/input/event0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This may not close the stream.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Artificially marking end-of-stream, as if the underlying resource had")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// indicated end-of-file by itself, allows the stream to close.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This does not cancel pending read operations, and if there is such an")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// operation, the process may still not be able to exit successfully")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// until it finishes.")]),t._v("\n  stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  stream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("If "),s("code",[t._v("autoClose")]),t._v(" is false, then the file descriptor won't be closed, even if\nthere's an error. It is the application's responsibility to close it and make\nsure there's no file descriptor leak. If "),s("code",[t._v("autoClose")]),t._v(" is set to true (default\nbehavior), on "),s("code",[t._v("'error'")]),t._v(" or "),s("code",[t._v("'end'")]),t._v(" the file descriptor will be closed\nautomatically.")]),t._v(" "),s("p",[s("code",[t._v("mode")]),t._v(" sets the file mode (permission and sticky bits), but only if the\nfile was created.")]),t._v(" "),s("p",[t._v("An example to read the last 10 bytes of a file which is 100 bytes long:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sample.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("If "),s("code",[t._v("options")]),t._v(" is a string, then it specifies the encoding.")]),t._v(" "),s("h2",{attrs:{id:"fs-createwritestream-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-createwritestream-path-options"}},[t._v("#")]),t._v(" fs.createWriteStream(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("flags")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'w'")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("fd")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")])]),t._v(" "),s("li",[s("code",[t._v("autoClose")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("true")])]),t._v(" "),s("li",[s("code",[t._v("emitClose")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")])]),t._v(" "),s("li",[s("code",[t._v("start")]),t._v(" {integer}")])])]),t._v(" "),s("li",[t._v("Returns: {fs.WriteStream}")])]),t._v(" "),s("p",[s("code",[t._v("options")]),t._v(" may also include a "),s("code",[t._v("start")]),t._v(" option to allow writing data at\nsome position past the beginning of the file, allowed values are in the\n[0, "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Number.MAX_SAFE_INTEGER")]),s("OutboundLink")],1),t._v("] range. Modifying a file rather\nthan replacing it may require a "),s("code",[t._v("flags")]),t._v(" mode of "),s("code",[t._v("r+")]),t._v(" rather than the\ndefault mode "),s("code",[t._v("w")]),t._v(". The "),s("code",[t._v("encoding")]),t._v(" can be any one of those accepted by\n"),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffer"}},[s("code",[t._v("Buffer")])]),t._v(".")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("autoClose")]),t._v(" is set to true (default behavior) on "),s("code",[t._v("'error'")]),t._v(" or "),s("code",[t._v("'finish'")]),t._v("\nthe file descriptor will be closed automatically. If "),s("code",[t._v("autoClose")]),t._v(" is false,\nthen the file descriptor won't be closed, even if there's an error.\nIt is the application's responsibility to close it and make sure there's no\nfile descriptor leak.")]),t._v(" "),s("p",[t._v("By default, the stream will not emit a "),s("code",[t._v("'close'")]),t._v(" event after it has been\ndestroyed. This is the opposite of the default for other "),s("code",[t._v("Writable")]),t._v(" streams.\nSet the "),s("code",[t._v("emitClose")]),t._v(" option to "),s("code",[t._v("true")]),t._v(" to change this behavior.")]),t._v(" "),s("p",[t._v("Like "),s("a",{attrs:{href:"#fs_class_fs_readstream"}},[s("code",[t._v("ReadStream")])]),t._v(", if "),s("code",[t._v("fd")]),t._v(" is specified, "),s("a",{attrs:{href:"#fs_class_fs_writestream"}},[s("code",[t._v("WriteStream")])]),t._v(" will ignore the\n"),s("code",[t._v("path")]),t._v(" argument and will use the specified file descriptor. This means that no\n"),s("code",[t._v("'open'")]),t._v(" event will be emitted. "),s("code",[t._v("fd")]),t._v(" should be blocking; non-blocking "),s("code",[t._v("fd")]),t._v("s\nshould be passed to "),s("router-link",{attrs:{to:"/node/net.html#net_class_net_socket"}},[s("code",[t._v("net.Socket")])]),t._v(".")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("options")]),t._v(" is a string, then it specifies the encoding.")]),t._v(" "),s("h2",{attrs:{id:"fs-exists-path-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-exists-path-callback"}},[t._v("#")]),t._v(" fs.exists(path, callback)")]),t._v(" "),s("blockquote",[s("p",[t._v("Stability: 0 - Deprecated: Use "),s("a",{attrs:{href:"#fs_fs_stat_path_options_callback"}},[s("code",[t._v("fs.stat()")])]),t._v(" or "),s("a",{attrs:{href:"#fs_fs_access_path_mode_callback"}},[s("code",[t._v("fs.access()")])]),t._v(" instead.")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("exists")]),t._v(" {boolean}")])])])]),t._v(" "),s("p",[t._v("Test whether or not the given path exists by checking with the file system.\nThen call the "),s("code",[t._v("callback")]),t._v(" argument with either true or false:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exists")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/etc/passwd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("exists")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exists "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'it\\'s there'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'no passwd!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("The parameters for this callback are not consistent with other Node.js\ncallbacks.")]),t._v(" Normally, the first parameter to a Node.js callback is an "),s("code",[t._v("err")]),t._v("\nparameter, optionally followed by other parameters. The "),s("code",[t._v("fs.exists()")]),t._v(" callback\nhas only one boolean parameter. This is one reason "),s("code",[t._v("fs.access()")]),t._v(" is recommended\ninstead of "),s("code",[t._v("fs.exists()")]),t._v(".")]),t._v(" "),s("p",[t._v("Using "),s("code",[t._v("fs.exists()")]),t._v(" to check for the existence of a file before calling\n"),s("code",[t._v("fs.open()")]),t._v(", "),s("code",[t._v("fs.readFile()")]),t._v(" or "),s("code",[t._v("fs.writeFile()")]),t._v(" is not recommended. Doing\nso introduces a race condition, since other processes may change the file's\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file does not exist.")]),t._v(" "),s("p",[s("strong",[t._v("write (NOT RECOMMENDED)")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exists")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("exists")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exists"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile already exists'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeMyData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("write (RECOMMENDED)")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'EEXIST'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile already exists'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeMyData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("read (NOT RECOMMENDED)")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exists")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("exists")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exists"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readMyData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile does not exist'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("read (RECOMMENDED)")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ENOENT'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myfile does not exist'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readMyData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v('The "not recommended" examples above check for existence and then use the\nfile; the "recommended" examples are better because they use the file directly\nand handle the error, if any.')]),t._v(" "),s("p",[t._v("In general, check for the existence of a file only if the file wonâ€™t be\nused directly, for example when its existence is a signal from another\nprocess.")]),t._v(" "),s("h2",{attrs:{id:"fs-existssync-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-existssync-path"}},[t._v("#")]),t._v(" fs.existsSync(path)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("true")]),t._v(" if the path exists, "),s("code",[t._v("false")]),t._v(" otherwise.")]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("router-link",{attrs:{to:"/node/fs.html#fs_fs_exists_path_callback"}},[s("code",[t._v("fs.exists()")])]),t._v(".")],1),t._v(" "),s("p",[s("code",[t._v("fs.exists()")]),t._v(" is deprecated, but "),s("code",[t._v("fs.existsSync()")]),t._v(" is not. The "),s("code",[t._v("callback")]),t._v("\nparameter to "),s("code",[t._v("fs.exists()")]),t._v(" accepts parameters that are inconsistent with other\nNode.js callbacks. "),s("code",[t._v("fs.existsSync()")]),t._v(" does not use a callback.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("existsSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/etc/passwd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The file exists.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"fs-fchmod-fd-mode-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-fchmod-fd-mode-callback"}},[t._v("#")]),t._v(" fs.fchmod(fd, mode, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronous fchmod(2). No arguments other than a possible exception\nare given to the completion callback.")]),t._v(" "),s("h2",{attrs:{id:"fs-fchmodsync-fd-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-fchmodsync-fd-mode"}},[t._v("#")]),t._v(" fs.fchmodSync(fd, mode)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer}")])]),t._v(" "),s("p",[t._v("Synchronous fchmod(2). Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-fchown-fd-uid-gid-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-fchown-fd-uid-gid-callback"}},[t._v("#")]),t._v(" fs.fchown(fd, uid, gid, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("uid")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("gid")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronous fchown(2). No arguments other than a possible exception are given\nto the completion callback.")]),t._v(" "),s("h2",{attrs:{id:"fs-fchownsync-fd-uid-gid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-fchownsync-fd-uid-gid"}},[t._v("#")]),t._v(" fs.fchownSync(fd, uid, gid)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("uid")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("gid")]),t._v(" {integer}")])]),t._v(" "),s("p",[t._v("Synchronous fchown(2). Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-fdatasync-fd-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-fdatasync-fd-callback"}},[t._v("#")]),t._v(" fs.fdatasync(fd, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronous fdatasync(2). No arguments other than a possible exception are\ngiven to the completion callback.")]),t._v(" "),s("h2",{attrs:{id:"fs-fdatasyncsync-fd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-fdatasyncsync-fd"}},[t._v("#")]),t._v(" fs.fdatasyncSync(fd)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")])]),t._v(" "),s("p",[t._v("Synchronous fdatasync(2). Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-fstat-fd-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-fstat-fd-options-callback"}},[t._v("#")]),t._v(" fs.fstat(fd[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("bigint")]),t._v(" {boolean} Whether the numeric values in the returned\n"),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object should be "),s("code",[t._v("bigint")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("stats")]),t._v(" {fs.Stats}")])])])]),t._v(" "),s("p",[t._v("Asynchronous fstat(2). The callback gets two arguments "),s("code",[t._v("(err, stats)")]),t._v(" where\n"),s("code",[t._v("stats")]),t._v(" is an "),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object. "),s("code",[t._v("fstat()")]),t._v(" is identical to "),s("router-link",{attrs:{to:"/node/fs.html#fs_fs_stat_path_options_callback"}},[s("code",[t._v("stat()")])]),t._v(",\nexcept that the file to be stat-ed is specified by the file descriptor "),s("code",[t._v("fd")]),t._v(".")],1),t._v(" "),s("h2",{attrs:{id:"fs-fstatsync-fd-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-fstatsync-fd-options"}},[t._v("#")]),t._v(" fs.fstatSync(fd[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("bigint")]),t._v(" {boolean} Whether the numeric values in the returned\n"),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object should be "),s("code",[t._v("bigint")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {fs.Stats}")])]),t._v(" "),s("p",[t._v("Synchronous fstat(2).")]),t._v(" "),s("h2",{attrs:{id:"fs-fsync-fd-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-fsync-fd-callback"}},[t._v("#")]),t._v(" fs.fsync(fd, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronous fsync(2). No arguments other than a possible exception are given\nto the completion callback.")]),t._v(" "),s("h2",{attrs:{id:"fs-fsyncsync-fd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-fsyncsync-fd"}},[t._v("#")]),t._v(" fs.fsyncSync(fd)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")])]),t._v(" "),s("p",[t._v("Synchronous fsync(2). Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-ftruncate-fd-len-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-ftruncate-fd-len-callback"}},[t._v("#")]),t._v(" fs.ftruncate(fd[, len], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("len")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0")])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronous ftruncate(2). No arguments other than a possible exception are\ngiven to the completion callback.")]),t._v(" "),s("p",[t._v("If the file referred to by the file descriptor was larger than "),s("code",[t._v("len")]),t._v(" bytes, only\nthe first "),s("code",[t._v("len")]),t._v(" bytes will be retained in the file.")]),t._v(" "),s("p",[t._v("For example, the following program retains only the first four bytes of the\nfile:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: Node.js")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get the file descriptor of the file to be truncated")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("openSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r+'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Truncate the file to first four bytes")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ftruncate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  assert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ifError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: Node")]),t._v("\n")])])]),s("p",[t._v("If the file previously was shorter than "),s("code",[t._v("len")]),t._v(" bytes, it is extended, and the\nextended part is filled with null bytes ("),s("code",[t._v("'\\0'")]),t._v("):")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: Node.js")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get the file descriptor of the file to be truncated")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("openSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r+'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Truncate the file to 10 bytes, whereas the actual size is 7 bytes")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ftruncate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  assert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ifError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: <Buffer 4e 6f 64 65 2e 6a 73 00 00 00>")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ('Node.js\\0\\0\\0' in UTF8)")]),t._v("\n")])])]),s("p",[t._v("The last three bytes are null bytes ("),s("code",[t._v("'\\0'")]),t._v("), to compensate the over-truncation.")]),t._v(" "),s("h2",{attrs:{id:"fs-ftruncatesync-fd-len"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-ftruncatesync-fd-len"}},[t._v("#")]),t._v(" fs.ftruncateSync(fd[, len])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("len")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0")])])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_ftruncate_fd_len_callback"}},[s("code",[t._v("fs.ftruncate()")])]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-futimes-fd-atime-mtime-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-futimes-fd-atime-mtime-callback"}},[t._v("#")]),t._v(" fs.futimes(fd, atime, mtime, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("atime")]),t._v(" {number|string|Date}")]),t._v(" "),s("li",[s("code",[t._v("mtime")]),t._v(" {number|string|Date}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Change the file system timestamps of the object referenced by the supplied file\ndescriptor. See "),s("a",{attrs:{href:"#fs_fs_utimes_path_atime_mtime_callback"}},[s("code",[t._v("fs.utimes()")])]),t._v(".")]),t._v(" "),s("p",[t._v("This function does not work on AIX versions before 7.1, it will return the\nerror "),s("code",[t._v("UV_ENOSYS")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-futimessync-fd-atime-mtime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-futimessync-fd-atime-mtime"}},[t._v("#")]),t._v(" fs.futimesSync(fd, atime, mtime)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("atime")]),t._v(" {number|string|Date}")]),t._v(" "),s("li",[s("code",[t._v("mtime")]),t._v(" {number|string|Date}")])]),t._v(" "),s("p",[t._v("Synchronous version of "),s("a",{attrs:{href:"#fs_fs_futimes_fd_atime_mtime_callback"}},[s("code",[t._v("fs.futimes()")])]),t._v(". Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-lchmod-path-mode-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-lchmod-path-mode-callback"}},[t._v("#")]),t._v(" fs.lchmod(path, mode, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronous lchmod(2). No arguments other than a possible exception\nare given to the completion callback.")]),t._v(" "),s("p",[t._v("Only available on macOS.")]),t._v(" "),s("h2",{attrs:{id:"fs-lchmodsync-path-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-lchmodsync-path-mode"}},[t._v("#")]),t._v(" fs.lchmodSync(path, mode)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer}")])]),t._v(" "),s("p",[t._v("Synchronous lchmod(2). Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-lchown-path-uid-gid-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-lchown-path-uid-gid-callback"}},[t._v("#")]),t._v(" fs.lchown(path, uid, gid, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("uid")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("gid")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronous lchown(2). No arguments other than a possible exception are given\nto the completion callback.")]),t._v(" "),s("h2",{attrs:{id:"fs-lchownsync-path-uid-gid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-lchownsync-path-uid-gid"}},[t._v("#")]),t._v(" fs.lchownSync(path, uid, gid)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("uid")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("gid")]),t._v(" {integer}")])]),t._v(" "),s("p",[t._v("Synchronous lchown(2). Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-link-existingpath-newpath-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-link-existingpath-newpath-callback"}},[t._v("#")]),t._v(" fs.link(existingPath, newPath, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("existingPath")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("newPath")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronous link(2). No arguments other than a possible exception are given to\nthe completion callback.")]),t._v(" "),s("h2",{attrs:{id:"fs-linksync-existingpath-newpath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-linksync-existingpath-newpath"}},[t._v("#")]),t._v(" fs.linkSync(existingPath, newPath)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("existingPath")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("newPath")]),t._v(" {string|Buffer|URL}")])]),t._v(" "),s("p",[t._v("Synchronous link(2). Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-lstat-path-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-lstat-path-options-callback"}},[t._v("#")]),t._v(" fs.lstat(path[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("bigint")]),t._v(" {boolean} Whether the numeric values in the returned\n"),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object should be "),s("code",[t._v("bigint")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("stats")]),t._v(" {fs.Stats}")])])])]),t._v(" "),s("p",[t._v("Asynchronous lstat(2). The callback gets two arguments "),s("code",[t._v("(err, stats)")]),t._v(" where\n"),s("code",[t._v("stats")]),t._v(" is a "),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object. "),s("code",[t._v("lstat()")]),t._v(" is identical to "),s("code",[t._v("stat()")]),t._v(",\nexcept that if "),s("code",[t._v("path")]),t._v(" is a symbolic link, then the link itself is stat-ed,\nnot the file that it refers to.")]),t._v(" "),s("h2",{attrs:{id:"fs-lstatsync-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-lstatsync-path-options"}},[t._v("#")]),t._v(" fs.lstatSync(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("bigint")]),t._v(" {boolean} Whether the numeric values in the returned\n"),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object should be "),s("code",[t._v("bigint")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {fs.Stats}")])]),t._v(" "),s("p",[t._v("Synchronous lstat(2).")]),t._v(" "),s("h2",{attrs:{id:"fs-mkdir-path-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-mkdir-path-options-callback"}},[t._v("#")]),t._v(" fs.mkdir(path[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|integer}\n"),s("ul",[s("li",[s("code",[t._v("recursive")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} Not supported on Windows. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o777")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronously creates a directory. No arguments other than a possible exception\nare given to the completion callback.")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be an integer specifying mode (permission\nand sticky bits), or an object with a "),s("code",[t._v("mode")]),t._v(" property and a "),s("code",[t._v("recursive")]),t._v("\nproperty indicating whether parent folders should be created. Calling\n"),s("code",[t._v("fs.mkdir()")]),t._v(" when "),s("code",[t._v("path")]),t._v(" is a directory that exists results in an error only\nwhen "),s("code",[t._v("recursive")]),t._v(" is false.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Creates /tmp/a/apple, regardless of whether `/tmp` and /tmp/a exist.")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/a/apple'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" recursive"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("On Windows, using "),s("code",[t._v("fs.mkdir()")]),t._v(" on the root directory even with recursion will\nresult in an error:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" recursive"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => [Error: EPERM: operation not permitted, mkdir 'C:\\']")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("See also: mkdir(2).")]),t._v(" "),s("h2",{attrs:{id:"fs-mkdirsync-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-mkdirsync-path-options"}},[t._v("#")]),t._v(" fs.mkdirSync(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|integer}\n"),s("ul",[s("li",[s("code",[t._v("recursive")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} Not supported on Windows. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o777")]),t._v(".")])])])]),t._v(" "),s("p",[t._v("Synchronously creates a directory. Returns "),s("code",[t._v("undefined")]),t._v(".\nThis is the synchronous version of "),s("a",{attrs:{href:"#fs_fs_mkdir_path_options_callback"}},[s("code",[t._v("fs.mkdir()")])]),t._v(".")]),t._v(" "),s("p",[t._v("See also: mkdir(2).")]),t._v(" "),s("h2",{attrs:{id:"fs-mkdtemp-prefix-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-mkdtemp-prefix-options-callback"}},[t._v("#")]),t._v(" fs.mkdtemp(prefix[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("prefix")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("folder")]),t._v(" {string}")])])])]),t._v(" "),s("p",[t._v("Creates a unique temporary directory.")]),t._v(" "),s("p",[t._v("Generates six random characters to be appended behind a required\n"),s("code",[t._v("prefix")]),t._v(" to create a unique temporary directory. Due to platform\ninconsistencies, avoid trailing "),s("code",[t._v("X")]),t._v(" characters in "),s("code",[t._v("prefix")]),t._v(". Some platforms,\nnotably the BSDs, can return more than six random characters, and replace\ntrailing "),s("code",[t._v("X")]),t._v(" characters in "),s("code",[t._v("prefix")]),t._v(" with random characters.")]),t._v(" "),s("p",[t._v("The created folder path is passed as a string to the callback's second\nparameter.")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdtemp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tmpdir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo-'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" folder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("folder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: /tmp/foo-itXde2 or C:\\Users\\...\\AppData\\Local\\Temp\\foo-itXde2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The "),s("code",[t._v("fs.mkdtemp()")]),t._v(" method will append the six randomly selected characters\ndirectly to the "),s("code",[t._v("prefix")]),t._v(" string. For instance, given a directory "),s("code",[t._v("/tmp")]),t._v(", if the\nintention is to create a temporary directory "),s("em",[t._v("within")]),t._v(" "),s("code",[t._v("/tmp")]),t._v(", the "),s("code",[t._v("prefix")]),t._v("\nmust end with a trailing platform-specific path separator\n("),s("code",[t._v("require('path').sep")]),t._v(").")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The parent directory for the new temporary directory")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tmpDir "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tmpdir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This method is *INCORRECT*:")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdtemp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmpDir"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" folder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("folder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Will print something similar to `/tmpabc123`.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A new temporary directory is created at the file system root")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rather than *within* the /tmp directory.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This method is *CORRECT*:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" sep "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdtemp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("tmpDir"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("sep"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" folder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("folder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Will print something similar to `/tmp/abc123`.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A new temporary directory is created within")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the /tmp directory.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"fs-mkdtempsync-prefix-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-mkdtempsync-prefix-options"}},[t._v("#")]),t._v(" fs.mkdtempSync(prefix[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("prefix")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])])])]),t._v(" "),s("li",[t._v("Returns: {string}")])]),t._v(" "),s("p",[t._v("Returns the created folder path.")]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_mkdtemp_prefix_options_callback"}},[s("code",[t._v("fs.mkdtemp()")])]),t._v(".")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use.")]),t._v(" "),s("h2",{attrs:{id:"fs-open-path-flags-mode-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-open-path-flags-mode-callback"}},[t._v("#")]),t._v(" fs.open(path[, flags[, mode]], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("flags")]),t._v(" {string|number} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(".\n"),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'r'")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")]),t._v(" (readable and writable)")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("fd")]),t._v(" {integer}")])])])]),t._v(" "),s("p",[t._v("Asynchronous file open. See open(2).")]),t._v(" "),s("p",[s("code",[t._v("mode")]),t._v(" sets the file mode (permission and sticky bits), but only if the file was\ncreated. On Windows, only the write permission can be manipulated; see\n"),s("a",{attrs:{href:"#fs_fs_chmod_path_mode_callback"}},[s("code",[t._v("fs.chmod()")])]),t._v(".")]),t._v(" "),s("p",[t._v("The callback gets two arguments "),s("code",[t._v("(err, fd)")]),t._v(".")]),t._v(" "),s("p",[t._v("Some characters ("),s("code",[t._v('< > : " / \\ | ? *')]),t._v(") are reserved under Windows as documented\nby "),s("a",{attrs:{href:"https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file",target:"_blank",rel:"noopener noreferrer"}},[t._v("Naming Files, Paths, and Namespaces"),s("OutboundLink")],1),t._v(". Under NTFS, if the filename contains\na colon, Node.js will open a file system stream, as described by\n"),s("a",{attrs:{href:"https://docs.microsoft.com/en-us/windows/desktop/FileIO/using-streams",target:"_blank",rel:"noopener noreferrer"}},[t._v("this MSDN page"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("Functions based on "),s("code",[t._v("fs.open()")]),t._v(" exhibit this behavior as well:\n"),s("code",[t._v("fs.writeFile()")]),t._v(", "),s("code",[t._v("fs.readFile()")]),t._v(", etc.")]),t._v(" "),s("h2",{attrs:{id:"fs-opendir-path-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-opendir-path-options-callback"}},[t._v("#")]),t._v(" fs.opendir(path[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("bufferSize")]),t._v(" {number} Number of directory entries that are buffered\ninternally when reading from the directory. Higher values lead to better\nperformance but higher memory usage. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("32")])])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("dir")]),t._v(" {fs.Dir}")])])])]),t._v(" "),s("p",[t._v("Asynchronously open a directory. See opendir(3).")]),t._v(" "),s("p",[t._v("Creates an "),s("a",{attrs:{href:"#fs_class_fs_dir"}},[s("code",[t._v("fs.Dir")])]),t._v(", which contains all further functions for reading from\nand cleaning up the directory.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("encoding")]),t._v(" option sets the encoding for the "),s("code",[t._v("path")]),t._v(" while opening the\ndirectory and subsequent read operations.")]),t._v(" "),s("h2",{attrs:{id:"fs-opendirsync-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-opendirsync-path-options"}},[t._v("#")]),t._v(" fs.opendirSync(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("bufferSize")]),t._v(" {number} Number of directory entries that are buffered\ninternally when reading from the directory. Higher values lead to better\nperformance but higher memory usage. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("32")])])])]),t._v(" "),s("li",[t._v("Returns: {fs.Dir}")])]),t._v(" "),s("p",[t._v("Synchronously open a directory. See opendir(3).")]),t._v(" "),s("p",[t._v("Creates an "),s("a",{attrs:{href:"#fs_class_fs_dir"}},[s("code",[t._v("fs.Dir")])]),t._v(", which contains all further functions for reading from\nand cleaning up the directory.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("encoding")]),t._v(" option sets the encoding for the "),s("code",[t._v("path")]),t._v(" while opening the\ndirectory and subsequent read operations.")]),t._v(" "),s("h2",{attrs:{id:"fs-opensync-path-flags-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-opensync-path-flags-mode"}},[t._v("#")]),t._v(" fs.openSync(path[, flags, mode])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("flags")]),t._v(" {string|number} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'r'")]),t._v(".\nSee "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")])]),t._v(" "),s("li",[t._v("Returns: {number}")])]),t._v(" "),s("p",[t._v("Returns an integer representing the file descriptor.")]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_open_path_flags_mode_callback"}},[s("code",[t._v("fs.open()")])]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-read-fd-buffer-offset-length-position-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-read-fd-buffer-offset-length-position-callback"}},[t._v("#")]),t._v(" fs.read(fd, buffer, offset, length, position, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("offset")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("length")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("position")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("bytesRead")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer}")])])])]),t._v(" "),s("p",[t._v("Read data from the file specified by "),s("code",[t._v("fd")]),t._v(".")]),t._v(" "),s("p",[s("code",[t._v("buffer")]),t._v(" is the buffer that the data will be written to.")]),t._v(" "),s("p",[s("code",[t._v("offset")]),t._v(" is the offset in the buffer to start writing at.")]),t._v(" "),s("p",[s("code",[t._v("length")]),t._v(" is an integer specifying the number of bytes to read.")]),t._v(" "),s("p",[s("code",[t._v("position")]),t._v(" is an argument specifying where to begin reading from in the file.\nIf "),s("code",[t._v("position")]),t._v(" is "),s("code",[t._v("null")]),t._v(", data will be read from the current file position,\nand the file position will be updated.\nIf "),s("code",[t._v("position")]),t._v(" is an integer, the file position will remain unchanged.")]),t._v(" "),s("p",[t._v("The callback is given the three arguments, "),s("code",[t._v("(err, bytesRead, buffer)")]),t._v(".")]),t._v(" "),s("p",[t._v("If this method is invoked as its "),s("router-link",{attrs:{to:"/node/util.html#util_util_promisify_original"}},[s("code",[t._v("util.promisify()")])]),t._v("ed version, it returns\na "),s("code",[t._v("Promise")]),t._v(" for an "),s("code",[t._v("Object")]),t._v(" with "),s("code",[t._v("bytesRead")]),t._v(" and "),s("code",[t._v("buffer")]),t._v(" properties.")],1),t._v(" "),s("h2",{attrs:{id:"fs-readdir-path-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-readdir-path-options-callback"}},[t._v("#")]),t._v(" fs.readdir(path[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("withFileTypes")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")])])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("files")]),t._v(" {string[]|Buffer[]|fs.Dirent[]}")])])])]),t._v(" "),s("p",[t._v("Asynchronous readdir(3). Reads the contents of a directory.\nThe callback gets two arguments "),s("code",[t._v("(err, files)")]),t._v(" where "),s("code",[t._v("files")]),t._v(" is an array of\nthe names of the files in the directory excluding "),s("code",[t._v("'.'")]),t._v(" and "),s("code",[t._v("'..'")]),t._v(".")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use for\nthe filenames passed to the callback. If the "),s("code",[t._v("encoding")]),t._v(" is set to "),s("code",[t._v("'buffer'")]),t._v(",\nthe filenames returned will be passed as "),s("code",[t._v("Buffer")]),t._v(" objects.")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("options.withFileTypes")]),t._v(" is set to "),s("code",[t._v("true")]),t._v(", the "),s("code",[t._v("files")]),t._v(" array will contain\n"),s("a",{attrs:{href:"#fs_class_fs_dirent"}},[s("code",[t._v("fs.Dirent")])]),t._v(" objects.")]),t._v(" "),s("h2",{attrs:{id:"fs-readdirsync-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-readdirsync-path-options"}},[t._v("#")]),t._v(" fs.readdirSync(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("withFileTypes")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")])])])]),t._v(" "),s("li",[t._v("Returns: {string[]|Buffer[]|fs.Dirent[]}")])]),t._v(" "),s("p",[t._v("Synchronous readdir(3).")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use for\nthe filenames returned. If the "),s("code",[t._v("encoding")]),t._v(" is set to "),s("code",[t._v("'buffer'")]),t._v(",\nthe filenames returned will be passed as "),s("code",[t._v("Buffer")]),t._v(" objects.")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("options.withFileTypes")]),t._v(" is set to "),s("code",[t._v("true")]),t._v(", the result will contain\n"),s("a",{attrs:{href:"#fs_class_fs_dirent"}},[s("code",[t._v("fs.Dirent")])]),t._v(" objects.")]),t._v(" "),s("h2",{attrs:{id:"fs-readfile-path-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-readfile-path-options-callback"}},[t._v("#")]),t._v(" fs.readFile(path[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL|integer} filename or file descriptor")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|string}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("flag")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'r'")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("data")]),t._v(" {string|Buffer}")])])])]),t._v(" "),s("p",[t._v("Asynchronously reads the entire contents of a file.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/etc/passwd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The callback is passed two arguments "),s("code",[t._v("(err, data)")]),t._v(", where "),s("code",[t._v("data")]),t._v(" is the\ncontents of the file.")]),t._v(" "),s("p",[t._v("If no encoding is specified, then the raw buffer is returned.")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("options")]),t._v(" is a string, then it specifies the encoding:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/etc/passwd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("When the path is a directory, the behavior of "),s("code",[t._v("fs.readFile()")]),t._v(" and\n"),s("a",{attrs:{href:"#fs_fs_readfilesync_path_options"}},[s("code",[t._v("fs.readFileSync()")])]),t._v(" is platform-specific. On macOS, Linux, and Windows, an\nerror will be returned. On FreeBSD, a representation of the directory's contents\nwill be returned.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// macOS, Linux, and Windows")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<directory>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => [Error: EISDIR: illegal operation on a directory, read <directory>]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  FreeBSD")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<directory>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => null, <data>")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The "),s("code",[t._v("fs.readFile()")]),t._v(" function buffers the entire file. To minimize memory costs,\nwhen possible prefer streaming via "),s("code",[t._v("fs.createReadStream()")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"file-descriptors-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-descriptors-2"}},[t._v("#")]),t._v(" File Descriptors")]),t._v(" "),s("ol",[s("li",[t._v("Any specified file descriptor has to support reading.")]),t._v(" "),s("li",[t._v("If a file descriptor is specified as the "),s("code",[t._v("path")]),t._v(", it will not be closed\nautomatically.")]),t._v(" "),s("li",[t._v("The reading will begin at the current position. For example, if the file\nalready had "),s("code",[t._v("'Hello World")]),t._v("' and six bytes are read with the file descriptor,\nthe call to "),s("code",[t._v("fs.readFile()")]),t._v(" with the same file descriptor, would give\n"),s("code",[t._v("'World'")]),t._v(", rather than "),s("code",[t._v("'Hello World'")]),t._v(".")])]),t._v(" "),s("h2",{attrs:{id:"fs-readfilesync-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-readfilesync-path-options"}},[t._v("#")]),t._v(" fs.readFileSync(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL|integer} filename or file descriptor")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|string}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("flag")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'r'")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {string|Buffer}")])]),t._v(" "),s("p",[t._v("Returns the contents of the "),s("code",[t._v("path")]),t._v(".")]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_readfile_path_options_callback"}},[s("code",[t._v("fs.readFile()")])]),t._v(".")]),t._v(" "),s("p",[t._v("If the "),s("code",[t._v("encoding")]),t._v(" option is specified then this function returns a\nstring. Otherwise it returns a buffer.")]),t._v(" "),s("p",[t._v("Similar to "),s("a",{attrs:{href:"#fs_fs_readfile_path_options_callback"}},[s("code",[t._v("fs.readFile()")])]),t._v(", when the path is a directory, the behavior of\n"),s("code",[t._v("fs.readFileSync()")]),t._v(" is platform-specific.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// macOS, Linux, and Windows")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<directory>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => [Error: EISDIR: illegal operation on a directory, read <directory>]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  FreeBSD")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<directory>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => <data>")]),t._v("\n")])])]),s("h2",{attrs:{id:"fs-readlink-path-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-readlink-path-options-callback"}},[t._v("#")]),t._v(" fs.readlink(path[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("linkString")]),t._v(" {string|Buffer}")])])])]),t._v(" "),s("p",[t._v("Asynchronous readlink(2). The callback gets two arguments "),s("code",[t._v("(err, linkString)")]),t._v(".")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use for\nthe link path passed to the callback. If the "),s("code",[t._v("encoding")]),t._v(" is set to "),s("code",[t._v("'buffer'")]),t._v(",\nthe link path returned will be passed as a "),s("code",[t._v("Buffer")]),t._v(" object.")]),t._v(" "),s("h2",{attrs:{id:"fs-readlinksync-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-readlinksync-path-options"}},[t._v("#")]),t._v(" fs.readlinkSync(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])])])]),t._v(" "),s("li",[t._v("Returns: {string|Buffer}")])]),t._v(" "),s("p",[t._v("Synchronous readlink(2). Returns the symbolic link's string value.")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use for\nthe link path returned. If the "),s("code",[t._v("encoding")]),t._v(" is set to "),s("code",[t._v("'buffer'")]),t._v(",\nthe link path returned will be passed as a "),s("code",[t._v("Buffer")]),t._v(" object.")]),t._v(" "),s("h2",{attrs:{id:"fs-readsync-fd-buffer-offset-length-position"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-readsync-fd-buffer-offset-length-position"}},[t._v("#")]),t._v(" fs.readSync(fd, buffer, offset, length, position)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("offset")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("length")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("position")]),t._v(" {integer}")]),t._v(" "),s("li",[t._v("Returns: {number}")])]),t._v(" "),s("p",[t._v("Returns the number of "),s("code",[t._v("bytesRead")]),t._v(".")]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_read_fd_buffer_offset_length_position_callback"}},[s("code",[t._v("fs.read()")])]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-realpath-path-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-realpath-path-options-callback"}},[t._v("#")]),t._v(" fs.realpath(path[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("resolvedPath")]),t._v(" {string|Buffer}")])])])]),t._v(" "),s("p",[t._v("Asynchronously computes the canonical pathname by resolving "),s("code",[t._v(".")]),t._v(", "),s("code",[t._v("..")]),t._v(" and\nsymbolic links.")]),t._v(" "),s("p",[t._v("A canonical pathname is not necessarily unique. Hard links and bind mounts can\nexpose a file system entity through many pathnames.")]),t._v(" "),s("p",[t._v("This function behaves like realpath(3), with some exceptions:")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("No case conversion is performed on case-insensitive file systems.")])]),t._v(" "),s("li",[s("p",[t._v("The maximum number of symbolic links is platform-independent and generally\n(much) higher than what the native realpath(3) implementation supports.")])])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("callback")]),t._v(" gets two arguments "),s("code",[t._v("(err, resolvedPath)")]),t._v(". May use "),s("code",[t._v("process.cwd")]),t._v("\nto resolve relative paths.")]),t._v(" "),s("p",[t._v("Only paths that can be converted to UTF8 strings are supported.")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use for\nthe path passed to the callback. If the "),s("code",[t._v("encoding")]),t._v(" is set to "),s("code",[t._v("'buffer'")]),t._v(",\nthe path returned will be passed as a "),s("code",[t._v("Buffer")]),t._v(" object.")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("path")]),t._v(" resolves to a socket or a pipe, the function will return a system\ndependent name for that object.")]),t._v(" "),s("h2",{attrs:{id:"fs-realpath-native-path-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-realpath-native-path-options-callback"}},[t._v("#")]),t._v(" fs.realpath.native(path[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("resolvedPath")]),t._v(" {string|Buffer}")])])])]),t._v(" "),s("p",[t._v("Asynchronous realpath(3).")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("callback")]),t._v(" gets two arguments "),s("code",[t._v("(err, resolvedPath)")]),t._v(".")]),t._v(" "),s("p",[t._v("Only paths that can be converted to UTF8 strings are supported.")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use for\nthe path passed to the callback. If the "),s("code",[t._v("encoding")]),t._v(" is set to "),s("code",[t._v("'buffer'")]),t._v(",\nthe path returned will be passed as a "),s("code",[t._v("Buffer")]),t._v(" object.")]),t._v(" "),s("p",[t._v("On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on "),s("code",[t._v("/proc")]),t._v(" in order for this function to work. Glibc does not have\nthis restriction.")]),t._v(" "),s("h2",{attrs:{id:"fs-realpathsync-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-realpathsync-path-options"}},[t._v("#")]),t._v(" fs.realpathSync(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])])])]),t._v(" "),s("li",[t._v("Returns: {string|Buffer}")])]),t._v(" "),s("p",[t._v("Returns the resolved pathname.")]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_realpath_path_options_callback"}},[s("code",[t._v("fs.realpath()")])]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-realpathsync-native-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-realpathsync-native-path-options"}},[t._v("#")]),t._v(" fs.realpathSync.native(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])])])]),t._v(" "),s("li",[t._v("Returns: {string|Buffer}")])]),t._v(" "),s("p",[t._v("Synchronous realpath(3).")]),t._v(" "),s("p",[t._v("Only paths that can be converted to UTF8 strings are supported.")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use for\nthe path returned. If the "),s("code",[t._v("encoding")]),t._v(" is set to "),s("code",[t._v("'buffer'")]),t._v(",\nthe path returned will be passed as a "),s("code",[t._v("Buffer")]),t._v(" object.")]),t._v(" "),s("p",[t._v("On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on "),s("code",[t._v("/proc")]),t._v(" in order for this function to work. Glibc does not have\nthis restriction.")]),t._v(" "),s("h2",{attrs:{id:"fs-rename-oldpath-newpath-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-rename-oldpath-newpath-callback"}},[t._v("#")]),t._v(" fs.rename(oldPath, newPath, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("oldPath")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("newPath")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronously rename file at "),s("code",[t._v("oldPath")]),t._v(" to the pathname provided\nas "),s("code",[t._v("newPath")]),t._v(". In the case that "),s("code",[t._v("newPath")]),t._v(" already exists, it will\nbe overwritten. If there is a directory at "),s("code",[t._v("newPath")]),t._v(", an error will\nbe raised instead. No arguments other than a possible exception are\ngiven to the completion callback.")]),t._v(" "),s("p",[t._v("See also: rename(2).")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'oldFile.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'newFile.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Rename complete!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"fs-renamesync-oldpath-newpath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-renamesync-oldpath-newpath"}},[t._v("#")]),t._v(" fs.renameSync(oldPath, newPath)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("oldPath")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("newPath")]),t._v(" {string|Buffer|URL}")])]),t._v(" "),s("p",[t._v("Synchronous rename(2). Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-rmdir-path-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-rmdir-path-options-callback"}},[t._v("#")]),t._v(" fs.rmdir(path[, options], callback)")]),t._v(" "),s("blockquote",[s("p",[t._v("Stability: 1 - Recursive removal is experimental.")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("emfileWait")]),t._v(" {integer} If an "),s("code",[t._v("EMFILE")]),t._v(" error is encountered, Node.js will\nretry the operation with a linear backoff of 1ms longer on each try until the\ntimeout duration passes this limit. This option is ignored if the "),s("code",[t._v("recursive")]),t._v("\noption is not "),s("code",[t._v("true")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("1000")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("maxBusyTries")]),t._v(" {integer} If an "),s("code",[t._v("EBUSY")]),t._v(", "),s("code",[t._v("ENOTEMPTY")]),t._v(", or "),s("code",[t._v("EPERM")]),t._v(" error is\nencountered, Node.js will retry the operation with a linear backoff wait of\n100ms longer on each try. This option represents the number of retries. This\noption is ignored if the "),s("code",[t._v("recursive")]),t._v(" option is not "),s("code",[t._v("true")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("3")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("recursive")]),t._v(" {boolean} If "),s("code",[t._v("true")]),t._v(", perform a recursive directory removal. In\nrecursive mode, errors are not reported if "),s("code",[t._v("path")]),t._v(" does not exist, and\noperations are retried on failure. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronous rmdir(2). No arguments other than a possible exception are given\nto the completion callback.")]),t._v(" "),s("p",[t._v("Using "),s("code",[t._v("fs.rmdir()")]),t._v(" on a file (not a directory) results in an "),s("code",[t._v("ENOENT")]),t._v(" error on\nWindows and an "),s("code",[t._v("ENOTDIR")]),t._v(" error on POSIX.")]),t._v(" "),s("h2",{attrs:{id:"fs-rmdirsync-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-rmdirsync-path-options"}},[t._v("#")]),t._v(" fs.rmdirSync(path[, options])")]),t._v(" "),s("blockquote",[s("p",[t._v("Stability: 1 - Recursive removal is experimental.")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("recursive")]),t._v(" {boolean} If "),s("code",[t._v("true")]),t._v(", perform a recursive directory removal. In\nrecursive mode, errors are not reported if "),s("code",[t._v("path")]),t._v(" does not exist, and\noperations are retried on failure. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")])])])]),t._v(" "),s("p",[t._v("Synchronous rmdir(2). Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("p",[t._v("Using "),s("code",[t._v("fs.rmdirSync()")]),t._v(" on a file (not a directory) results in an "),s("code",[t._v("ENOENT")]),t._v(" error\non Windows and an "),s("code",[t._v("ENOTDIR")]),t._v(" error on POSIX.")]),t._v(" "),s("h2",{attrs:{id:"fs-stat-path-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-stat-path-options-callback"}},[t._v("#")]),t._v(" fs.stat(path[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("bigint")]),t._v(" {boolean} Whether the numeric values in the returned\n"),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object should be "),s("code",[t._v("bigint")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("stats")]),t._v(" {fs.Stats}")])])])]),t._v(" "),s("p",[t._v("Asynchronous stat(2). The callback gets two arguments "),s("code",[t._v("(err, stats)")]),t._v(" where\n"),s("code",[t._v("stats")]),t._v(" is an "),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object.")]),t._v(" "),s("p",[t._v("In case of an error, the "),s("code",[t._v("err.code")]),t._v(" will be one of "),s("router-link",{attrs:{to:"/node/errors.html#errors_common_system_errors"}},[t._v("Common System Errors")]),t._v(".")],1),t._v(" "),s("p",[t._v("Using "),s("code",[t._v("fs.stat()")]),t._v(" to check for the existence of a file before calling\n"),s("code",[t._v("fs.open()")]),t._v(", "),s("code",[t._v("fs.readFile()")]),t._v(" or "),s("code",[t._v("fs.writeFile()")]),t._v(" is not recommended.\nInstead, user code should open/read/write the file directly and handle the\nerror raised if the file is not available.")]),t._v(" "),s("p",[t._v("To check if a file exists without manipulating it afterwards, "),s("a",{attrs:{href:"#fs_fs_access_path_mode_callback"}},[s("code",[t._v("fs.access()")])]),t._v("\nis recommended.")]),t._v(" "),s("p",[t._v("For example, given the following folder structure:")]),t._v(" "),s("div",{staticClass:"language-fundamental extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("- txtDir\n-- file.txt\n- app.js\n")])])]),s("p",[t._v("The next program will check for the stats of the given paths:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pathsToCheck "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./txtDir'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./txtDir/file.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" pathsToCheck"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pathsToCheck"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stats")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stats"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isDirectory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stats"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("The resulting output will resemble:")]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("true\nStats {\n  dev: 16777220,\n  mode: 16877,\n  nlink: 3,\n  uid: 501,\n  gid: 20,\n  rdev: 0,\n  blksize: 4096,\n  ino: 14214262,\n  size: 96,\n  blocks: 0,\n  atimeMs: 1561174653071.963,\n  mtimeMs: 1561174614583.3518,\n  ctimeMs: 1561174626623.5366,\n  birthtimeMs: 1561174126937.2893,\n  atime: 2019-06-22T03:37:33.072Z,\n  mtime: 2019-06-22T03:36:54.583Z,\n  ctime: 2019-06-22T03:37:06.624Z,\n  birthtime: 2019-06-22T03:28:46.937Z\n}\nfalse\nStats {\n  dev: 16777220,\n  mode: 33188,\n  nlink: 1,\n  uid: 501,\n  gid: 20,\n  rdev: 0,\n  blksize: 4096,\n  ino: 14214074,\n  size: 8,\n  blocks: 8,\n  atimeMs: 1561174616618.8555,\n  mtimeMs: 1561174614584,\n  ctimeMs: 1561174614583.8145,\n  birthtimeMs: 1561174007710.7478,\n  atime: 2019-06-22T03:36:56.619Z,\n  mtime: 2019-06-22T03:36:54.584Z,\n  ctime: 2019-06-22T03:36:54.584Z,\n  birthtime: 2019-06-22T03:26:47.711Z\n}\n")])])]),s("h2",{attrs:{id:"fs-statsync-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-statsync-path-options"}},[t._v("#")]),t._v(" fs.statSync(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("bigint")]),t._v(" {boolean} Whether the numeric values in the returned\n"),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object should be "),s("code",[t._v("bigint")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {fs.Stats}")])]),t._v(" "),s("p",[t._v("Synchronous stat(2).")]),t._v(" "),s("h2",{attrs:{id:"fs-symlink-target-path-type-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-symlink-target-path-type-callback"}},[t._v("#")]),t._v(" fs.symlink(target, path[, type], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("target")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("type")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronous symlink(2) which creates the link called "),s("code",[t._v("path")]),t._v(" pointing to\n"),s("code",[t._v("target")]),t._v(".  No arguments other than a possible exception are given to the\ncompletion callback.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("type")]),t._v(" argument is only available on Windows and ignored on other platforms.\nIt can be set to "),s("code",[t._v("'dir'")]),t._v(", "),s("code",[t._v("'file'")]),t._v(", or "),s("code",[t._v("'junction'")]),t._v(". If the "),s("code",[t._v("type")]),t._v(" argument is\nnot set, Node will autodetect "),s("code",[t._v("target")]),t._v(" type and use "),s("code",[t._v("'file'")]),t._v(" or "),s("code",[t._v("'dir'")]),t._v(". If the\n"),s("code",[t._v("target")]),t._v(" does not exist, "),s("code",[t._v("'file'")]),t._v(" will be used. Windows junction points require\nthe destination path to be absolute.  When using "),s("code",[t._v("'junction'")]),t._v(", the "),s("code",[t._v("target")]),t._v("\nargument will automatically be normalized to absolute path.")]),t._v(" "),s("p",[t._v("Relative targets are relative to the linkâ€™s parent directory.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("symlink")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./mew'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./example/mewtwo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The above example creates a symbolic link "),s("code",[t._v("mewtwo")]),t._v(" in the "),s("code",[t._v("example")]),t._v(" which points\nto "),s("code",[t._v("mew")]),t._v(" in the same directory:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tree example/\nexample/\nâ”œâ”€â”€ mew\nâ””â”€â”€ mewtwo -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ./mew\n")])])]),s("h2",{attrs:{id:"fs-symlinksync-target-path-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-symlinksync-target-path-type"}},[t._v("#")]),t._v(" fs.symlinkSync(target, path[, type])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("target")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("type")]),t._v(" {string}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_symlink_target_path_type_callback"}},[s("code",[t._v("fs.symlink()")])]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-truncate-path-len-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-truncate-path-len-callback"}},[t._v("#")]),t._v(" fs.truncate(path[, len], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("len")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0")])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronous truncate(2). No arguments other than a possible exception are\ngiven to the completion callback. A file descriptor can also be passed as the\nfirst argument. In this case, "),s("code",[t._v("fs.ftruncate()")]),t._v(" is called.")]),t._v(" "),s("p",[t._v("Passing a file descriptor is deprecated and may result in an error being thrown\nin the future.")]),t._v(" "),s("h2",{attrs:{id:"fs-truncatesync-path-len"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-truncatesync-path-len"}},[t._v("#")]),t._v(" fs.truncateSync(path[, len])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("len")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0")])])]),t._v(" "),s("p",[t._v("Synchronous truncate(2). Returns "),s("code",[t._v("undefined")]),t._v(". A file descriptor can also be\npassed as the first argument. In this case, "),s("code",[t._v("fs.ftruncateSync()")]),t._v(" is called.")]),t._v(" "),s("p",[t._v("Passing a file descriptor is deprecated and may result in an error being thrown\nin the future.")]),t._v(" "),s("h2",{attrs:{id:"fs-unlink-path-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-unlink-path-callback"}},[t._v("#")]),t._v(" fs.unlink(path, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Asynchronously removes a file or symbolic link. No arguments other than a\npossible exception are given to the completion callback.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Assuming that 'path/file.txt' is a regular file.")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlink")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path/file.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path/file.txt was deleted'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("fs.unlink()")]),t._v(" will not work on a directory, empty or otherwise. To remove a\ndirectory, use "),s("a",{attrs:{href:"#fs_fs_rmdir_path_options_callback"}},[s("code",[t._v("fs.rmdir()")])]),t._v(".")]),t._v(" "),s("p",[t._v("See also: unlink(2).")]),t._v(" "),s("h2",{attrs:{id:"fs-unlinksync-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-unlinksync-path"}},[t._v("#")]),t._v(" fs.unlinkSync(path)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")])]),t._v(" "),s("p",[t._v("Synchronous unlink(2). Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-unwatchfile-filename-listener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-unwatchfile-filename-listener"}},[t._v("#")]),t._v(" fs.unwatchFile(filename[, listener])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("filename")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("listener")]),t._v(" {Function} Optional, a listener previously attached using\n"),s("code",[t._v("fs.watchFile()")])])]),t._v(" "),s("p",[t._v("Stop watching for changes on "),s("code",[t._v("filename")]),t._v(". If "),s("code",[t._v("listener")]),t._v(" is specified, only that\nparticular listener is removed. Otherwise, "),s("em",[t._v("all")]),t._v(" listeners are removed,\neffectively stopping watching of "),s("code",[t._v("filename")]),t._v(".")]),t._v(" "),s("p",[t._v("Calling "),s("code",[t._v("fs.unwatchFile()")]),t._v(" with a filename that is not being watched is a\nno-op, not an error.")]),t._v(" "),s("p",[t._v("Using "),s("a",{attrs:{href:"#fs_fs_watch_filename_options_listener"}},[s("code",[t._v("fs.watch()")])]),t._v(" is more efficient than "),s("code",[t._v("fs.watchFile()")]),t._v(" and\n"),s("code",[t._v("fs.unwatchFile()")]),t._v(". "),s("code",[t._v("fs.watch()")]),t._v(" should be used instead of "),s("code",[t._v("fs.watchFile()")]),t._v("\nand "),s("code",[t._v("fs.unwatchFile()")]),t._v(" when possible.")]),t._v(" "),s("h2",{attrs:{id:"fs-utimes-path-atime-mtime-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-utimes-path-atime-mtime-callback"}},[t._v("#")]),t._v(" fs.utimes(path, atime, mtime, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("atime")]),t._v(" {number|string|Date}")]),t._v(" "),s("li",[s("code",[t._v("mtime")]),t._v(" {number|string|Date}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("Change the file system timestamps of the object referenced by "),s("code",[t._v("path")]),t._v(".")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("atime")]),t._v(" and "),s("code",[t._v("mtime")]),t._v(" arguments follow these rules:")]),t._v(" "),s("ul",[s("li",[t._v("Values can be either numbers representing Unix epoch time, "),s("code",[t._v("Date")]),t._v("s, or a\nnumeric string like "),s("code",[t._v("'123456789.0'")]),t._v(".")]),t._v(" "),s("li",[t._v("If the value can not be converted to a number, or is "),s("code",[t._v("NaN")]),t._v(", "),s("code",[t._v("Infinity")]),t._v(" or\n"),s("code",[t._v("-Infinity")]),t._v(", an "),s("code",[t._v("Error")]),t._v(" will be thrown.")])]),t._v(" "),s("h2",{attrs:{id:"fs-utimessync-path-atime-mtime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-utimessync-path-atime-mtime"}},[t._v("#")]),t._v(" fs.utimesSync(path, atime, mtime)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("atime")]),t._v(" {number|string|Date}")]),t._v(" "),s("li",[s("code",[t._v("mtime")]),t._v(" {number|string|Date}")])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_utimes_path_atime_mtime_callback"}},[s("code",[t._v("fs.utimes()")])]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-watch-filename-options-listener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-watch-filename-options-listener"}},[t._v("#")]),t._v(" fs.watch(filename[, options][, listener])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("filename")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("persistent")]),t._v(" {boolean} Indicates whether the process should continue to run\nas long as files are being watched. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("true")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("recursive")]),t._v(" {boolean} Indicates whether all subdirectories should be\nwatched, or only the current directory. This applies when a directory is\nspecified, and only on supported platforms (See "),s("a",{attrs:{href:"#fs_caveats"}},[t._v("Caveats")]),t._v("). "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" {string} Specifies the character encoding to be used for the\nfilename passed to the listener. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("listener")]),t._v(" {Function|undefined} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("undefined")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("eventType")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("filename")]),t._v(" {string|Buffer}")])])]),t._v(" "),s("li",[t._v("Returns: {fs.FSWatcher}")])]),t._v(" "),s("p",[t._v("Watch for changes on "),s("code",[t._v("filename")]),t._v(", where "),s("code",[t._v("filename")]),t._v(" is either a file or a\ndirectory.")]),t._v(" "),s("p",[t._v("The second argument is optional. If "),s("code",[t._v("options")]),t._v(" is provided as a string, it\nspecifies the "),s("code",[t._v("encoding")]),t._v(". Otherwise "),s("code",[t._v("options")]),t._v(" should be passed as an object.")]),t._v(" "),s("p",[t._v("The listener callback gets two arguments "),s("code",[t._v("(eventType, filename)")]),t._v(". "),s("code",[t._v("eventType")]),t._v("\nis either "),s("code",[t._v("'rename'")]),t._v(" or "),s("code",[t._v("'change'")]),t._v(", and "),s("code",[t._v("filename")]),t._v(" is the name of the file\nwhich triggered the event.")]),t._v(" "),s("p",[t._v("On most platforms, "),s("code",[t._v("'rename'")]),t._v(" is emitted whenever a filename appears or\ndisappears in the directory.")]),t._v(" "),s("p",[t._v("The listener callback is attached to the "),s("code",[t._v("'change'")]),t._v(" event fired by\n"),s("a",{attrs:{href:"#fs_class_fs_fswatcher"}},[s("code",[t._v("fs.FSWatcher")])]),t._v(", but it is not the same thing as the "),s("code",[t._v("'change'")]),t._v(" value of\n"),s("code",[t._v("eventType")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"caveats"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#caveats"}},[t._v("#")]),t._v(" Caveats")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("fs.watch")]),t._v(" API is not 100% consistent across platforms, and is\nunavailable in some situations.")]),t._v(" "),s("p",[t._v("The recursive option is only supported on macOS and Windows.")]),t._v(" "),s("h4",{attrs:{id:"availability"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#availability"}},[t._v("#")]),t._v(" Availability")]),t._v(" "),s("p",[t._v("This feature depends on the underlying operating system providing a way\nto be notified of filesystem changes.")]),t._v(" "),s("ul",[s("li",[t._v("On Linux systems, this uses "),s("a",{attrs:{href:"http://man7.org/linux/man-pages/man7/inotify.7.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("inotify(7)")]),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("li",[t._v("On BSD systems, this uses "),s("a",{attrs:{href:"https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("kqueue(2)")]),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("li",[t._v("On macOS, this uses "),s("a",{attrs:{href:"https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("kqueue(2)")]),s("OutboundLink")],1),t._v(" for files and "),s("a",{attrs:{href:"https://developer.apple.com/documentation/coreservices/file_system_events",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("FSEvents")]),s("OutboundLink")],1),t._v(" for\ndirectories.")]),t._v(" "),s("li",[t._v("On SunOS systems (including Solaris and SmartOS), this uses "),s("a",{attrs:{href:"https://illumos.org/man/port_create",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("event ports")]),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("li",[t._v("On Windows systems, this feature depends on "),s("a",{attrs:{href:"https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-readdirectorychangesw",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("ReadDirectoryChangesW")]),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("li",[t._v("On Aix systems, this feature depends on "),s("a",{attrs:{href:"https://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("AHAFS")]),s("OutboundLink")],1),t._v(", which must be enabled.")])]),t._v(" "),s("p",[t._v("If the underlying functionality is not available for some reason, then\n"),s("code",[t._v("fs.watch")]),t._v(" will not be able to function. For example, watching files or\ndirectories can be unreliable, and in some cases impossible, on network file\nsystems (NFS, SMB, etc), or host file systems when using virtualization software\nsuch as Vagrant, Docker, etc.")]),t._v(" "),s("p",[t._v("It is still possible to use "),s("code",[t._v("fs.watchFile()")]),t._v(", which uses stat polling, but\nthis method is slower and less reliable.")]),t._v(" "),s("h4",{attrs:{id:"inodes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inodes"}},[t._v("#")]),t._v(" Inodes")]),t._v(" "),s("p",[t._v("On Linux and macOS systems, "),s("code",[t._v("fs.watch()")]),t._v(" resolves the path to an "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Inode",target:"_blank",rel:"noopener noreferrer"}},[t._v("inode"),s("OutboundLink")],1),t._v(" and\nwatches the inode. If the watched path is deleted and recreated, it is assigned\na new inode. The watch will emit an event for the delete but will continue\nwatching the "),s("em",[t._v("original")]),t._v(" inode. Events for the new inode will not be emitted.\nThis is expected behavior.")]),t._v(" "),s("p",[t._v("AIX files retain the same inode for the lifetime of a file. Saving and closing a\nwatched file on AIX will result in two notifications (one for adding new\ncontent, and one for truncation).")]),t._v(" "),s("h4",{attrs:{id:"filename-argument"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filename-argument"}},[t._v("#")]),t._v(" Filename Argument")]),t._v(" "),s("p",[t._v("Providing "),s("code",[t._v("filename")]),t._v(" argument in the callback is only supported on Linux,\nmacOS, Windows, and AIX. Even on supported platforms, "),s("code",[t._v("filename")]),t._v(" is not always\nguaranteed to be provided. Therefore, don't assume that "),s("code",[t._v("filename")]),t._v(" argument is\nalways provided in the callback, and have some fallback logic if it is "),s("code",[t._v("null")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'somedir'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("eventType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("event type is: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("eventType"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("filename provided: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'filename not provided'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"fs-watchfile-filename-options-listener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-watchfile-filename-options-listener"}},[t._v("#")]),t._v(" fs.watchFile(filename[, options], listener)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("filename")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("persistent")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("true")])]),t._v(" "),s("li",[s("code",[t._v("interval")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("5007")])])])]),t._v(" "),s("li",[s("code",[t._v("listener")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("current")]),t._v(" {fs.Stats}")]),t._v(" "),s("li",[s("code",[t._v("previous")]),t._v(" {fs.Stats}")])])])]),t._v(" "),s("p",[t._v("Watch for changes on "),s("code",[t._v("filename")]),t._v(". The callback "),s("code",[t._v("listener")]),t._v(" will be called each\ntime the file is accessed.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("options")]),t._v(" argument may be omitted. If provided, it should be an object. The\n"),s("code",[t._v("options")]),t._v(" object may contain a boolean named "),s("code",[t._v("persistent")]),t._v(" that indicates\nwhether the process should continue to run as long as files are being watched.\nThe "),s("code",[t._v("options")]),t._v(" object may specify an "),s("code",[t._v("interval")]),t._v(" property indicating how often the\ntarget should be polled in milliseconds.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("listener")]),t._v(" gets two arguments the current stat object and the previous\nstat object:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watchFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message.text'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("curr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prev")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("the current mtime is: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("curr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtime"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("the previous mtime was: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtime"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("These stat objects are instances of "),s("code",[t._v("fs.Stat")]),t._v(".")]),t._v(" "),s("p",[t._v("To be notified when the file was modified, not just accessed, it is necessary\nto compare "),s("code",[t._v("curr.mtime")]),t._v(" and "),s("code",[t._v("prev.mtime")]),t._v(".")]),t._v(" "),s("p",[t._v("When an "),s("code",[t._v("fs.watchFile")]),t._v(" operation results in an "),s("code",[t._v("ENOENT")]),t._v(" error, it\nwill invoke the listener once, with all the fields zeroed (or, for dates, the\nUnix Epoch). If the file is created later on, the listener will be called\nagain, with the latest stat objects. This is a change in functionality since\nv0.10.")]),t._v(" "),s("p",[t._v("Using "),s("a",{attrs:{href:"#fs_fs_watch_filename_options_listener"}},[s("code",[t._v("fs.watch()")])]),t._v(" is more efficient than "),s("code",[t._v("fs.watchFile")]),t._v(" and\n"),s("code",[t._v("fs.unwatchFile")]),t._v(". "),s("code",[t._v("fs.watch")]),t._v(" should be used instead of "),s("code",[t._v("fs.watchFile")]),t._v(" and\n"),s("code",[t._v("fs.unwatchFile")]),t._v(" when possible.")]),t._v(" "),s("p",[t._v("When a file being watched by "),s("code",[t._v("fs.watchFile()")]),t._v(" disappears and reappears,\nthen the "),s("code",[t._v("previousStat")]),t._v(" reported in the second callback event (the file's\nreappearance) will be the same as the "),s("code",[t._v("previousStat")]),t._v(" of the first callback\nevent (its disappearance).")]),t._v(" "),s("p",[t._v("This happens when:")]),t._v(" "),s("ul",[s("li",[t._v("the file is deleted, followed by a restore")]),t._v(" "),s("li",[t._v("the file is renamed and then renamed a second time back to its original name")])]),t._v(" "),s("h2",{attrs:{id:"fs-write-fd-buffer-offset-length-position-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-write-fd-buffer-offset-length-position-callback"}},[t._v("#")]),t._v(" fs.write(fd, buffer[, offset[, length[, position]]], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("offset")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("length")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("position")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("bytesWritten")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer|TypedArray|DataView}")])])])]),t._v(" "),s("p",[t._v("Write "),s("code",[t._v("buffer")]),t._v(" to the file specified by "),s("code",[t._v("fd")]),t._v(".")]),t._v(" "),s("p",[s("code",[t._v("offset")]),t._v(" determines the part of the buffer to be written, and "),s("code",[t._v("length")]),t._v(" is\nan integer specifying the number of bytes to write.")]),t._v(" "),s("p",[s("code",[t._v("position")]),t._v(" refers to the offset from the beginning of the file where this data\nshould be written. If "),s("code",[t._v("typeof position !== 'number'")]),t._v(", the data will be written\nat the current position. See pwrite(2).")]),t._v(" "),s("p",[t._v("The callback will be given three arguments "),s("code",[t._v("(err, bytesWritten, buffer)")]),t._v(" where\n"),s("code",[t._v("bytesWritten")]),t._v(" specifies how many "),s("em",[t._v("bytes")]),t._v(" were written from "),s("code",[t._v("buffer")]),t._v(".")]),t._v(" "),s("p",[t._v("If this method is invoked as its "),s("router-link",{attrs:{to:"/node/util.html#util_util_promisify_original"}},[s("code",[t._v("util.promisify()")])]),t._v("ed version, it returns\na "),s("code",[t._v("Promise")]),t._v(" for an "),s("code",[t._v("Object")]),t._v(" with "),s("code",[t._v("bytesWritten")]),t._v(" and "),s("code",[t._v("buffer")]),t._v(" properties.")],1),t._v(" "),s("p",[t._v("It is unsafe to use "),s("code",[t._v("fs.write()")]),t._v(" multiple times on the same file without waiting\nfor the callback. For this scenario, "),s("a",{attrs:{href:"#fs_fs_createwritestream_path_options"}},[s("code",[t._v("fs.createWriteStream()")])]),t._v(" is\nrecommended.")]),t._v(" "),s("p",[t._v("On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.")]),t._v(" "),s("h2",{attrs:{id:"fs-write-fd-string-position-encoding-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-write-fd-string-position-encoding-callback"}},[t._v("#")]),t._v(" fs.write(fd, string[, position[, encoding]], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("string")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("position")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("written")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("string")]),t._v(" {string}")])])])]),t._v(" "),s("p",[t._v("Write "),s("code",[t._v("string")]),t._v(" to the file specified by "),s("code",[t._v("fd")]),t._v(". If "),s("code",[t._v("string")]),t._v(" is not a string, then\nthe value will be coerced to one.")]),t._v(" "),s("p",[s("code",[t._v("position")]),t._v(" refers to the offset from the beginning of the file where this data\nshould be written. If "),s("code",[t._v("typeof position !== 'number'")]),t._v(" the data will be written at\nthe current position. See pwrite(2).")]),t._v(" "),s("p",[s("code",[t._v("encoding")]),t._v(" is the expected string encoding.")]),t._v(" "),s("p",[t._v("The callback will receive the arguments "),s("code",[t._v("(err, written, string)")]),t._v(" where "),s("code",[t._v("written")]),t._v("\nspecifies how many "),s("em",[t._v("bytes")]),t._v(" the passed string required to be written. Bytes\nwritten is not necessarily the same as string characters written. See\n"),s("router-link",{attrs:{to:"/node/buffer.html#buffer_class_method_buffer_bytelength_string_encoding"}},[s("code",[t._v("Buffer.byteLength")])]),t._v(".")],1),t._v(" "),s("p",[t._v("It is unsafe to use "),s("code",[t._v("fs.write()")]),t._v(" multiple times on the same file without waiting\nfor the callback. For this scenario, "),s("a",{attrs:{href:"#fs_fs_createwritestream_path_options"}},[s("code",[t._v("fs.createWriteStream()")])]),t._v(" is\nrecommended.")]),t._v(" "),s("p",[t._v("On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.")]),t._v(" "),s("p",[t._v("On Windows, if the file descriptor is connected to the console (e.g. "),s("code",[t._v("fd == 1")]),t._v("\nor "),s("code",[t._v("stdout")]),t._v(") a string containing non-ASCII characters will not be rendered\nproperly by default, regardless of the encoding used.\nIt is possible to configure the console to render UTF-8 properly by changing the\nactive codepage with the "),s("code",[t._v("chcp 65001")]),t._v(" command. See the "),s("a",{attrs:{href:"https://ss64.com/nt/chcp.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("chcp"),s("OutboundLink")],1),t._v(" docs for more\ndetails.")]),t._v(" "),s("h2",{attrs:{id:"fs-writefile-file-data-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-writefile-file-data-options-callback"}},[t._v("#")]),t._v(" fs.writeFile(file, data[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("file")]),t._v(" {string|Buffer|URL|integer} filename or file descriptor")]),t._v(" "),s("li",[s("code",[t._v("data")]),t._v(" {string|Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|string}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")])]),t._v(" "),s("li",[s("code",[t._v("flag")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'w'")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")])])])]),t._v(" "),s("p",[t._v("When "),s("code",[t._v("file")]),t._v(" is a filename, asynchronously writes data to the file, replacing the\nfile if it already exists.  "),s("code",[t._v("data")]),t._v(" can be a string or a buffer.")]),t._v(" "),s("p",[t._v("When "),s("code",[t._v("file")]),t._v(" is a file descriptor, the behavior is similar to calling\n"),s("code",[t._v("fs.write()")]),t._v(" directly (which is recommended). See the notes below on using\na file descriptor.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("encoding")]),t._v(" option is ignored if "),s("code",[t._v("data")]),t._v(" is a buffer.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello Node.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The file has been saved!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("If "),s("code",[t._v("options")]),t._v(" is a string, then it specifies the encoding:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello Node.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("It is unsafe to use "),s("code",[t._v("fs.writeFile()")]),t._v(" multiple times on the same file without\nwaiting for the callback. For this scenario, "),s("a",{attrs:{href:"#fs_fs_createwritestream_path_options"}},[s("code",[t._v("fs.createWriteStream()")])]),t._v(" is\nrecommended.")]),t._v(" "),s("h3",{attrs:{id:"using-fs-writefile-with-file-descriptors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-fs-writefile-with-file-descriptors"}},[t._v("#")]),t._v(" Using "),s("code",[t._v("fs.writeFile()")]),t._v(" with File Descriptors")]),t._v(" "),s("p",[t._v("When "),s("code",[t._v("file")]),t._v(" is a file descriptor, the behavior is almost identical to directly\ncalling "),s("code",[t._v("fs.write()")]),t._v(" like:")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The difference from directly calling "),s("code",[t._v("fs.write()")]),t._v(" is that under some unusual\nconditions, "),s("code",[t._v("fs.write()")]),t._v(" may write only part of the buffer and will need to be\nretried to write the remaining data, whereas "),s("code",[t._v("fs.writeFile()")]),t._v(" will retry until\nthe data is entirely written (or an error occurs).")]),t._v(" "),s("p",[t._v("The implications of this are a common source of confusion. In\nthe file descriptor case, the file is not replaced! The data is not necessarily\nwritten to the beginning of the file, and the file's original data may remain\nbefore and/or after the newly written data.")]),t._v(" "),s("p",[t._v("For example, if "),s("code",[t._v("fs.writeFile()")]),t._v(" is called twice in a row, first to write the\nstring "),s("code",[t._v("'Hello'")]),t._v(", then to write the string "),s("code",[t._v("', World'")]),t._v(", the file would contain\n"),s("code",[t._v("'Hello, World'")]),t._v(", and might contain some of the file's original data (depending\non the size of the original file, and the position of the file descriptor).  If\na file name had been used instead of a descriptor, the file would be guaranteed\nto contain only "),s("code",[t._v("', World'")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-writefilesync-file-data-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-writefilesync-file-data-options"}},[t._v("#")]),t._v(" fs.writeFileSync(file, data[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("file")]),t._v(" {string|Buffer|URL|integer} filename or file descriptor")]),t._v(" "),s("li",[s("code",[t._v("data")]),t._v(" {string|Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|string}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")])]),t._v(" "),s("li",[s("code",[t._v("flag")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'w'")]),t._v(".")])])])]),t._v(" "),s("p",[t._v("Returns "),s("code",[t._v("undefined")]),t._v(".")]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_writefile_file_data_options_callback"}},[s("code",[t._v("fs.writeFile()")])]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-writesync-fd-buffer-offset-length-position"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-writesync-fd-buffer-offset-length-position"}},[t._v("#")]),t._v(" fs.writeSync(fd, buffer[, offset[, length[, position]]])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("offset")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("length")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("position")]),t._v(" {integer}")]),t._v(" "),s("li",[t._v("Returns: {number} The number of bytes written.")])]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_write_fd_buffer_offset_length_position_callback"}},[s("code",[t._v("fs.write(fd, buffer...)")])]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-writesync-fd-string-position-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-writesync-fd-string-position-encoding"}},[t._v("#")]),t._v(" fs.writeSync(fd, string[, position[, encoding]])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("string")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("position")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" {string}")]),t._v(" "),s("li",[t._v("Returns: {number} The number of bytes written.")])]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_write_fd_string_position_encoding_callback"}},[s("code",[t._v("fs.write(fd, string...)")])]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-writev-fd-buffers-position-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-writev-fd-buffers-position-callback"}},[t._v("#")]),t._v(" fs.writev(fd, buffers[, position], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("buffers")]),t._v(" {ArrayBufferView[]}")]),t._v(" "),s("li",[s("code",[t._v("position")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("bytesWritten")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("buffers")]),t._v(" {ArrayBufferView[]}")])])])]),t._v(" "),s("p",[t._v("Write an array of "),s("code",[t._v("ArrayBufferView")]),t._v("s to the file specified by "),s("code",[t._v("fd")]),t._v(" using\n"),s("code",[t._v("writev()")]),t._v(".")]),t._v(" "),s("p",[s("code",[t._v("position")]),t._v(" is the offset from the beginning of the file where this data\nshould be written. If "),s("code",[t._v("typeof position !== 'number'")]),t._v(", the data will be written\nat the current position.")]),t._v(" "),s("p",[t._v("The callback will be given three arguments: "),s("code",[t._v("err")]),t._v(", "),s("code",[t._v("bytesWritten")]),t._v(", and\n"),s("code",[t._v("buffers")]),t._v(". "),s("code",[t._v("bytesWritten")]),t._v(" is how many bytes were written from "),s("code",[t._v("buffers")]),t._v(".")]),t._v(" "),s("p",[t._v("If this method is "),s("router-link",{attrs:{to:"/node/util.html#util_util_promisify_original"}},[s("code",[t._v("util.promisify()")])]),t._v("ed, it returns a "),s("code",[t._v("Promise")]),t._v(" for an\n"),s("code",[t._v("Object")]),t._v(" with "),s("code",[t._v("bytesWritten")]),t._v(" and "),s("code",[t._v("buffers")]),t._v(" properties.")],1),t._v(" "),s("p",[t._v("It is unsafe to use "),s("code",[t._v("fs.writev()")]),t._v(" multiple times on the same file without\nwaiting for the callback. For this scenario, use "),s("a",{attrs:{href:"#fs_fs_createwritestream_path_options"}},[s("code",[t._v("fs.createWriteStream()")])]),t._v(".")]),t._v(" "),s("p",[t._v("On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.")]),t._v(" "),s("h2",{attrs:{id:"fs-writevsync-fd-buffers-position"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-writevsync-fd-buffers-position"}},[t._v("#")]),t._v(" fs.writevSync(fd, buffers[, position])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fd")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("buffers")]),t._v(" {ArrayBufferView[]}")]),t._v(" "),s("li",[s("code",[t._v("position")]),t._v(" {integer}")]),t._v(" "),s("li",[t._v("Returns: {number} The number of bytes written.")])]),t._v(" "),s("p",[t._v("For detailed information, see the documentation of the asynchronous version of\nthis API: "),s("a",{attrs:{href:"#fs_fs_writev_fd_buffers_position_callback"}},[s("code",[t._v("fs.writev()")])]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"fs-promises-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-promises-api"}},[t._v("#")]),t._v(" fs Promises API")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("fs.promises")]),t._v(" API provides an alternative set of asynchronous file system\nmethods that return "),s("code",[t._v("Promise")]),t._v(" objects rather than using callbacks. The\nAPI is accessible via "),s("code",[t._v("require('fs').promises")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"class-filehandle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-filehandle"}},[t._v("#")]),t._v(" class: FileHandle")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("FileHandle")]),t._v(" object is a wrapper for a numeric file descriptor.\nInstances of "),s("code",[t._v("FileHandle")]),t._v(" are distinct from numeric file descriptors\nin that they provide an object oriented API for working with files.")]),t._v(" "),s("p",[t._v("If a "),s("code",[t._v("FileHandle")]),t._v(" is not closed using the\n"),s("code",[t._v("filehandle.close()")]),t._v(" method, it might automatically close the file descriptor\nand will emit a process warning, thereby helping to prevent memory leaks.\nPlease do not rely on this behavior in your code because it is unreliable and\nyour file may not be closed. Instead, always explicitly close "),s("code",[t._v("FileHandle")]),t._v("s.\nNode.js may change this behavior in the future.")]),t._v(" "),s("p",[t._v("Instances of the "),s("code",[t._v("FileHandle")]),t._v(" object are created internally by the\n"),s("code",[t._v("fsPromises.open()")]),t._v(" method.")]),t._v(" "),s("p",[t._v("Unlike the callback-based API ("),s("code",[t._v("fs.fstat()")]),t._v(", "),s("code",[t._v("fs.fchown()")]),t._v(", "),s("code",[t._v("fs.fchmod()")]),t._v(", and\nso on), a numeric file descriptor is not used by the promise-based API. Instead,\nthe promise-based API uses the "),s("code",[t._v("FileHandle")]),t._v(" class in order to help avoid\naccidental leaking of unclosed file descriptors after a "),s("code",[t._v("Promise")]),t._v(" is resolved or\nrejected.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-appendfile-data-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-appendfile-data-options"}},[t._v("#")]),t._v(" filehandle.appendFile(data, options)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("data")]),t._v(" {string|Buffer}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|string}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")])]),t._v(" "),s("li",[s("code",[t._v("flag")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'a'")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronously append data to this file, creating the file if it does not yet\nexist. "),s("code",[t._v("data")]),t._v(" can be a string or a "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffer"}},[s("code",[t._v("Buffer")])]),t._v(". The "),s("code",[t._v("Promise")]),t._v(" will be\nresolved with no arguments upon success.")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("options")]),t._v(" is a string, then it specifies the encoding.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("FileHandle")]),t._v(" must have been opened for appending.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-chmod-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-chmod-mode"}},[t._v("#")]),t._v(" filehandle.chmod(mode)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("mode")]),t._v(" {integer}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Modifies the permissions on the file. The "),s("code",[t._v("Promise")]),t._v(" is resolved with no\narguments upon success.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-chown-uid-gid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-chown-uid-gid"}},[t._v("#")]),t._v(" filehandle.chown(uid, gid)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("uid")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("gid")]),t._v(" {integer}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Changes the ownership of the file then resolves the "),s("code",[t._v("Promise")]),t._v(" with no arguments\nupon success.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-close"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-close"}},[t._v("#")]),t._v(" filehandle.close()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {Promise} A "),s("code",[t._v("Promise")]),t._v(" that will be resolved once the underlying\nfile descriptor is closed, or will be rejected if an error occurs while\nclosing.")])]),t._v(" "),s("p",[t._v("Closes the file descriptor.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fsPromises "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("promises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("openAndClose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" filehandle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    filehandle "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" fsPromises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'thefile.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filehandle "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" filehandle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"filehandle-datasync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-datasync"}},[t._v("#")]),t._v(" filehandle.datasync()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronous fdatasync(2). The "),s("code",[t._v("Promise")]),t._v(" is resolved with no arguments upon\nsuccess.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-fd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-fd"}},[t._v("#")]),t._v(" filehandle.fd")]),t._v(" "),s("ul",[s("li",[t._v("{number} The numeric file descriptor managed by the "),s("code",[t._v("FileHandle")]),t._v(" object.")])]),t._v(" "),s("h4",{attrs:{id:"filehandle-read-buffer-offset-length-position"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-read-buffer-offset-length-position"}},[t._v("#")]),t._v(" filehandle.read(buffer, offset, length, position)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer|Uint8Array}")]),t._v(" "),s("li",[s("code",[t._v("offset")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("length")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("position")]),t._v(" {integer}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Read data from the file.")]),t._v(" "),s("p",[s("code",[t._v("buffer")]),t._v(" is the buffer that the data will be written to.")]),t._v(" "),s("p",[s("code",[t._v("offset")]),t._v(" is the offset in the buffer to start writing at.")]),t._v(" "),s("p",[s("code",[t._v("length")]),t._v(" is an integer specifying the number of bytes to read.")]),t._v(" "),s("p",[s("code",[t._v("position")]),t._v(" is an argument specifying where to begin reading from in the file.\nIf "),s("code",[t._v("position")]),t._v(" is "),s("code",[t._v("null")]),t._v(", data will be read from the current file position,\nand the file position will be updated.\nIf "),s("code",[t._v("position")]),t._v(" is an integer, the file position will remain unchanged.")]),t._v(" "),s("p",[t._v("Following successful read, the "),s("code",[t._v("Promise")]),t._v(" is resolved with an object with a\n"),s("code",[t._v("bytesRead")]),t._v(" property specifying the number of bytes read, and a "),s("code",[t._v("buffer")]),t._v("\nproperty that is a reference to the passed in "),s("code",[t._v("buffer")]),t._v(" argument.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-readfile-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-readfile-options"}},[t._v("#")]),t._v(" filehandle.readFile(options)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("options")]),t._v(" {Object|string}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("flag")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'r'")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronously reads the entire contents of a file.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Promise")]),t._v(" is resolved with the contents of the file. If no encoding is\nspecified (using "),s("code",[t._v("options.encoding")]),t._v("), the data is returned as a "),s("code",[t._v("Buffer")]),t._v("\nobject. Otherwise, the data will be a string.")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("options")]),t._v(" is a string, then it specifies the encoding.")]),t._v(" "),s("p",[t._v("When the "),s("code",[t._v("path")]),t._v(" is a directory, the behavior of "),s("code",[t._v("fsPromises.readFile()")]),t._v(" is\nplatform-specific. On macOS, Linux, and Windows, the promise will be rejected\nwith an error. On FreeBSD, a representation of the directory's contents will be\nreturned.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("FileHandle")]),t._v(" has to support reading.")]),t._v(" "),s("p",[t._v("If one or more "),s("code",[t._v("filehandle.read()")]),t._v(" calls are made on a file handle and then a\n"),s("code",[t._v("filehandle.readFile()")]),t._v(" call is made, the data will be read from the current\nposition till the end of the file. It doesn't always read from the beginning\nof the file.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-stat-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-stat-options"}},[t._v("#")]),t._v(" filehandle.stat([options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("bigint")]),t._v(" {boolean} Whether the numeric values in the returned\n"),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object should be "),s("code",[t._v("bigint")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Retrieves the "),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" for the file.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-sync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-sync"}},[t._v("#")]),t._v(" filehandle.sync()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronous fsync(2). The "),s("code",[t._v("Promise")]),t._v(" is resolved with no arguments upon\nsuccess.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-truncate-len"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-truncate-len"}},[t._v("#")]),t._v(" filehandle.truncate(len)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("len")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0")])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Truncates the file then resolves the "),s("code",[t._v("Promise")]),t._v(" with no arguments upon success.")]),t._v(" "),s("p",[t._v("If the file was larger than "),s("code",[t._v("len")]),t._v(" bytes, only the first "),s("code",[t._v("len")]),t._v(" bytes will be\nretained in the file.")]),t._v(" "),s("p",[t._v("For example, the following program retains only the first four bytes of the\nfile:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fsPromises "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("promises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: Node.js")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doTruncate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" filehandle "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    filehandle "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" fsPromises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r+'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" filehandle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("truncate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filehandle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Close the file if it is opened.")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" filehandle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: Node")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doTruncate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("If the file previously was shorter than "),s("code",[t._v("len")]),t._v(" bytes, it is extended, and the\nextended part is filled with null bytes ("),s("code",[t._v("'\\0'")]),t._v("):")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fsPromises "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("promises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: Node.js")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doTruncate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" filehandle "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    filehandle "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" fsPromises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r+'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" filehandle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("truncate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filehandle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Close the file if it is opened.")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" filehandle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'temp.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints Node.js\\0\\0\\0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doTruncate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The last three bytes are null bytes ("),s("code",[t._v("'\\0'")]),t._v("), to compensate the over-truncation.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-utimes-atime-mtime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-utimes-atime-mtime"}},[t._v("#")]),t._v(" filehandle.utimes(atime, mtime)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("atime")]),t._v(" {number|string|Date}")]),t._v(" "),s("li",[s("code",[t._v("mtime")]),t._v(" {number|string|Date}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Change the file system timestamps of the object referenced by the "),s("code",[t._v("FileHandle")]),t._v("\nthen resolves the "),s("code",[t._v("Promise")]),t._v(" with no arguments upon success.")]),t._v(" "),s("p",[t._v("This function does not work on AIX versions before 7.1, it will resolve the\n"),s("code",[t._v("Promise")]),t._v(" with an error using code "),s("code",[t._v("UV_ENOSYS")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"filehandle-write-buffer-offset-length-position"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-write-buffer-offset-length-position"}},[t._v("#")]),t._v(" filehandle.write(buffer[, offset[, length[, position]]])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer|Uint8Array}")]),t._v(" "),s("li",[s("code",[t._v("offset")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("length")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("position")]),t._v(" {integer}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Write "),s("code",[t._v("buffer")]),t._v(" to the file.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Promise")]),t._v(" is resolved with an object containing a "),s("code",[t._v("bytesWritten")]),t._v(" property\nidentifying the number of bytes written, and a "),s("code",[t._v("buffer")]),t._v(" property containing\na reference to the "),s("code",[t._v("buffer")]),t._v(" written.")]),t._v(" "),s("p",[s("code",[t._v("offset")]),t._v(" determines the part of the buffer to be written, and "),s("code",[t._v("length")]),t._v(" is\nan integer specifying the number of bytes to write.")]),t._v(" "),s("p",[s("code",[t._v("position")]),t._v(" refers to the offset from the beginning of the file where this data\nshould be written. If "),s("code",[t._v("typeof position !== 'number'")]),t._v(", the data will be written\nat the current position. See pwrite(2).")]),t._v(" "),s("p",[t._v("It is unsafe to use "),s("code",[t._v("filehandle.write()")]),t._v(" multiple times on the same file\nwithout waiting for the "),s("code",[t._v("Promise")]),t._v(" to be resolved (or rejected). For this\nscenario, use "),s("a",{attrs:{href:"#fs_fs_createwritestream_path_options"}},[s("code",[t._v("fs.createWriteStream()")])]),t._v(".")]),t._v(" "),s("p",[t._v("On Linux, positional writes do not work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-write-string-position-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-write-string-position-encoding"}},[t._v("#")]),t._v(" filehandle.write(string[, position[, encoding]])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("string")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("position")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Write "),s("code",[t._v("string")]),t._v(" to the file. If "),s("code",[t._v("string")]),t._v(" is not a string, then\nthe value will be coerced to one.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Promise")]),t._v(" is resolved with an object containing a "),s("code",[t._v("bytesWritten")]),t._v(" property\nidentifying the number of bytes written, and a "),s("code",[t._v("buffer")]),t._v(" property containing\na reference to the "),s("code",[t._v("string")]),t._v(" written.")]),t._v(" "),s("p",[s("code",[t._v("position")]),t._v(" refers to the offset from the beginning of the file where this data\nshould be written. If the type of "),s("code",[t._v("position")]),t._v(" is not a "),s("code",[t._v("number")]),t._v(" the data\nwill be written at the current position. See pwrite(2).")]),t._v(" "),s("p",[s("code",[t._v("encoding")]),t._v(" is the expected string encoding.")]),t._v(" "),s("p",[t._v("It is unsafe to use "),s("code",[t._v("filehandle.write()")]),t._v(" multiple times on the same file\nwithout waiting for the "),s("code",[t._v("Promise")]),t._v(" to be resolved (or rejected). For this\nscenario, use "),s("a",{attrs:{href:"#fs_fs_createwritestream_path_options"}},[s("code",[t._v("fs.createWriteStream()")])]),t._v(".")]),t._v(" "),s("p",[t._v("On Linux, positional writes do not work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-writefile-data-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-writefile-data-options"}},[t._v("#")]),t._v(" filehandle.writeFile(data, options)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("data")]),t._v(" {string|Buffer|Uint8Array}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|string}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")])]),t._v(" "),s("li",[s("code",[t._v("flag")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'w'")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronously writes data to a file, replacing the file if it already exists.\n"),s("code",[t._v("data")]),t._v(" can be a string or a buffer. The "),s("code",[t._v("Promise")]),t._v(" will be resolved with no\narguments upon success.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("encoding")]),t._v(" option is ignored if "),s("code",[t._v("data")]),t._v(" is a buffer.")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("options")]),t._v(" is a string, then it specifies the encoding.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("FileHandle")]),t._v(" has to support writing.")]),t._v(" "),s("p",[t._v("It is unsafe to use "),s("code",[t._v("filehandle.writeFile()")]),t._v(" multiple times on the same file\nwithout waiting for the "),s("code",[t._v("Promise")]),t._v(" to be resolved (or rejected).")]),t._v(" "),s("p",[t._v("If one or more "),s("code",[t._v("filehandle.write()")]),t._v(" calls are made on a file handle and then a\n"),s("code",[t._v("filehandle.writeFile()")]),t._v(" call is made, the data will be written from the\ncurrent position till the end of the file. It doesn't always write from the\nbeginning of the file.")]),t._v(" "),s("h4",{attrs:{id:"filehandle-writev-buffers-position"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filehandle-writev-buffers-position"}},[t._v("#")]),t._v(" filehandle.writev(buffers[, position])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("buffers")]),t._v(" {ArrayBufferView[]}")]),t._v(" "),s("li",[s("code",[t._v("position")]),t._v(" {integer}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Write an array of "),s("code",[t._v("ArrayBufferView")]),t._v("s to the file.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Promise")]),t._v(" is resolved with an object containing a "),s("code",[t._v("bytesWritten")]),t._v(" property\nidentifying the number of bytes written, and a "),s("code",[t._v("buffers")]),t._v(" property containing\na reference to the "),s("code",[t._v("buffers")]),t._v(" input.")]),t._v(" "),s("p",[s("code",[t._v("position")]),t._v(" is the offset from the beginning of the file where this data\nshould be written. If "),s("code",[t._v("typeof position !== 'number'")]),t._v(", the data will be written\nat the current position.")]),t._v(" "),s("p",[t._v("It is unsafe to call "),s("code",[t._v("writev()")]),t._v(" multiple times on the same file without waiting\nfor the previous operation to complete.")]),t._v(" "),s("p",[t._v("On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-access-path-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-access-path-mode"}},[t._v("#")]),t._v(" fsPromises.access(path[, mode])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("fs.constants.F_OK")])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Tests a user's permissions for the file or directory specified by "),s("code",[t._v("path")]),t._v(".\nThe "),s("code",[t._v("mode")]),t._v(" argument is an optional integer that specifies the accessibility\nchecks to be performed. Check "),s("a",{attrs:{href:"#fs_file_access_constants"}},[t._v("File Access Constants")]),t._v(" for possible values\nof "),s("code",[t._v("mode")]),t._v(". It is possible to create a mask consisting of the bitwise OR of\ntwo or more values (e.g. "),s("code",[t._v("fs.constants.W_OK | fs.constants.R_OK")]),t._v(").")]),t._v(" "),s("p",[t._v("If the accessibility check is successful, the "),s("code",[t._v("Promise")]),t._v(" is resolved with no\nvalue. If any of the accessibility checks fail, the "),s("code",[t._v("Promise")]),t._v(" is rejected\nwith an "),s("code",[t._v("Error")]),t._v(" object. The following example checks if the file\n"),s("code",[t._v("/etc/passwd")]),t._v(" can be read and written by the current process.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fsPromises "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("promises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nfsPromises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("access")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/etc/passwd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R_OK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("W_OK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'can access'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cannot access'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Using "),s("code",[t._v("fsPromises.access()")]),t._v(" to check for the accessibility of a file before\ncalling "),s("code",[t._v("fsPromises.open()")]),t._v(" is not recommended. Doing so introduces a race\ncondition, since other processes may change the file's state between the two\ncalls. Instead, user code should open/read/write the file directly and handle\nthe error raised if the file is not accessible.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-appendfile-path-data-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-appendfile-path-data-options"}},[t._v("#")]),t._v(" fsPromises.appendFile(path, data[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL|FileHandle} filename or "),s("code",[t._v("FileHandle")])]),t._v(" "),s("li",[s("code",[t._v("data")]),t._v(" {string|Buffer}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|string}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")])]),t._v(" "),s("li",[s("code",[t._v("flag")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'a'")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronously append data to a file, creating the file if it does not yet\nexist. "),s("code",[t._v("data")]),t._v(" can be a string or a "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffer"}},[s("code",[t._v("Buffer")])]),t._v(". The "),s("code",[t._v("Promise")]),t._v(" will be\nresolved with no arguments upon success.")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("options")]),t._v(" is a string, then it specifies the encoding.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("path")]),t._v(" may be specified as a "),s("code",[t._v("FileHandle")]),t._v(" that has been opened\nfor appending (using "),s("code",[t._v("fsPromises.open()")]),t._v(").")]),t._v(" "),s("h3",{attrs:{id:"fspromises-chmod-path-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-chmod-path-mode"}},[t._v("#")]),t._v(" fsPromises.chmod(path, mode)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Changes the permissions of a file then resolves the "),s("code",[t._v("Promise")]),t._v(" with no\narguments upon succces.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-chown-path-uid-gid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-chown-path-uid-gid"}},[t._v("#")]),t._v(" fsPromises.chown(path, uid, gid)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("uid")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("gid")]),t._v(" {integer}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Changes the ownership of a file then resolves the "),s("code",[t._v("Promise")]),t._v(" with no arguments\nupon success.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-copyfile-src-dest-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-copyfile-src-dest-flags"}},[t._v("#")]),t._v(" fsPromises.copyFile(src, dest[, flags])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("src")]),t._v(" {string|Buffer|URL} source filename to copy")]),t._v(" "),s("li",[s("code",[t._v("dest")]),t._v(" {string|Buffer|URL} destination filename of the copy operation")]),t._v(" "),s("li",[s("code",[t._v("flags")]),t._v(" {number} modifiers for copy operation. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0")]),t._v(".")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronously copies "),s("code",[t._v("src")]),t._v(" to "),s("code",[t._v("dest")]),t._v(". By default, "),s("code",[t._v("dest")]),t._v(" is overwritten if it\nalready exists. The "),s("code",[t._v("Promise")]),t._v(" will be resolved with no arguments upon success.")]),t._v(" "),s("p",[t._v("Node.js makes no guarantees about the atomicity of the copy operation. If an\nerror occurs after the destination file has been opened for writing, Node.js\nwill attempt to remove the destination.")]),t._v(" "),s("p",[s("code",[t._v("flags")]),t._v(" is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n"),s("code",[t._v("fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE")]),t._v(").")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fs.constants.COPYFILE_EXCL")]),t._v(": The copy operation will fail if "),s("code",[t._v("dest")]),t._v(" already\nexists.")]),t._v(" "),s("li",[s("code",[t._v("fs.constants.COPYFILE_FICLONE")]),t._v(": The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used.")]),t._v(" "),s("li",[s("code",[t._v("fs.constants.COPYFILE_FICLONE_FORCE")]),t._v(": The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support copy-on-write,\nthen the operation will fail.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fsPromises "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("promises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// destination.txt will be created or overwritten by default.")]),t._v("\nfsPromises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'destination.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source.txt was copied to destination.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The file could not be copied'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("If the third argument is a number, then it specifies "),s("code",[t._v("flags")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fsPromises "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("promises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COPYFILE_EXCL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.")]),t._v("\nfsPromises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'destination.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COPYFILE_EXCL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source.txt was copied to destination.txt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The file could not be copied'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"fspromises-lchmod-path-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-lchmod-path-mode"}},[t._v("#")]),t._v(" fsPromises.lchmod(path, mode)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Changes the permissions on a symbolic link then resolves the "),s("code",[t._v("Promise")]),t._v(" with\nno arguments upon success. This method is only implemented on macOS.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-lchown-path-uid-gid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-lchown-path-uid-gid"}},[t._v("#")]),t._v(" fsPromises.lchown(path, uid, gid)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("uid")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("gid")]),t._v(" {integer}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Changes the ownership on a symbolic link then resolves the "),s("code",[t._v("Promise")]),t._v(" with\nno arguments upon success.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-link-existingpath-newpath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-link-existingpath-newpath"}},[t._v("#")]),t._v(" fsPromises.link(existingPath, newPath)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("existingPath")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("newPath")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronous link(2). The "),s("code",[t._v("Promise")]),t._v(" is resolved with no arguments upon success.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-lstat-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-lstat-path-options"}},[t._v("#")]),t._v(" fsPromises.lstat(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("bigint")]),t._v(" {boolean} Whether the numeric values in the returned\n"),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object should be "),s("code",[t._v("bigint")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronous lstat(2). The "),s("code",[t._v("Promise")]),t._v(" is resolved with the "),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object\nfor the given symbolic link "),s("code",[t._v("path")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"fspromises-mkdir-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-mkdir-path-options"}},[t._v("#")]),t._v(" fsPromises.mkdir(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|integer}\n"),s("ul",[s("li",[s("code",[t._v("recursive")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} Not supported on Windows. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o777")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronously creates a directory then resolves the "),s("code",[t._v("Promise")]),t._v(" with no\narguments upon success.")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be an integer specifying mode (permission\nand sticky bits), or an object with a "),s("code",[t._v("mode")]),t._v(" property and a "),s("code",[t._v("recursive")]),t._v("\nproperty indicating whether parent folders should be created. Calling\n"),s("code",[t._v("fsPromises.mkdir()")]),t._v(" when "),s("code",[t._v("path")]),t._v(" is a directory that exists results in a\nrejection only when "),s("code",[t._v("recursive")]),t._v(" is false.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-mkdtemp-prefix-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-mkdtemp-prefix-options"}},[t._v("#")]),t._v(" fsPromises.mkdtemp(prefix[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("prefix")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Creates a unique temporary directory and resolves the "),s("code",[t._v("Promise")]),t._v(" with the created\nfolder path. A unique directory name is generated by appending six random\ncharacters to the end of the provided "),s("code",[t._v("prefix")]),t._v(". Due to platform\ninconsistencies, avoid trailing "),s("code",[t._v("X")]),t._v(" characters in "),s("code",[t._v("prefix")]),t._v(". Some platforms,\nnotably the BSDs, can return more than six random characters, and replace\ntrailing "),s("code",[t._v("X")]),t._v(" characters in "),s("code",[t._v("prefix")]),t._v(" with random characters.")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("fsPromises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdtemp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tmpdir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo-'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The "),s("code",[t._v("fsPromises.mkdtemp()")]),t._v(" method will append the six randomly selected\ncharacters directly to the "),s("code",[t._v("prefix")]),t._v(" string. For instance, given a directory\n"),s("code",[t._v("/tmp")]),t._v(", if the intention is to create a temporary directory "),s("em",[t._v("within")]),t._v(" "),s("code",[t._v("/tmp")]),t._v(", the\n"),s("code",[t._v("prefix")]),t._v(" must end with a trailing platform-specific path separator\n("),s("code",[t._v("require('path').sep")]),t._v(").")]),t._v(" "),s("h3",{attrs:{id:"fspromises-open-path-flags-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-open-path-flags-mode"}},[t._v("#")]),t._v(" fsPromises.open(path, flags[, mode])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("flags")]),t._v(" {string|number} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(".\n"),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'r'")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")]),t._v(" (readable and writable)")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronous file open that returns a "),s("code",[t._v("Promise")]),t._v(" that, when resolved, yields a\n"),s("code",[t._v("FileHandle")]),t._v(" object. See open(2).")]),t._v(" "),s("p",[s("code",[t._v("mode")]),t._v(" sets the file mode (permission and sticky bits), but only if the file was\ncreated.")]),t._v(" "),s("p",[t._v("Some characters ("),s("code",[t._v('< > : " / \\ | ? *')]),t._v(") are reserved under Windows as documented\nby "),s("a",{attrs:{href:"https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file",target:"_blank",rel:"noopener noreferrer"}},[t._v("Naming Files, Paths, and Namespaces"),s("OutboundLink")],1),t._v(". Under NTFS, if the filename contains\na colon, Node.js will open a file system stream, as described by\n"),s("a",{attrs:{href:"https://docs.microsoft.com/en-us/windows/desktop/FileIO/using-streams",target:"_blank",rel:"noopener noreferrer"}},[t._v("this MSDN page"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"fspromises-opendir-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-opendir-path-options"}},[t._v("#")]),t._v(" fsPromises.opendir(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("bufferSize")]),t._v(" {number} Number of directory entries that are buffered\ninternally when reading from the directory. Higher values lead to better\nperformance but higher memory usage. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("32")])])])]),t._v(" "),s("li",[t._v("Returns: {Promise} containing {fs.Dir}")])]),t._v(" "),s("p",[t._v("Asynchronously open a directory. See opendir(3).")]),t._v(" "),s("p",[t._v("Creates an "),s("a",{attrs:{href:"#fs_class_fs_dir"}},[s("code",[t._v("fs.Dir")])]),t._v(", which contains all further functions for reading from\nand cleaning up the directory.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("encoding")]),t._v(" option sets the encoding for the "),s("code",[t._v("path")]),t._v(" while opening the\ndirectory and subsequent read operations.")]),t._v(" "),s("p",[t._v("Example using async iteration:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("path")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dir "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("promises"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("opendir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dirent "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" dir"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"fspromises-readdir-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-readdir-path-options"}},[t._v("#")]),t._v(" fsPromises.readdir(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("withFileTypes")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")])])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Reads the contents of a directory then resolves the "),s("code",[t._v("Promise")]),t._v(" with an array\nof the names of the files in the directory excluding "),s("code",[t._v("'.'")]),t._v(" and "),s("code",[t._v("'..'")]),t._v(".")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use for\nthe filenames. If the "),s("code",[t._v("encoding")]),t._v(" is set to "),s("code",[t._v("'buffer'")]),t._v(", the filenames returned\nwill be passed as "),s("code",[t._v("Buffer")]),t._v(" objects.")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("options.withFileTypes")]),t._v(" is set to "),s("code",[t._v("true")]),t._v(", the resolved array will contain\n"),s("a",{attrs:{href:"#fs_class_fs_dirent"}},[s("code",[t._v("fs.Dirent")])]),t._v(" objects.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-readfile-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-readfile-path-options"}},[t._v("#")]),t._v(" fsPromises.readFile(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL|FileHandle} filename or "),s("code",[t._v("FileHandle")])]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|string}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("flag")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'r'")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronously reads the entire contents of a file.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Promise")]),t._v(" is resolved with the contents of the file. If no encoding is\nspecified (using "),s("code",[t._v("options.encoding")]),t._v("), the data is returned as a "),s("code",[t._v("Buffer")]),t._v("\nobject. Otherwise, the data will be a string.")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("options")]),t._v(" is a string, then it specifies the encoding.")]),t._v(" "),s("p",[t._v("When the "),s("code",[t._v("path")]),t._v(" is a directory, the behavior of "),s("code",[t._v("fsPromises.readFile()")]),t._v(" is\nplatform-specific. On macOS, Linux, and Windows, the promise will be rejected\nwith an error. On FreeBSD, a representation of the directory's contents will be\nreturned.")]),t._v(" "),s("p",[t._v("Any specified "),s("code",[t._v("FileHandle")]),t._v(" has to support reading.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-readlink-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-readlink-path-options"}},[t._v("#")]),t._v(" fsPromises.readlink(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronous readlink(2). The "),s("code",[t._v("Promise")]),t._v(" is resolved with the "),s("code",[t._v("linkString")]),t._v(" upon\nsuccess.")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use for\nthe link path returned. If the "),s("code",[t._v("encoding")]),t._v(" is set to "),s("code",[t._v("'buffer'")]),t._v(", the link path\nreturned will be passed as a "),s("code",[t._v("Buffer")]),t._v(" object.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-realpath-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-realpath-path-options"}},[t._v("#")]),t._v(" fsPromises.realpath(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {string|Object}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Determines the actual location of "),s("code",[t._v("path")]),t._v(" using the same semantics as the\n"),s("code",[t._v("fs.realpath.native()")]),t._v(" function then resolves the "),s("code",[t._v("Promise")]),t._v(" with the resolved\npath.")]),t._v(" "),s("p",[t._v("Only paths that can be converted to UTF8 strings are supported.")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument can be a string specifying an encoding, or an\nobject with an "),s("code",[t._v("encoding")]),t._v(" property specifying the character encoding to use for\nthe path. If the "),s("code",[t._v("encoding")]),t._v(" is set to "),s("code",[t._v("'buffer'")]),t._v(", the path returned will be\npassed as a "),s("code",[t._v("Buffer")]),t._v(" object.")]),t._v(" "),s("p",[t._v("On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on "),s("code",[t._v("/proc")]),t._v(" in order for this function to work. Glibc does not have\nthis restriction.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-rename-oldpath-newpath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-rename-oldpath-newpath"}},[t._v("#")]),t._v(" fsPromises.rename(oldPath, newPath)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("oldPath")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("newPath")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Renames "),s("code",[t._v("oldPath")]),t._v(" to "),s("code",[t._v("newPath")]),t._v(" and resolves the "),s("code",[t._v("Promise")]),t._v(" with no arguments\nupon success.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-rmdir-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-rmdir-path-options"}},[t._v("#")]),t._v(" fsPromises.rmdir(path[, options])")]),t._v(" "),s("blockquote",[s("p",[t._v("Stability: 1 - Recursive removal is experimental.")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("emfileWait")]),t._v(" {integer} If an "),s("code",[t._v("EMFILE")]),t._v(" error is encountered, Node.js will\nretry the operation with a linear backoff of 1ms longer on each try until the\ntimeout duration passes this limit. This option is ignored if the "),s("code",[t._v("recursive")]),t._v("\noption is not "),s("code",[t._v("true")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("1000")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("maxBusyTries")]),t._v(" {integer} If an "),s("code",[t._v("EBUSY")]),t._v(", "),s("code",[t._v("ENOTEMPTY")]),t._v(", or "),s("code",[t._v("EPERM")]),t._v(" error is\nencountered, Node.js will retry the operation with a linear backoff wait of\n100ms longer on each try. This option represents the number of retries. This\noption is ignored if the "),s("code",[t._v("recursive")]),t._v(" option is not "),s("code",[t._v("true")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("3")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("recursive")]),t._v(" {boolean} If "),s("code",[t._v("true")]),t._v(", perform a recursive directory removal. In\nrecursive mode, errors are not reported if "),s("code",[t._v("path")]),t._v(" does not exist, and\noperations are retried on failure. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Removes the directory identified by "),s("code",[t._v("path")]),t._v(" then resolves the "),s("code",[t._v("Promise")]),t._v(" with\nno arguments upon success.")]),t._v(" "),s("p",[t._v("Using "),s("code",[t._v("fsPromises.rmdir()")]),t._v(" on a file (not a directory) results in the\n"),s("code",[t._v("Promise")]),t._v(" being rejected with an "),s("code",[t._v("ENOENT")]),t._v(" error on Windows and an "),s("code",[t._v("ENOTDIR")]),t._v("\nerror on POSIX.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-stat-path-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-stat-path-options"}},[t._v("#")]),t._v(" fsPromises.stat(path[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("bigint")]),t._v(" {boolean} Whether the numeric values in the returned\n"),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object should be "),s("code",[t._v("bigint")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("false")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Promise")]),t._v(" is resolved with the "),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object for the given "),s("code",[t._v("path")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"fspromises-symlink-target-path-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-symlink-target-path-type"}},[t._v("#")]),t._v(" fsPromises.symlink(target, path[, type])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("target")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("type")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'file'")])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Creates a symbolic link then resolves the "),s("code",[t._v("Promise")]),t._v(" with no arguments upon\nsuccess.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("type")]),t._v(" argument is only used on Windows platforms and can be one of "),s("code",[t._v("'dir'")]),t._v(",\n"),s("code",[t._v("'file'")]),t._v(", or "),s("code",[t._v("'junction'")]),t._v(". Windows junction points require the destination path\nto be absolute. When using "),s("code",[t._v("'junction'")]),t._v(", the "),s("code",[t._v("target")]),t._v(" argument will\nautomatically be normalized to absolute path.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-truncate-path-len"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-truncate-path-len"}},[t._v("#")]),t._v(" fsPromises.truncate(path[, len])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("len")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0")])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Truncates the "),s("code",[t._v("path")]),t._v(" then resolves the "),s("code",[t._v("Promise")]),t._v(" with no arguments upon\nsuccess. The "),s("code",[t._v("path")]),t._v(" "),s("em",[t._v("must")]),t._v(" be a string or "),s("code",[t._v("Buffer")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"fspromises-unlink-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-unlink-path"}},[t._v("#")]),t._v(" fsPromises.unlink(path)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronous unlink(2). The "),s("code",[t._v("Promise")]),t._v(" is resolved with no arguments upon\nsuccess.")]),t._v(" "),s("h3",{attrs:{id:"fspromises-utimes-path-atime-mtime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-utimes-path-atime-mtime"}},[t._v("#")]),t._v(" fsPromises.utimes(path, atime, mtime)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("path")]),t._v(" {string|Buffer|URL}")]),t._v(" "),s("li",[s("code",[t._v("atime")]),t._v(" {number|string|Date}")]),t._v(" "),s("li",[s("code",[t._v("mtime")]),t._v(" {number|string|Date}")]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Change the file system timestamps of the object referenced by "),s("code",[t._v("path")]),t._v(" then\nresolves the "),s("code",[t._v("Promise")]),t._v(" with no arguments upon success.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("atime")]),t._v(" and "),s("code",[t._v("mtime")]),t._v(" arguments follow these rules:")]),t._v(" "),s("ul",[s("li",[t._v("Values can be either numbers representing Unix epoch time, "),s("code",[t._v("Date")]),t._v("s, or a\nnumeric string like "),s("code",[t._v("'123456789.0'")]),t._v(".")]),t._v(" "),s("li",[t._v("If the value can not be converted to a number, or is "),s("code",[t._v("NaN")]),t._v(", "),s("code",[t._v("Infinity")]),t._v(" or\n"),s("code",[t._v("-Infinity")]),t._v(", an "),s("code",[t._v("Error")]),t._v(" will be thrown.")])]),t._v(" "),s("h3",{attrs:{id:"fspromises-writefile-file-data-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fspromises-writefile-file-data-options"}},[t._v("#")]),t._v(" fsPromises.writeFile(file, data[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("file")]),t._v(" {string|Buffer|URL|FileHandle} filename or "),s("code",[t._v("FileHandle")])]),t._v(" "),s("li",[s("code",[t._v("data")]),t._v(" {string|Buffer|Uint8Array}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object|string}\n"),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string|null} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'utf8'")])]),t._v(" "),s("li",[s("code",[t._v("mode")]),t._v(" {integer} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0o666")])]),t._v(" "),s("li",[s("code",[t._v("flag")]),t._v(" {string} See "),s("a",{attrs:{href:"#fs_file_system_flags"}},[t._v("support of file system "),s("code",[t._v("flags")])]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'w'")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Promise}")])]),t._v(" "),s("p",[t._v("Asynchronously writes data to a file, replacing the file if it already exists.\n"),s("code",[t._v("data")]),t._v(" can be a string or a buffer. The "),s("code",[t._v("Promise")]),t._v(" will be resolved with no\narguments upon success.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("encoding")]),t._v(" option is ignored if "),s("code",[t._v("data")]),t._v(" is a buffer.")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("options")]),t._v(" is a string, then it specifies the encoding.")]),t._v(" "),s("p",[t._v("Any specified "),s("code",[t._v("FileHandle")]),t._v(" has to support writing.")]),t._v(" "),s("p",[t._v("It is unsafe to use "),s("code",[t._v("fsPromises.writeFile()")]),t._v(" multiple times on the same file\nwithout waiting for the "),s("code",[t._v("Promise")]),t._v(" to be resolved (or rejected).")]),t._v(" "),s("h2",{attrs:{id:"fs-constants-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fs-constants-2"}},[t._v("#")]),t._v(" FS Constants")]),t._v(" "),s("p",[t._v("The following constants are exported by "),s("code",[t._v("fs.constants")]),t._v(".")]),t._v(" "),s("p",[t._v("Not every constant will be available on every operating system.")]),t._v(" "),s("h3",{attrs:{id:"file-access-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-access-constants"}},[t._v("#")]),t._v(" File Access Constants")]),t._v(" "),s("p",[t._v("The following constants are meant for use with "),s("a",{attrs:{href:"#fs_fs_access_path_mode_callback"}},[s("code",[t._v("fs.access()")])]),t._v(".")]),t._v(" "),s("table",[s("tr",[s("th",[t._v("Constant")]),t._v(" "),s("th",[t._v("Description")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("F_OK")])]),t._v(" "),s("td",[t._v("Flag indicating that the file is visible to the calling process.\n     This is useful for determining if a file exists, but says nothing\n     about "),s("code",[t._v("rwx")]),t._v(" permissions. Default if no mode is specified.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("R_OK")])]),t._v(" "),s("td",[t._v("Flag indicating that the file can be read by the calling process.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("W_OK")])]),t._v(" "),s("td",[t._v("Flag indicating that the file can be written by the calling\n    process.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("X_OK")])]),t._v(" "),s("td",[t._v("Flag indicating that the file can be executed by the calling\n    process. This has no effect on Windows\n    (will behave like "),s("code",[t._v("fs.constants.F_OK")]),t._v(").")])])]),t._v(" "),s("h3",{attrs:{id:"file-copy-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-copy-constants"}},[t._v("#")]),t._v(" File Copy Constants")]),t._v(" "),s("p",[t._v("The following constants are meant for use with "),s("a",{attrs:{href:"#fs_fs_copyfile_src_dest_flags_callback"}},[s("code",[t._v("fs.copyFile()")])]),t._v(".")]),t._v(" "),s("table",[s("tr",[s("th",[t._v("Constant")]),t._v(" "),s("th",[t._v("Description")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("COPYFILE_EXCL")])]),t._v(" "),s("td",[t._v("If present, the copy operation will fail with an error if the\n    destination path already exists.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("COPYFILE_FICLONE")])]),t._v(" "),s("td",[t._v("If present, the copy operation will attempt to create a\n    copy-on-write reflink. If the underlying platform does not support\n    copy-on-write, then a fallback copy mechanism is used.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("COPYFILE_FICLONE_FORCE")])]),t._v(" "),s("td",[t._v("If present, the copy operation will attempt to create a\n    copy-on-write reflink. If the underlying platform does not support\n    copy-on-write, then the operation will fail with an error.")])])]),t._v(" "),s("h3",{attrs:{id:"file-open-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-open-constants"}},[t._v("#")]),t._v(" File Open Constants")]),t._v(" "),s("p",[t._v("The following constants are meant for use with "),s("code",[t._v("fs.open()")]),t._v(".")]),t._v(" "),s("table",[s("tr",[s("th",[t._v("Constant")]),t._v(" "),s("th",[t._v("Description")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_RDONLY")])]),t._v(" "),s("td",[t._v("Flag indicating to open a file for read-only access.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_WRONLY")])]),t._v(" "),s("td",[t._v("Flag indicating to open a file for write-only access.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_RDWR")])]),t._v(" "),s("td",[t._v("Flag indicating to open a file for read-write access.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_CREAT")])]),t._v(" "),s("td",[t._v("Flag indicating to create the file if it does not already exist.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_EXCL")])]),t._v(" "),s("td",[t._v("Flag indicating that opening a file should fail if the\n    "),s("code",[t._v("O_CREAT")]),t._v(" flag is set and the file already exists.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_NOCTTY")])]),t._v(" "),s("td",[t._v("Flag indicating that if path identifies a terminal device, opening the\n    path shall not cause that terminal to become the controlling terminal for\n    the process (if the process does not already have one).")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_TRUNC")])]),t._v(" "),s("td",[t._v("Flag indicating that if the file exists and is a regular file, and the\n    file is opened successfully for write access, its length shall be truncated\n    to zero.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_APPEND")])]),t._v(" "),s("td",[t._v("Flag indicating that data will be appended to the end of the file.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_DIRECTORY")])]),t._v(" "),s("td",[t._v("Flag indicating that the open should fail if the path is not a\n    directory.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_NOATIME")])]),t._v(" "),s("td",[t._v("Flag indicating reading accesses to the file system will no longer\n    result in an update to the "),s("code",[t._v("atime")]),t._v(" information associated with\n    the file. This flag is available on Linux operating systems only.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_NOFOLLOW")])]),t._v(" "),s("td",[t._v("Flag indicating that the open should fail if the path is a symbolic\n    link.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_SYNC")])]),t._v(" "),s("td",[t._v("Flag indicating that the file is opened for synchronized I/O with write\n    operations waiting for file integrity.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_DSYNC")])]),t._v(" "),s("td",[t._v("Flag indicating that the file is opened for synchronized I/O with write\n    operations waiting for data integrity.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_SYMLINK")])]),t._v(" "),s("td",[t._v("Flag indicating to open the symbolic link itself rather than the\n    resource it is pointing to.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_DIRECT")])]),t._v(" "),s("td",[t._v("When set, an attempt will be made to minimize caching effects of file\n    I/O.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("O_NONBLOCK")])]),t._v(" "),s("td",[t._v("Flag indicating to open the file in nonblocking mode when possible.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("UV_FS_O_FILEMAP")])]),t._v(" "),s("td",[t._v("When set, a memory file mapping is used to access the file. This flag\n    is available on Windows operating systems only. On other operating systems,\n    this flag is ignored.")])])]),t._v(" "),s("h3",{attrs:{id:"file-type-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-type-constants"}},[t._v("#")]),t._v(" File Type Constants")]),t._v(" "),s("p",[t._v("The following constants are meant for use with the "),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object's\n"),s("code",[t._v("mode")]),t._v(" property for determining a file's type.")]),t._v(" "),s("table",[s("tr",[s("th",[t._v("Constant")]),t._v(" "),s("th",[t._v("Description")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IFMT")])]),t._v(" "),s("td",[t._v("Bit mask used to extract the file type code.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IFREG")])]),t._v(" "),s("td",[t._v("File type constant for a regular file.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IFDIR")])]),t._v(" "),s("td",[t._v("File type constant for a directory.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IFCHR")])]),t._v(" "),s("td",[t._v("File type constant for a character-oriented device file.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IFBLK")])]),t._v(" "),s("td",[t._v("File type constant for a block-oriented device file.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IFIFO")])]),t._v(" "),s("td",[t._v("File type constant for a FIFO/pipe.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IFLNK")])]),t._v(" "),s("td",[t._v("File type constant for a symbolic link.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IFSOCK")])]),t._v(" "),s("td",[t._v("File type constant for a socket.")])])]),t._v(" "),s("h3",{attrs:{id:"file-mode-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-mode-constants"}},[t._v("#")]),t._v(" File Mode Constants")]),t._v(" "),s("p",[t._v("The following constants are meant for use with the "),s("a",{attrs:{href:"#fs_class_fs_stats"}},[s("code",[t._v("fs.Stats")])]),t._v(" object's\n"),s("code",[t._v("mode")]),t._v(" property for determining the access permissions for a file.")]),t._v(" "),s("table",[s("tr",[s("th",[t._v("Constant")]),t._v(" "),s("th",[t._v("Description")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IRWXU")])]),t._v(" "),s("td",[t._v("File mode indicating readable, writable, and executable by owner.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IRUSR")])]),t._v(" "),s("td",[t._v("File mode indicating readable by owner.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IWUSR")])]),t._v(" "),s("td",[t._v("File mode indicating writable by owner.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IXUSR")])]),t._v(" "),s("td",[t._v("File mode indicating executable by owner.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IRWXG")])]),t._v(" "),s("td",[t._v("File mode indicating readable, writable, and executable by group.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IRGRP")])]),t._v(" "),s("td",[t._v("File mode indicating readable by group.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IWGRP")])]),t._v(" "),s("td",[t._v("File mode indicating writable by group.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IXGRP")])]),t._v(" "),s("td",[t._v("File mode indicating executable by group.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IRWXO")])]),t._v(" "),s("td",[t._v("File mode indicating readable, writable, and executable by others.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IROTH")])]),t._v(" "),s("td",[t._v("File mode indicating readable by others.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IWOTH")])]),t._v(" "),s("td",[t._v("File mode indicating writable by others.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("S_IXOTH")])]),t._v(" "),s("td",[t._v("File mode indicating executable by others.")])])]),t._v(" "),s("h2",{attrs:{id:"file-system-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-system-flags"}},[t._v("#")]),t._v(" File System Flags")]),t._v(" "),s("p",[t._v("The following flags are available wherever the "),s("code",[t._v("flag")]),t._v(" option takes a\nstring.")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("'a'")]),t._v(": Open file for appending.\nThe file is created if it does not exist.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("'ax'")]),t._v(": Like "),s("code",[t._v("'a'")]),t._v(" but fails if the path exists.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("'a+'")]),t._v(": Open file for reading and appending.\nThe file is created if it does not exist.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("'ax+'")]),t._v(": Like "),s("code",[t._v("'a+'")]),t._v(" but fails if the path exists.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("'as'")]),t._v(": Open file for appending in synchronous mode.\nThe file is created if it does not exist.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("'as+'")]),t._v(": Open file for reading and appending in synchronous mode.\nThe file is created if it does not exist.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("'r'")]),t._v(": Open file for reading.\nAn exception occurs if the file does not exist.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("'r+'")]),t._v(": Open file for reading and writing.\nAn exception occurs if the file does not exist.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("'rs+'")]),t._v(": Open file for reading and writing in synchronous mode. Instructs\nthe operating system to bypass the local file system cache.")]),t._v(" "),s("p",[t._v("This is primarily useful for opening files on NFS mounts as it allows\nskipping the potentially stale local cache. It has a very real impact on\nI/O performance so using this flag is not recommended unless it is needed.")]),t._v(" "),s("p",[t._v("This doesn't turn "),s("code",[t._v("fs.open()")]),t._v(" or "),s("code",[t._v("fsPromises.open()")]),t._v(" into a synchronous\nblocking call. If synchronous operation is desired, something like\n"),s("code",[t._v("fs.openSync()")]),t._v(" should be used.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("'w'")]),t._v(": Open file for writing.\nThe file is created (if it does not exist) or truncated (if it exists).")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("'wx'")]),t._v(": Like "),s("code",[t._v("'w'")]),t._v(" but fails if the path exists.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("'w+'")]),t._v(": Open file for reading and writing.\nThe file is created (if it does not exist) or truncated (if it exists).")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("'wx+'")]),t._v(": Like "),s("code",[t._v("'w+'")]),t._v(" but fails if the path exists.")])])]),t._v(" "),s("p",[s("code",[t._v("flag")]),t._v(" can also be a number as documented by open(2); commonly used constants\nare available from "),s("code",[t._v("fs.constants")]),t._v(". On Windows, flags are translated to\ntheir equivalent ones where applicable, e.g. "),s("code",[t._v("O_WRONLY")]),t._v(" to "),s("code",[t._v("FILE_GENERIC_WRITE")]),t._v(",\nor "),s("code",[t._v("O_EXCL|O_CREAT")]),t._v(" to "),s("code",[t._v("CREATE_NEW")]),t._v(", as accepted by "),s("code",[t._v("CreateFileW")]),t._v(".")]),t._v(" "),s("p",[t._v("The exclusive flag "),s("code",[t._v("'x'")]),t._v(" ("),s("code",[t._v("O_EXCL")]),t._v(" flag in open(2)) ensures that path is newly\ncreated. On POSIX systems, path is considered to exist even if it is a symlink\nto a non-existent file. The exclusive flag may or may not work with network\nfile systems.")]),t._v(" "),s("p",[t._v("On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.")]),t._v(" "),s("p",[t._v("Modifying a file rather than replacing it may require a flags mode of "),s("code",[t._v("'r+'")]),t._v("\nrather than the default mode "),s("code",[t._v("'w'")]),t._v(".")]),t._v(" "),s("p",[t._v("The behavior of some flags are platform-specific. As such, opening a directory\non macOS and Linux with the "),s("code",[t._v("'a+'")]),t._v(" flag, as in the example below, will return an\nerror. In contrast, on Windows and FreeBSD, a file descriptor or a "),s("code",[t._v("FileHandle")]),t._v("\nwill be returned.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// macOS and Linux")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<directory>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a+'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => [Error: EISDIR: illegal operation on a directory, open <directory>]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Windows and FreeBSD")]),t._v("\nfs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<directory>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a+'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => null, <fd>")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("On Windows, opening an existing hidden file using the "),s("code",[t._v("'w'")]),t._v(" flag (either\nthrough "),s("code",[t._v("fs.open()")]),t._v(" or "),s("code",[t._v("fs.writeFile()")]),t._v(" or "),s("code",[t._v("fsPromises.open()")]),t._v(") will fail with\n"),s("code",[t._v("EPERM")]),t._v(". Existing hidden files can be opened for writing with the "),s("code",[t._v("'r+'")]),t._v(" flag.")]),t._v(" "),s("p",[t._v("A call to "),s("code",[t._v("fs.ftruncate()")]),t._v(" or "),s("code",[t._v("filehandle.truncate()")]),t._v(" can be used to reset\nthe file contents.")])])}),[],!1,null,null,null);e.default=n.exports}}]);