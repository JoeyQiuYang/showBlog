(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{224:function(e,t,n){"use strict";n.r(t);var s=n(3),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"net"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net"}},[e._v("#")]),e._v(" Net")]),e._v(" "),n("blockquote",[n("p",[e._v("Stability: 2 - Stable")])]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("net")]),e._v(" module provides an asynchronous network API for creating stream-based\nTCP or "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" servers ("),n("a",{attrs:{href:"#net_net_createserver_options_connectionlistener"}},[n("code",[e._v("net.createServer()")])]),e._v(") and clients\n("),n("a",{attrs:{href:"#net_net_createconnection"}},[n("code",[e._v("net.createConnection()")])]),e._v(").")]),e._v(" "),n("p",[e._v("It can be accessed using:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" net "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'net'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("h2",{attrs:{id:"ipc-support"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ipc-support"}},[e._v("#")]),e._v(" IPC Support")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("net")]),e._v(" module supports IPC with named pipes on Windows, and Unix domain\nsockets on other operating systems.")]),e._v(" "),n("h3",{attrs:{id:"identifying-paths-for-ipc-connections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#identifying-paths-for-ipc-connections"}},[e._v("#")]),e._v(" Identifying paths for IPC connections")]),e._v(" "),n("p",[n("a",{attrs:{href:"#net_net_connect"}},[n("code",[e._v("net.connect()")])]),e._v(", "),n("a",{attrs:{href:"#net_net_createconnection"}},[n("code",[e._v("net.createConnection()")])]),e._v(", "),n("a",{attrs:{href:"#net_server_listen"}},[n("code",[e._v("server.listen()")])]),e._v(" and\n"),n("a",{attrs:{href:"#net_socket_connect"}},[n("code",[e._v("socket.connect()")])]),e._v(" take a "),n("code",[e._v("path")]),e._v(" parameter to identify IPC endpoints.")]),e._v(" "),n("p",[e._v("On Unix, the local domain is also known as the Unix domain. The path is a\nfilesystem pathname. It gets truncated to a length of\n"),n("code",[e._v("sizeof(sockaddr_un.sun_path) - 1")]),e._v(", which varies 91 and 107 bytes depending on\nthe operating system. The typical values are 107 on Linux and 103 on macOS. The\npath is subject to the same naming conventions and permissions checks as would\nbe done on file creation. If the Unix domain socket (that is visible as a file\nsystem path) is created and used in conjunction with one of Node.js' API\nabstractions such as "),n("a",{attrs:{href:"#net_net_createserver_options_connectionlistener"}},[n("code",[e._v("net.createServer()")])]),e._v(", it will be unlinked as part of\n"),n("a",{attrs:{href:"#net_server_close_callback"}},[n("code",[e._v("server.close()")])]),e._v(". On the other hand, if it is created and used outside of\nthese abstractions, the user will need to manually remove it. The same applies\nwhen the path was created by a Node.js API but the program crashes abruptly.\nIn short, a Unix domain socket once successfully created will be visible in the\nfilesystem, and will persist until unlinked.")]),e._v(" "),n("p",[e._v("On Windows, the local domain is implemented using a named pipe. The path "),n("em",[e._v("must")]),e._v("\nrefer to an entry in "),n("code",[e._v("\\\\?\\pipe\\")]),e._v(" or "),n("code",[e._v("\\\\.\\pipe\\")]),e._v(". Any characters are permitted,\nbut the latter may do some processing of pipe names, such as resolving "),n("code",[e._v("..")]),e._v("\nsequences. Despite how it might look, the pipe namespace is flat. Pipes will\n"),n("em",[e._v("not persist")]),e._v(". They are removed when the last reference to them is closed.\nUnlike Unix domain sockets, Windows will close and remove the pipe when the\nowning process exits.")]),e._v(" "),n("p",[e._v("JavaScript string escaping requires paths to be specified with extra backslash\nescaping such as:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[e._v("net"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("createServer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n  path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\\\\\\\?\\\\pipe'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("cwd")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'myctl'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("h2",{attrs:{id:"class-net-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-net-server"}},[e._v("#")]),e._v(" Class: net.Server")]),e._v(" "),n("ul",[n("li",[e._v("Extends: {EventEmitter}")])]),e._v(" "),n("p",[e._v("This class is used to create a TCP or "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" server.")]),e._v(" "),n("h3",{attrs:{id:"new-net-server-options-connectionlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#new-net-server-options-connectionlistener"}},[e._v("#")]),e._v(" new net.Server([options][, connectionListener])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("options")]),e._v(" {Object} See\n"),n("a",{attrs:{href:"#net_net_createserver_options_connectionlistener"}},[n("code",[e._v("net.createServer([options][, connectionListener])")])]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("connectionListener")]),e._v(" {Function} Automatically set as a listener for the\n"),n("a",{attrs:{href:"#net_event_connection"}},[n("code",[e._v("'connection'")])]),e._v(" event.")]),e._v(" "),n("li",[e._v("Returns: {net.Server}")])]),e._v(" "),n("p",[n("code",[e._v("net.Server")]),e._v(" is an "),n("router-link",{attrs:{to:"/node/events.html#events_class_eventemitter"}},[n("code",[e._v("EventEmitter")])]),e._v(" with the following events:")],1),e._v(" "),n("h3",{attrs:{id:"event-close"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-close"}},[e._v("#")]),e._v(" Event: 'close'")]),e._v(" "),n("p",[e._v("Emitted when the server closes. If connections exist, this\nevent is not emitted until all connections are ended.")]),e._v(" "),n("h3",{attrs:{id:"event-connection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-connection"}},[e._v("#")]),e._v(" Event: 'connection'")]),e._v(" "),n("ul",[n("li",[e._v("{net.Socket} The connection object")])]),e._v(" "),n("p",[e._v("Emitted when a new connection is made. "),n("code",[e._v("socket")]),e._v(" is an instance of\n"),n("code",[e._v("net.Socket")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"event-error"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-error"}},[e._v("#")]),e._v(" Event: 'error'")]),e._v(" "),n("ul",[n("li",[e._v("{Error}")])]),e._v(" "),n("p",[e._v("Emitted when an error occurs. Unlike "),n("a",{attrs:{href:"#net_class_net_socket"}},[n("code",[e._v("net.Socket")])]),e._v(", the "),n("a",{attrs:{href:"#net_event_close"}},[n("code",[e._v("'close'")])]),e._v("\nevent will "),n("strong",[e._v("not")]),e._v(" be emitted directly following this event unless\n"),n("a",{attrs:{href:"#net_server_close_callback"}},[n("code",[e._v("server.close()")])]),e._v(" is manually called. See the example in discussion of\n"),n("a",{attrs:{href:"#net_server_listen"}},[n("code",[e._v("server.listen()")])]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"event-listening"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-listening"}},[e._v("#")]),e._v(" Event: 'listening'")]),e._v(" "),n("p",[e._v("Emitted when the server has been bound after calling "),n("a",{attrs:{href:"#net_server_listen"}},[n("code",[e._v("server.listen()")])]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"server-address"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-address"}},[e._v("#")]),e._v(" server.address()")]),e._v(" "),n("ul",[n("li",[e._v("Returns: {Object|string}")])]),e._v(" "),n("p",[e._v("Returns the bound "),n("code",[e._v("address")]),e._v(", the address "),n("code",[e._v("family")]),e._v(" name, and "),n("code",[e._v("port")]),e._v(" of the server\nas reported by the operating system if listening on an IP socket\n(useful to find which port was assigned when getting an OS-assigned address):\n"),n("code",[e._v("{ port: 12346, family: 'IPv4', address: '127.0.0.1' }")]),e._v(".")]),e._v(" "),n("p",[e._v("For a server listening on a pipe or Unix domain socket, the name is returned\nas a string.")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" server "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" net"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("createServer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'goodbye\\n'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'error'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("err")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Handle errors here.")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throw")]),e._v(" err"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Grab an arbitrary unused port.")]),e._v("\nserver"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'opened server on'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[e._v("Don't call "),n("code",[e._v("server.address()")]),e._v(" until the "),n("code",[e._v("'listening'")]),e._v(" event has been emitted.")]),e._v(" "),n("h3",{attrs:{id:"server-close-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-close-callback"}},[e._v("#")]),e._v(" server.close([callback])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("callback")]),e._v(" {Function} Called when the server is closed.")]),e._v(" "),n("li",[e._v("Returns: {net.Server}")])]),e._v(" "),n("p",[e._v("Stops the server from accepting new connections and keeps existing\nconnections. This function is asynchronous, the server is finally closed\nwhen all connections are ended and the server emits a "),n("a",{attrs:{href:"#net_event_close"}},[n("code",[e._v("'close'")])]),e._v(" event.\nThe optional "),n("code",[e._v("callback")]),e._v(" will be called once the "),n("code",[e._v("'close'")]),e._v(" event occurs. Unlike\nthat event, it will be called with an "),n("code",[e._v("Error")]),e._v(" as its only argument if the server\nwas not open when it was closed.")]),e._v(" "),n("h3",{attrs:{id:"server-connections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-connections"}},[e._v("#")]),e._v(" server.connections")]),e._v(" "),n("blockquote",[n("p",[e._v("Stability: 0 - Deprecated: Use "),n("a",{attrs:{href:"#net_server_getconnections_callback"}},[n("code",[e._v("server.getConnections()")])]),e._v(" instead.")])]),e._v(" "),n("ul",[n("li",[e._v("{integer|null}")])]),e._v(" "),n("p",[e._v("The number of concurrent connections on the server.")]),e._v(" "),n("p",[e._v("This becomes "),n("code",[e._v("null")]),e._v(" when sending a socket to a child with\n"),n("router-link",{attrs:{to:"/node/child_process.html#child_process_child_process_fork_modulepath_args_options"}},[n("code",[e._v("child_process.fork()")])]),e._v(". To poll forks and get current number of active\nconnections, use asynchronous "),n("a",{attrs:{href:"#net_server_getconnections_callback"}},[n("code",[e._v("server.getConnections()")])]),e._v(" instead.")],1),e._v(" "),n("h3",{attrs:{id:"server-getconnections-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-getconnections-callback"}},[e._v("#")]),e._v(" server.getConnections(callback)")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("callback")]),e._v(" {Function}")]),e._v(" "),n("li",[e._v("Returns: {net.Server}")])]),e._v(" "),n("p",[e._v("Asynchronously get the number of concurrent connections on the server. Works\nwhen sockets were sent to forks.")]),e._v(" "),n("p",[e._v("Callback should take two arguments "),n("code",[e._v("err")]),e._v(" and "),n("code",[e._v("count")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"server-listen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-listen"}},[e._v("#")]),e._v(" server.listen()")]),e._v(" "),n("p",[e._v("Start a server listening for connections. A "),n("code",[e._v("net.Server")]),e._v(" can be a TCP or\nan "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" server depending on what it listens to.")]),e._v(" "),n("p",[e._v("Possible signatures:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#net_server_listen_handle_backlog_callback"}},[n("code",[e._v("server.listen(handle[, backlog][, callback])")])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#net_server_listen_options_callback"}},[n("code",[e._v("server.listen(options[, callback])")])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#net_server_listen_path_backlog_callback"}},[n("code",[e._v("server.listen(path[, backlog][, callback])")])]),e._v("\nfor "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" servers")]),e._v(" "),n("li",[n("a",{attrs:{href:"#net_server_listen_port_host_backlog_callback"}},[n("code",[e._v("server.listen([port[, host[, backlog]]][, callback])")])]),e._v("\nfor TCP servers\n")])]),e._v(" "),n("p",[e._v("This function is asynchronous. When the server starts listening, the\n"),n("a",{attrs:{href:"#net_event_listening"}},[n("code",[e._v("'listening'")])]),e._v(" event will be emitted. The last parameter "),n("code",[e._v("callback")]),e._v("\nwill be added as a listener for the "),n("a",{attrs:{href:"#net_event_listening"}},[n("code",[e._v("'listening'")])]),e._v(" event.")]),e._v(" "),n("p",[e._v("All "),n("code",[e._v("listen()")]),e._v(" methods can take a "),n("code",[e._v("backlog")]),e._v(" parameter to specify the maximum\nlength of the queue of pending connections. The actual length will be determined\nby the OS through sysctl settings such as "),n("code",[e._v("tcp_max_syn_backlog")]),e._v(" and "),n("code",[e._v("somaxconn")]),e._v("\non Linux. The default value of this parameter is 511 (not 512).")]),e._v(" "),n("p",[e._v("All "),n("a",{attrs:{href:"#net_class_net_socket"}},[n("code",[e._v("net.Socket")])]),e._v(" are set to "),n("code",[e._v("SO_REUSEADDR")]),e._v(" (see "),n("a",{attrs:{href:"http://man7.org/linux/man-pages/man7/socket.7.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("socket(7)")]),n("OutboundLink")],1),e._v(" for\ndetails).")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("server.listen()")]),e._v(" method can be called again if and only if there was an\nerror during the first "),n("code",[e._v("server.listen()")]),e._v(" call or "),n("code",[e._v("server.close()")]),e._v(" has been\ncalled. Otherwise, an "),n("code",[e._v("ERR_SERVER_ALREADY_LISTEN")]),e._v(" error will be thrown.")]),e._v(" "),n("p",[e._v("One of the most common errors raised when listening is "),n("code",[e._v("EADDRINUSE")]),e._v(".\nThis happens when another server is already listening on the requested\n"),n("code",[e._v("port")]),e._v("/"),n("code",[e._v("path")]),e._v("/"),n("code",[e._v("handle")]),e._v(". One way to handle this would be to retry\nafter a certain amount of time:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[e._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'error'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("code "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'EADDRINUSE'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Address in use, retrying...'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n      server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[e._v("PORT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[e._v("HOST")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("h4",{attrs:{id:"server-listen-handle-backlog-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-listen-handle-backlog-callback"}},[e._v("#")]),e._v(" server.listen(handle[, backlog][, callback])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("handle")]),e._v(" {Object}")]),e._v(" "),n("li",[n("code",[e._v("backlog")]),e._v(" {number} Common parameter of "),n("a",{attrs:{href:"#net_server_listen"}},[n("code",[e._v("server.listen()")])]),e._v(" functions")]),e._v(" "),n("li",[n("code",[e._v("callback")]),e._v(" {Function} Common parameter of "),n("a",{attrs:{href:"#net_server_listen"}},[n("code",[e._v("server.listen()")])]),e._v(" functions")]),e._v(" "),n("li",[e._v("Returns: {net.Server}")])]),e._v(" "),n("p",[e._v("Start a server listening for connections on a given "),n("code",[e._v("handle")]),e._v(" that has\nalready been bound to a port, a Unix domain socket, or a Windows named pipe.")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("handle")]),e._v(" object can be either a server, a socket (anything with an\nunderlying "),n("code",[e._v("_handle")]),e._v(" member), or an object with an "),n("code",[e._v("fd")]),e._v(" member that is a\nvalid file descriptor.")]),e._v(" "),n("p",[e._v("Listening on a file descriptor is not supported on Windows.")]),e._v(" "),n("h4",{attrs:{id:"server-listen-options-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-listen-options-callback"}},[e._v("#")]),e._v(" server.listen(options[, callback])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("options")]),e._v(" {Object} Required. Supports the following properties:\n"),n("ul",[n("li",[n("code",[e._v("port")]),e._v(" {number}")]),e._v(" "),n("li",[n("code",[e._v("host")]),e._v(" {string}")]),e._v(" "),n("li",[n("code",[e._v("path")]),e._v(" {string} Will be ignored if "),n("code",[e._v("port")]),e._v(" is specified. See\n"),n("a",{attrs:{href:"#net_identifying_paths_for_ipc_connections"}},[e._v("Identifying paths for IPC connections")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("backlog")]),e._v(" {number} Common parameter of "),n("a",{attrs:{href:"#net_server_listen"}},[n("code",[e._v("server.listen()")])]),e._v("\nfunctions.")]),e._v(" "),n("li",[n("code",[e._v("exclusive")]),e._v(" {boolean} "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("false")])]),e._v(" "),n("li",[n("code",[e._v("readableAll")]),e._v(" {boolean} For IPC servers makes the pipe readable\nfor all users. "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("false")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("writableAll")]),e._v(" {boolean} For IPC servers makes the pipe writable\nfor all users. "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("false")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("ipv6Only")]),e._v(" {boolean} For TCP servers, setting "),n("code",[e._v("ipv6Only")]),e._v(" to "),n("code",[e._v("true")]),e._v(" will\ndisable dual-stack support, i.e., binding to host "),n("code",[e._v("::")]),e._v(" won't make\n"),n("code",[e._v("0.0.0.0")]),e._v(" be bound. "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("false")]),e._v(".")])])]),e._v(" "),n("li",[n("code",[e._v("callback")]),e._v(" {Function} Common parameter of "),n("a",{attrs:{href:"#net_server_listen"}},[n("code",[e._v("server.listen()")])]),e._v("\nfunctions.")]),e._v(" "),n("li",[e._v("Returns: {net.Server}")])]),e._v(" "),n("p",[e._v("If "),n("code",[e._v("port")]),e._v(" is specified, it behaves the same as\n"),n("a",{attrs:{href:"#net_server_listen_port_host_backlog_callback"}},[n("code",[e._v("server.listen([port[, host[, backlog]]][, callback])")])]),e._v(".\nOtherwise, if "),n("code",[e._v("path")]),e._v(" is specified, it behaves the same as\n"),n("a",{attrs:{href:"#net_server_listen_path_backlog_callback"}},[n("code",[e._v("server.listen(path[, backlog][, callback])")])]),e._v(".\nIf none of them is specified, an error will be thrown.")]),e._v(" "),n("p",[e._v("If "),n("code",[e._v("exclusive")]),e._v(" is "),n("code",[e._v("false")]),e._v(" (default), then cluster workers will use the same\nunderlying handle, allowing connection handling duties to be shared. When\n"),n("code",[e._v("exclusive")]),e._v(" is "),n("code",[e._v("true")]),e._v(", the handle is not shared, and attempted port sharing\nresults in an error. An example which listens on an exclusive port is\nshown below.")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[e._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  host"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'localhost'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  exclusive"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[e._v("Starting an IPC server as root may cause the server path to be inaccessible for\nunprivileged users. Using "),n("code",[e._v("readableAll")]),e._v(" and "),n("code",[e._v("writableAll")]),e._v(" will make the server\naccessible for all users.")]),e._v(" "),n("h4",{attrs:{id:"server-listen-path-backlog-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-listen-path-backlog-callback"}},[e._v("#")]),e._v(" server.listen(path[, backlog][, callback])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("path")]),e._v(" {string} Path the server should listen to. See\n"),n("a",{attrs:{href:"#net_identifying_paths_for_ipc_connections"}},[e._v("Identifying paths for IPC connections")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("backlog")]),e._v(" {number} Common parameter of "),n("a",{attrs:{href:"#net_server_listen"}},[n("code",[e._v("server.listen()")])]),e._v(" functions.")]),e._v(" "),n("li",[n("code",[e._v("callback")]),e._v(" {Function} Common parameter of "),n("a",{attrs:{href:"#net_server_listen"}},[n("code",[e._v("server.listen()")])]),e._v(" functions.")]),e._v(" "),n("li",[e._v("Returns: {net.Server}")])]),e._v(" "),n("p",[e._v("Start an "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" server listening for connections on the given "),n("code",[e._v("path")]),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"server-listen-port-host-backlog-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-listen-port-host-backlog-callback"}},[e._v("#")]),e._v(" server.listen([port[, host[, backlog]]][, callback])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("port")]),e._v(" {number}")]),e._v(" "),n("li",[n("code",[e._v("host")]),e._v(" {string}")]),e._v(" "),n("li",[n("code",[e._v("backlog")]),e._v(" {number} Common parameter of "),n("a",{attrs:{href:"#net_server_listen"}},[n("code",[e._v("server.listen()")])]),e._v(" functions.")]),e._v(" "),n("li",[n("code",[e._v("callback")]),e._v(" {Function} Common parameter of "),n("a",{attrs:{href:"#net_server_listen"}},[n("code",[e._v("server.listen()")])]),e._v(" functions.")]),e._v(" "),n("li",[e._v("Returns: {net.Server}")])]),e._v(" "),n("p",[e._v("Start a TCP server listening for connections on the given "),n("code",[e._v("port")]),e._v(" and "),n("code",[e._v("host")]),e._v(".")]),e._v(" "),n("p",[e._v("If "),n("code",[e._v("port")]),e._v(" is omitted or is 0, the operating system will assign an arbitrary\nunused port, which can be retrieved by using "),n("code",[e._v("server.address().port")]),e._v("\nafter the "),n("a",{attrs:{href:"#net_event_listening"}},[n("code",[e._v("'listening'")])]),e._v(" event has been emitted.")]),e._v(" "),n("p",[e._v("If "),n("code",[e._v("host")]),e._v(" is omitted, the server will accept connections on the\n"),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address",target:"_blank",rel:"noopener noreferrer"}},[e._v("unspecified IPv6 address"),n("OutboundLink")],1),e._v(" ("),n("code",[e._v("::")]),e._v(") when IPv6 is available, or the\n"),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/0.0.0.0",target:"_blank",rel:"noopener noreferrer"}},[e._v("unspecified IPv4 address"),n("OutboundLink")],1),e._v(" ("),n("code",[e._v("0.0.0.0")]),e._v(") otherwise.")]),e._v(" "),n("p",[e._v("In most operating systems, listening to the "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address",target:"_blank",rel:"noopener noreferrer"}},[e._v("unspecified IPv6 address"),n("OutboundLink")],1),e._v(" ("),n("code",[e._v("::")]),e._v(")\nmay cause the "),n("code",[e._v("net.Server")]),e._v(" to also listen on the "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/0.0.0.0",target:"_blank",rel:"noopener noreferrer"}},[e._v("unspecified IPv4 address"),n("OutboundLink")],1),e._v("\n("),n("code",[e._v("0.0.0.0")]),e._v(").")]),e._v(" "),n("h3",{attrs:{id:"server-listening"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-listening"}},[e._v("#")]),e._v(" server.listening")]),e._v(" "),n("ul",[n("li",[e._v("{boolean} Indicates whether or not the server is listening for connections.")])]),e._v(" "),n("h3",{attrs:{id:"server-maxconnections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-maxconnections"}},[e._v("#")]),e._v(" server.maxConnections")]),e._v(" "),n("ul",[n("li",[e._v("{integer}")])]),e._v(" "),n("p",[e._v("Set this property to reject connections when the server's connection count gets\nhigh.")]),e._v(" "),n("p",[e._v("It is not recommended to use this option once a socket has been sent to a child\nwith "),n("router-link",{attrs:{to:"/node/child_process.html#child_process_child_process_fork_modulepath_args_options"}},[n("code",[e._v("child_process.fork()")])]),e._v(".")],1),e._v(" "),n("h3",{attrs:{id:"server-ref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-ref"}},[e._v("#")]),e._v(" server.ref()")]),e._v(" "),n("ul",[n("li",[e._v("Returns: {net.Server}")])]),e._v(" "),n("p",[e._v("Opposite of "),n("code",[e._v("unref()")]),e._v(", calling "),n("code",[e._v("ref()")]),e._v(" on a previously "),n("code",[e._v("unref")]),e._v("ed server will\n"),n("em",[e._v("not")]),e._v(" let the program exit if it's the only server left (the default behavior).\nIf the server is "),n("code",[e._v("ref")]),e._v("ed calling "),n("code",[e._v("ref()")]),e._v(" again will have no effect.")]),e._v(" "),n("h3",{attrs:{id:"server-unref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-unref"}},[e._v("#")]),e._v(" server.unref()")]),e._v(" "),n("ul",[n("li",[e._v("Returns: {net.Server}")])]),e._v(" "),n("p",[e._v("Calling "),n("code",[e._v("unref()")]),e._v(" on a server will allow the program to exit if this is the only\nactive server in the event system. If the server is already "),n("code",[e._v("unref")]),e._v("ed calling\n"),n("code",[e._v("unref()")]),e._v(" again will have no effect.")]),e._v(" "),n("h2",{attrs:{id:"class-net-socket"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-net-socket"}},[e._v("#")]),e._v(" Class: net.Socket")]),e._v(" "),n("ul",[n("li",[e._v("Extends: {stream.Duplex}")])]),e._v(" "),n("p",[e._v("This class is an abstraction of a TCP socket or a streaming "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" endpoint\n(uses named pipes on Windows, and Unix domain sockets otherwise). It is also\nan "),n("router-link",{attrs:{to:"/node/events.html#events_class_eventemitter"}},[n("code",[e._v("EventEmitter")])]),e._v(".")],1),e._v(" "),n("p",[e._v("A "),n("code",[e._v("net.Socket")]),e._v(" can be created by the user and used directly to interact with\na server. For example, it is returned by "),n("a",{attrs:{href:"#net_net_createconnection"}},[n("code",[e._v("net.createConnection()")])]),e._v(",\nso the user can use it to talk to the server.")]),e._v(" "),n("p",[e._v("It can also be created by Node.js and passed to the user when a connection\nis received. For example, it is passed to the listeners of a\n"),n("a",{attrs:{href:"#net_event_connection"}},[n("code",[e._v("'connection'")])]),e._v(" event emitted on a "),n("a",{attrs:{href:"#net_class_net_server"}},[n("code",[e._v("net.Server")])]),e._v(", so the user can use\nit to interact with the client.")]),e._v(" "),n("h3",{attrs:{id:"new-net-socket-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#new-net-socket-options"}},[e._v("#")]),e._v(" new net.Socket([options])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("options")]),e._v(" {Object} Available options are:\n"),n("ul",[n("li",[n("code",[e._v("fd")]),e._v(" {number} If specified, wrap around an existing socket with\nthe given file descriptor, otherwise a new socket will be created.")]),e._v(" "),n("li",[n("code",[e._v("allowHalfOpen")]),e._v(" {boolean} Indicates whether half-opened TCP connections\nare allowed. See "),n("a",{attrs:{href:"#net_net_createserver_options_connectionlistener"}},[n("code",[e._v("net.createServer()")])]),e._v(" and the "),n("a",{attrs:{href:"#net_event_end"}},[n("code",[e._v("'end'")])]),e._v(" event\nfor details. "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("false")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("readable")]),e._v(" {boolean} Allow reads on the socket when an "),n("code",[e._v("fd")]),e._v(" is passed,\notherwise ignored. "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("false")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("writable")]),e._v(" {boolean} Allow writes on the socket when an "),n("code",[e._v("fd")]),e._v(" is passed,\notherwise ignored. "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("false")]),e._v(".")])])]),e._v(" "),n("li",[e._v("Returns: {net.Socket}")])]),e._v(" "),n("p",[e._v("Creates a new socket object.")]),e._v(" "),n("p",[e._v("The newly created socket can be either a TCP socket or a streaming "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v("\nendpoint, depending on what it "),n("a",{attrs:{href:"#net_socket_connect"}},[n("code",[e._v("connect()")])]),e._v(" to.")]),e._v(" "),n("h3",{attrs:{id:"event-close-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-close-2"}},[e._v("#")]),e._v(" Event: 'close'")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("hadError")]),e._v(" {boolean} "),n("code",[e._v("true")]),e._v(" if the socket had a transmission error.")])]),e._v(" "),n("p",[e._v("Emitted once the socket is fully closed. The argument "),n("code",[e._v("hadError")]),e._v(" is a boolean\nwhich says if the socket was closed due to a transmission error.")]),e._v(" "),n("h3",{attrs:{id:"event-connect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-connect"}},[e._v("#")]),e._v(" Event: 'connect'")]),e._v(" "),n("p",[e._v("Emitted when a socket connection is successfully established.\nSee "),n("a",{attrs:{href:"#net_net_createconnection"}},[n("code",[e._v("net.createConnection()")])]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"event-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-data"}},[e._v("#")]),e._v(" Event: 'data'")]),e._v(" "),n("ul",[n("li",[e._v("{Buffer|string}")])]),e._v(" "),n("p",[e._v("Emitted when data is received. The argument "),n("code",[e._v("data")]),e._v(" will be a "),n("code",[e._v("Buffer")]),e._v(" or\n"),n("code",[e._v("String")]),e._v(". Encoding of data is set by "),n("a",{attrs:{href:"#net_socket_setencoding_encoding"}},[n("code",[e._v("socket.setEncoding()")])]),e._v(".")]),e._v(" "),n("p",[e._v("The data will be lost if there is no listener when a "),n("code",[e._v("Socket")]),e._v("\nemits a "),n("code",[e._v("'data'")]),e._v(" event.")]),e._v(" "),n("h3",{attrs:{id:"event-drain"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-drain"}},[e._v("#")]),e._v(" Event: 'drain'")]),e._v(" "),n("p",[e._v("Emitted when the write buffer becomes empty. Can be used to throttle uploads.")]),e._v(" "),n("p",[e._v("See also: the return values of "),n("code",[e._v("socket.write()")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"event-end"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-end"}},[e._v("#")]),e._v(" Event: 'end'")]),e._v(" "),n("p",[e._v("Emitted when the other end of the socket sends a FIN packet, thus ending the\nreadable side of the socket.")]),e._v(" "),n("p",[e._v("By default ("),n("code",[e._v("allowHalfOpen")]),e._v(" is "),n("code",[e._v("false")]),e._v(") the socket will send a FIN packet\nback and destroy its file descriptor once it has written out its pending\nwrite queue. However, if "),n("code",[e._v("allowHalfOpen")]),e._v(" is set to "),n("code",[e._v("true")]),e._v(", the socket will\nnot automatically "),n("a",{attrs:{href:"#net_socket_end_data_encoding_callback"}},[n("code",[e._v("end()")])]),e._v(" its writable side, allowing the\nuser to write arbitrary amounts of data. The user must call\n"),n("a",{attrs:{href:"#net_socket_end_data_encoding_callback"}},[n("code",[e._v("end()")])]),e._v(" explicitly to close the connection (i.e. sending a\nFIN packet back).")]),e._v(" "),n("h3",{attrs:{id:"event-error-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-error-2"}},[e._v("#")]),e._v(" Event: 'error'")]),e._v(" "),n("ul",[n("li",[e._v("{Error}")])]),e._v(" "),n("p",[e._v("Emitted when an error occurs. The "),n("code",[e._v("'close'")]),e._v(" event will be called directly\nfollowing this event.")]),e._v(" "),n("h3",{attrs:{id:"event-lookup"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-lookup"}},[e._v("#")]),e._v(" Event: 'lookup'")]),e._v(" "),n("p",[e._v("Emitted after resolving the hostname but before connecting.\nNot applicable to Unix sockets.")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("err")]),e._v(" {Error|null} The error object. See "),n("router-link",{attrs:{to:"/node/dns.html#dns_dns_lookup_hostname_options_callback"}},[n("code",[e._v("dns.lookup()")])]),e._v(".")],1),e._v(" "),n("li",[n("code",[e._v("address")]),e._v(" {string} The IP address.")]),e._v(" "),n("li",[n("code",[e._v("family")]),e._v(" {string|null} The address type. See "),n("router-link",{attrs:{to:"/node/dns.html#dns_dns_lookup_hostname_options_callback"}},[n("code",[e._v("dns.lookup()")])]),e._v(".")],1),e._v(" "),n("li",[n("code",[e._v("host")]),e._v(" {string} The hostname.")])]),e._v(" "),n("h3",{attrs:{id:"event-ready"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-ready"}},[e._v("#")]),e._v(" Event: 'ready'")]),e._v(" "),n("p",[e._v("Emitted when a socket is ready to be used.")]),e._v(" "),n("p",[e._v("Triggered immediately after "),n("code",[e._v("'connect'")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"event-timeout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-timeout"}},[e._v("#")]),e._v(" Event: 'timeout'")]),e._v(" "),n("p",[e._v("Emitted if the socket times out from inactivity. This is only to notify that\nthe socket has been idle. The user must manually close the connection.")]),e._v(" "),n("p",[e._v("See also: "),n("a",{attrs:{href:"#net_socket_settimeout_timeout_callback"}},[n("code",[e._v("socket.setTimeout()")])]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"socket-address"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-address"}},[e._v("#")]),e._v(" socket.address()")]),e._v(" "),n("ul",[n("li",[e._v("Returns: {Object}")])]),e._v(" "),n("p",[e._v("Returns the bound "),n("code",[e._v("address")]),e._v(", the address "),n("code",[e._v("family")]),e._v(" name and "),n("code",[e._v("port")]),e._v(" of the\nsocket as reported by the operating system:\n"),n("code",[e._v("{ port: 12346, family: 'IPv4', address: '127.0.0.1' }")])]),e._v(" "),n("h3",{attrs:{id:"socket-buffersize"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-buffersize"}},[e._v("#")]),e._v(" socket.bufferSize")]),e._v(" "),n("ul",[n("li",[e._v("{integer}")])]),e._v(" "),n("p",[n("code",[e._v("net.Socket")]),e._v(" has the property that "),n("code",[e._v("socket.write()")]),e._v(" always works. This is to\nhelp users get up and running quickly. The computer cannot always keep up\nwith the amount of data that is written to a socket. The network connection\nsimply might be too slow. Node.js will internally queue up the data written to a\nsocket and send it out over the wire when it is possible. (Internally it is\npolling on the socket's file descriptor for being writable).")]),e._v(" "),n("p",[e._v("The consequence of this internal buffering is that memory may grow. This\nproperty shows the number of characters currently buffered to be written.\n(Number of characters is approximately equal to the number of bytes to be\nwritten, but the buffer may contain strings, and the strings are lazily\nencoded, so the exact number of bytes is not known.)")]),e._v(" "),n("p",[e._v("Users who experience large or growing "),n("code",[e._v("bufferSize")]),e._v(' should attempt to\n"throttle" the data flows in their program with\n'),n("a",{attrs:{href:"#net_socket_pause"}},[n("code",[e._v("socket.pause()")])]),e._v(" and "),n("a",{attrs:{href:"#net_socket_resume"}},[n("code",[e._v("socket.resume()")])]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"socket-bytesread"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-bytesread"}},[e._v("#")]),e._v(" socket.bytesRead")]),e._v(" "),n("ul",[n("li",[e._v("{integer}")])]),e._v(" "),n("p",[e._v("The amount of received bytes.")]),e._v(" "),n("h3",{attrs:{id:"socket-byteswritten"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-byteswritten"}},[e._v("#")]),e._v(" socket.bytesWritten")]),e._v(" "),n("ul",[n("li",[e._v("{integer}")])]),e._v(" "),n("p",[e._v("The amount of bytes sent.")]),e._v(" "),n("h3",{attrs:{id:"socket-connect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-connect"}},[e._v("#")]),e._v(" socket.connect()")]),e._v(" "),n("p",[e._v("Initiate a connection on a given socket.")]),e._v(" "),n("p",[e._v("Possible signatures:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#net_socket_connect_options_connectlistener"}},[n("code",[e._v("socket.connect(options[, connectListener])")])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#net_socket_connect_path_connectlistener"}},[n("code",[e._v("socket.connect(path[, connectListener])")])]),e._v("\nfor "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" connections.")]),e._v(" "),n("li",[n("a",{attrs:{href:"#net_socket_connect_port_host_connectlistener"}},[n("code",[e._v("socket.connect(port[, host][, connectListener])")])]),e._v("\nfor TCP connections.")]),e._v(" "),n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("This function is asynchronous. When the connection is established, the\n"),n("a",{attrs:{href:"#net_event_connect"}},[n("code",[e._v("'connect'")])]),e._v(" event will be emitted. If there is a problem connecting,\ninstead of a "),n("a",{attrs:{href:"#net_event_connect"}},[n("code",[e._v("'connect'")])]),e._v(" event, an "),n("a",{attrs:{href:"#net_event_error_1"}},[n("code",[e._v("'error'")])]),e._v(" event will be emitted with\nthe error passed to the "),n("a",{attrs:{href:"#net_event_error_1"}},[n("code",[e._v("'error'")])]),e._v(" listener.\nThe last parameter "),n("code",[e._v("connectListener")]),e._v(", if supplied, will be added as a listener\nfor the "),n("a",{attrs:{href:"#net_event_connect"}},[n("code",[e._v("'connect'")])]),e._v(" event "),n("strong",[e._v("once")]),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"socket-connect-options-connectlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-connect-options-connectlistener"}},[e._v("#")]),e._v(" socket.connect(options[, connectListener])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("options")]),e._v(" {Object}")]),e._v(" "),n("li",[n("code",[e._v("connectListener")]),e._v(" {Function} Common parameter of "),n("a",{attrs:{href:"#net_socket_connect"}},[n("code",[e._v("socket.connect()")])]),e._v("\nmethods. Will be added as a listener for the "),n("a",{attrs:{href:"#net_event_connect"}},[n("code",[e._v("'connect'")])]),e._v(" event once.")]),e._v(" "),n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("Initiate a connection on a given socket. Normally this method is not needed,\nthe socket should be created and opened with "),n("a",{attrs:{href:"#net_net_createconnection"}},[n("code",[e._v("net.createConnection()")])]),e._v(". Use\nthis only when implementing a custom Socket.")]),e._v(" "),n("p",[e._v("For TCP connections, available "),n("code",[e._v("options")]),e._v(" are:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("port")]),e._v(" {number} Required. Port the socket should connect to.")]),e._v(" "),n("li",[n("code",[e._v("host")]),e._v(" {string} Host the socket should connect to. "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("'localhost'")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("localAddress")]),e._v(" {string} Local address the socket should connect from.")]),e._v(" "),n("li",[n("code",[e._v("localPort")]),e._v(" {number} Local port the socket should connect from.")]),e._v(" "),n("li",[n("code",[e._v("family")]),e._v(" {number}: Version of IP stack. Must be "),n("code",[e._v("4")]),e._v(", "),n("code",[e._v("6")]),e._v(", or "),n("code",[e._v("0")]),e._v(". The value\n"),n("code",[e._v("0")]),e._v(" indicates that both IPv4 and IPv6 addresses are allowed. "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("0")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("hints")]),e._v(" {number} Optional "),n("router-link",{attrs:{to:"/node/dns.html#dns_supported_getaddrinfo_flags"}},[n("code",[e._v("dns.lookup()")]),e._v(" hints")]),e._v(".")],1),e._v(" "),n("li",[n("code",[e._v("lookup")]),e._v(" {Function} Custom lookup function. "),n("strong",[e._v("Default:")]),e._v(" "),n("router-link",{attrs:{to:"/node/dns.html#dns_dns_lookup_hostname_options_callback"}},[n("code",[e._v("dns.lookup()")])]),e._v(".")],1)]),e._v(" "),n("p",[e._v("For "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" connections, available "),n("code",[e._v("options")]),e._v(" are:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("path")]),e._v(" {string} Required. Path the client should connect to.\nSee "),n("a",{attrs:{href:"#net_identifying_paths_for_ipc_connections"}},[e._v("Identifying paths for IPC connections")]),e._v(". If provided, the TCP-specific\noptions above are ignored.")])]),e._v(" "),n("p",[e._v("For both types, available "),n("code",[e._v("options")]),e._v(" include:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("onread")]),e._v(" {Object} If specified, incoming data is stored in a single "),n("code",[e._v("buffer")]),e._v("\nand passed to the supplied "),n("code",[e._v("callback")]),e._v(" when data arrives on the socket.\nNote: this will cause the streaming functionality to not provide any data,\nhowever events like "),n("code",[e._v("'error'")]),e._v(", "),n("code",[e._v("'end'")]),e._v(", and "),n("code",[e._v("'close'")]),e._v(" will still be emitted\nas normal and methods like "),n("code",[e._v("pause()")]),e._v(" and "),n("code",[e._v("resume()")]),e._v(" will also behave as\nexpected.\n"),n("ul",[n("li",[n("code",[e._v("buffer")]),e._v(" {Buffer|Uint8Array|Function} Either a reusable chunk of memory to\nuse for storing incoming data or a function that returns such.")]),e._v(" "),n("li",[n("code",[e._v("callback")]),e._v(" {Function} This function is called for every chunk of incoming\ndata. Two arguments are passed to it: the number of bytes written to\n"),n("code",[e._v("buffer")]),e._v(" and a reference to "),n("code",[e._v("buffer")]),e._v(". Return "),n("code",[e._v("false")]),e._v(" from this function to\nimplicitly "),n("code",[e._v("pause()")]),e._v(" the socket. This function will be executed in the\nglobal context.")])])])]),e._v(" "),n("p",[e._v("Following is an example of a client using the "),n("code",[e._v("onread")]),e._v(" option:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" net "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'net'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nnet"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("connect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  onread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Reuses a 4KiB Buffer for every read from the socket.")]),e._v("\n    buffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Buffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("callback")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("nread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" buf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Received data is available in `buf` from 0 to `nread`.")]),e._v("\n      console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'utf8'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" nread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("h4",{attrs:{id:"socket-connect-path-connectlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-connect-path-connectlistener"}},[e._v("#")]),e._v(" socket.connect(path[, connectListener])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("path")]),e._v(" {string} Path the client should connect to. See\n"),n("a",{attrs:{href:"#net_identifying_paths_for_ipc_connections"}},[e._v("Identifying paths for IPC connections")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("connectListener")]),e._v(" {Function} Common parameter of "),n("a",{attrs:{href:"#net_socket_connect"}},[n("code",[e._v("socket.connect()")])]),e._v("\nmethods. Will be added as a listener for the "),n("a",{attrs:{href:"#net_event_connect"}},[n("code",[e._v("'connect'")])]),e._v(" event once.")]),e._v(" "),n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("Initiate an "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" connection on the given socket.")]),e._v(" "),n("p",[e._v("Alias to\n"),n("a",{attrs:{href:"#net_socket_connect_options_connectlistener"}},[n("code",[e._v("socket.connect(options[, connectListener])")])]),e._v("\ncalled with "),n("code",[e._v("{ path: path }")]),e._v(" as "),n("code",[e._v("options")]),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"socket-connect-port-host-connectlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-connect-port-host-connectlistener"}},[e._v("#")]),e._v(" socket.connect(port[, host][, connectListener])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("port")]),e._v(" {number} Port the client should connect to.")]),e._v(" "),n("li",[n("code",[e._v("host")]),e._v(" {string} Host the client should connect to.")]),e._v(" "),n("li",[n("code",[e._v("connectListener")]),e._v(" {Function} Common parameter of "),n("a",{attrs:{href:"#net_socket_connect"}},[n("code",[e._v("socket.connect()")])]),e._v("\nmethods. Will be added as a listener for the "),n("a",{attrs:{href:"#net_event_connect"}},[n("code",[e._v("'connect'")])]),e._v(" event once.")]),e._v(" "),n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("Initiate a TCP connection on the given socket.")]),e._v(" "),n("p",[e._v("Alias to\n"),n("a",{attrs:{href:"#net_socket_connect_options_connectlistener"}},[n("code",[e._v("socket.connect(options[, connectListener])")])]),e._v("\ncalled with "),n("code",[e._v("{port: port, host: host}")]),e._v(" as "),n("code",[e._v("options")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"socket-connecting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-connecting"}},[e._v("#")]),e._v(" socket.connecting")]),e._v(" "),n("ul",[n("li",[e._v("{boolean}")])]),e._v(" "),n("p",[e._v("If "),n("code",[e._v("true")]),e._v(",\n"),n("a",{attrs:{href:"#net_socket_connect_options_connectlistener"}},[n("code",[e._v("socket.connect(options[, connectListener])")])]),e._v(" was\ncalled and has not yet finished. It will stay "),n("code",[e._v("true")]),e._v(" until the socket becomes\nconnected, then it is set to "),n("code",[e._v("false")]),e._v(" and the "),n("code",[e._v("'connect'")]),e._v(" event is emitted.  Note\nthat the\n"),n("a",{attrs:{href:"#net_socket_connect_options_connectlistener"}},[n("code",[e._v("socket.connect(options[, connectListener])")])]),e._v("\ncallback is a listener for the "),n("code",[e._v("'connect'")]),e._v(" event.")]),e._v(" "),n("h3",{attrs:{id:"socket-destroy-exception"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-destroy-exception"}},[e._v("#")]),e._v(" socket.destroy([exception])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("exception")]),e._v(" {Object}")]),e._v(" "),n("li",[e._v("Returns: {net.Socket}")])]),e._v(" "),n("p",[e._v("Ensures that no more I/O activity happens on this socket. Only necessary in\ncase of errors (parse error or so).")]),e._v(" "),n("p",[e._v("If "),n("code",[e._v("exception")]),e._v(" is specified, an "),n("a",{attrs:{href:"#net_event_error_1"}},[n("code",[e._v("'error'")])]),e._v(" event will be emitted and any\nlisteners for that event will receive "),n("code",[e._v("exception")]),e._v(" as an argument.")]),e._v(" "),n("h3",{attrs:{id:"socket-destroyed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-destroyed"}},[e._v("#")]),e._v(" socket.destroyed")]),e._v(" "),n("ul",[n("li",[e._v("{boolean} Indicates if the connection is destroyed or not. Once a\nconnection is destroyed no further data can be transferred using it.")])]),e._v(" "),n("h3",{attrs:{id:"socket-end-data-encoding-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-end-data-encoding-callback"}},[e._v("#")]),e._v(" socket.end([data[, encoding]][, callback])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("data")]),e._v(" {string|Buffer|Uint8Array}")]),e._v(" "),n("li",[n("code",[e._v("encoding")]),e._v(" {string} Only used when data is "),n("code",[e._v("string")]),e._v(". "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("'utf8'")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("callback")]),e._v(" {Function} Optional callback for when the socket is finished.")]),e._v(" "),n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("Half-closes the socket. i.e., it sends a FIN packet. It is possible the\nserver will still send some data.")]),e._v(" "),n("p",[e._v("If "),n("code",[e._v("data")]),e._v(" is specified, it is equivalent to calling\n"),n("code",[e._v("socket.write(data, encoding)")]),e._v(" followed by "),n("a",{attrs:{href:"#net_socket_end_data_encoding_callback"}},[n("code",[e._v("socket.end()")])]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"socket-localaddress"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-localaddress"}},[e._v("#")]),e._v(" socket.localAddress")]),e._v(" "),n("ul",[n("li",[e._v("{string}")])]),e._v(" "),n("p",[e._v("The string representation of the local IP address the remote client is\nconnecting on. For example, in a server listening on "),n("code",[e._v("'0.0.0.0'")]),e._v(", if a client\nconnects on "),n("code",[e._v("'192.168.1.1'")]),e._v(", the value of "),n("code",[e._v("socket.localAddress")]),e._v(" would be\n"),n("code",[e._v("'192.168.1.1'")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"socket-localport"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-localport"}},[e._v("#")]),e._v(" socket.localPort")]),e._v(" "),n("ul",[n("li",[e._v("{integer}")])]),e._v(" "),n("p",[e._v("The numeric representation of the local port. For example, "),n("code",[e._v("80")]),e._v(" or "),n("code",[e._v("21")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"socket-pause"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-pause"}},[e._v("#")]),e._v(" socket.pause()")]),e._v(" "),n("ul",[n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("Pauses the reading of data. That is, "),n("a",{attrs:{href:"#net_event_data"}},[n("code",[e._v("'data'")])]),e._v(" events will not be emitted.\nUseful to throttle back an upload.")]),e._v(" "),n("h3",{attrs:{id:"socket-pending"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-pending"}},[e._v("#")]),e._v(" socket.pending")]),e._v(" "),n("ul",[n("li",[e._v("{boolean}")])]),e._v(" "),n("p",[e._v("This is "),n("code",[e._v("true")]),e._v(" if the socket is not connected yet, either because "),n("code",[e._v(".connect()")]),e._v("\nhas not yet been called or because it is still in the process of connecting\n(see "),n("a",{attrs:{href:"#net_socket_connecting"}},[n("code",[e._v("socket.connecting")])]),e._v(").")]),e._v(" "),n("h3",{attrs:{id:"socket-ref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-ref"}},[e._v("#")]),e._v(" socket.ref()")]),e._v(" "),n("ul",[n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("Opposite of "),n("code",[e._v("unref()")]),e._v(", calling "),n("code",[e._v("ref()")]),e._v(" on a previously "),n("code",[e._v("unref")]),e._v("ed socket will\n"),n("em",[e._v("not")]),e._v(" let the program exit if it's the only socket left (the default behavior).\nIf the socket is "),n("code",[e._v("ref")]),e._v("ed calling "),n("code",[e._v("ref")]),e._v(" again will have no effect.")]),e._v(" "),n("h3",{attrs:{id:"socket-remoteaddress"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-remoteaddress"}},[e._v("#")]),e._v(" socket.remoteAddress")]),e._v(" "),n("ul",[n("li",[e._v("{string}")])]),e._v(" "),n("p",[e._v("The string representation of the remote IP address. For example,\n"),n("code",[e._v("'74.125.127.100'")]),e._v(" or "),n("code",[e._v("'2001:4860:a005::68'")]),e._v(". Value may be "),n("code",[e._v("undefined")]),e._v(" if\nthe socket is destroyed (for example, if the client disconnected).")]),e._v(" "),n("h3",{attrs:{id:"socket-remotefamily"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-remotefamily"}},[e._v("#")]),e._v(" socket.remoteFamily")]),e._v(" "),n("ul",[n("li",[e._v("{string}")])]),e._v(" "),n("p",[e._v("The string representation of the remote IP family. "),n("code",[e._v("'IPv4'")]),e._v(" or "),n("code",[e._v("'IPv6'")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"socket-remoteport"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-remoteport"}},[e._v("#")]),e._v(" socket.remotePort")]),e._v(" "),n("ul",[n("li",[e._v("{integer}")])]),e._v(" "),n("p",[e._v("The numeric representation of the remote port. For example, "),n("code",[e._v("80")]),e._v(" or "),n("code",[e._v("21")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"socket-resume"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-resume"}},[e._v("#")]),e._v(" socket.resume()")]),e._v(" "),n("ul",[n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("Resumes reading after a call to "),n("a",{attrs:{href:"#net_socket_pause"}},[n("code",[e._v("socket.pause()")])]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"socket-setencoding-encoding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-setencoding-encoding"}},[e._v("#")]),e._v(" socket.setEncoding([encoding])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("encoding")]),e._v(" {string}")]),e._v(" "),n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("Set the encoding for the socket as a "),n("router-link",{attrs:{to:"/node/stream.html#stream_class_stream_readable"}},[e._v("Readable Stream")]),e._v(". See\n"),n("router-link",{attrs:{to:"/node/stream.html#stream_readable_setencoding_encoding"}},[n("code",[e._v("readable.setEncoding()")])]),e._v(" for more information.")],1),e._v(" "),n("h3",{attrs:{id:"socket-setkeepalive-enable-initialdelay"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-setkeepalive-enable-initialdelay"}},[e._v("#")]),e._v(" socket.setKeepAlive([enable][, initialDelay])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("enable")]),e._v(" {boolean} "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("false")])]),e._v(" "),n("li",[n("code",[e._v("initialDelay")]),e._v(" {number} "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("0")])]),e._v(" "),n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("Enable/disable keep-alive functionality, and optionally set the initial\ndelay before the first keepalive probe is sent on an idle socket.")]),e._v(" "),n("p",[e._v("Set "),n("code",[e._v("initialDelay")]),e._v(" (in milliseconds) to set the delay between the last\ndata packet received and the first keepalive probe. Setting "),n("code",[e._v("0")]),e._v(" for\n"),n("code",[e._v("initialDelay")]),e._v(" will leave the value unchanged from the default\n(or previous) setting.")]),e._v(" "),n("h3",{attrs:{id:"socket-setnodelay-nodelay"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-setnodelay-nodelay"}},[e._v("#")]),e._v(" socket.setNoDelay([noDelay])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("noDelay")]),e._v(" {boolean} "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("true")])]),e._v(" "),n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("Disables the Nagle algorithm. By default TCP connections use the Nagle\nalgorithm, they buffer data before sending it off. Setting "),n("code",[e._v("true")]),e._v(" for\n"),n("code",[e._v("noDelay")]),e._v(" will immediately fire off data each time "),n("code",[e._v("socket.write()")]),e._v(" is called.")]),e._v(" "),n("h3",{attrs:{id:"socket-settimeout-timeout-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-settimeout-timeout-callback"}},[e._v("#")]),e._v(" socket.setTimeout(timeout[, callback])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("timeout")]),e._v(" {number}")]),e._v(" "),n("li",[n("code",[e._v("callback")]),e._v(" {Function}")]),e._v(" "),n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("Sets the socket to timeout after "),n("code",[e._v("timeout")]),e._v(" milliseconds of inactivity on\nthe socket. By default "),n("code",[e._v("net.Socket")]),e._v(" do not have a timeout.")]),e._v(" "),n("p",[e._v("When an idle timeout is triggered the socket will receive a "),n("a",{attrs:{href:"#net_event_timeout"}},[n("code",[e._v("'timeout'")])]),e._v("\nevent but the connection will not be severed. The user must manually call\n"),n("a",{attrs:{href:"#net_socket_end_data_encoding_callback"}},[n("code",[e._v("socket.end()")])]),e._v(" or "),n("a",{attrs:{href:"#net_socket_destroy_exception"}},[n("code",[e._v("socket.destroy()")])]),e._v(" to end the connection.")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[e._v("socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nsocket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'timeout'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'socket timeout'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[e._v("If "),n("code",[e._v("timeout")]),e._v(" is 0, then the existing idle timeout is disabled.")]),e._v(" "),n("p",[e._v("The optional "),n("code",[e._v("callback")]),e._v(" parameter will be added as a one-time listener for the\n"),n("a",{attrs:{href:"#net_event_timeout"}},[n("code",[e._v("'timeout'")])]),e._v(" event.")]),e._v(" "),n("h3",{attrs:{id:"socket-unref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-unref"}},[e._v("#")]),e._v(" socket.unref()")]),e._v(" "),n("ul",[n("li",[e._v("Returns: {net.Socket} The socket itself.")])]),e._v(" "),n("p",[e._v("Calling "),n("code",[e._v("unref()")]),e._v(" on a socket will allow the program to exit if this is the only\nactive socket in the event system. If the socket is already "),n("code",[e._v("unref")]),e._v("ed calling\n"),n("code",[e._v("unref()")]),e._v(" again will have no effect.")]),e._v(" "),n("h3",{attrs:{id:"socket-write-data-encoding-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-write-data-encoding-callback"}},[e._v("#")]),e._v(" socket.write(data[, encoding][, callback])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("data")]),e._v(" {string|Buffer|Uint8Array}")]),e._v(" "),n("li",[n("code",[e._v("encoding")]),e._v(" {string} Only used when data is "),n("code",[e._v("string")]),e._v(". "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("utf8")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("callback")]),e._v(" {Function}")]),e._v(" "),n("li",[e._v("Returns: {boolean}")])]),e._v(" "),n("p",[e._v("Sends data on the socket. The second parameter specifies the encoding in the\ncase of a string — it defaults to UTF8 encoding.")]),e._v(" "),n("p",[e._v("Returns "),n("code",[e._v("true")]),e._v(" if the entire data was flushed successfully to the kernel\nbuffer. Returns "),n("code",[e._v("false")]),e._v(" if all or part of the data was queued in user memory.\n"),n("a",{attrs:{href:"#net_event_drain"}},[n("code",[e._v("'drain'")])]),e._v(" will be emitted when the buffer is again free.")]),e._v(" "),n("p",[e._v("The optional "),n("code",[e._v("callback")]),e._v(" parameter will be executed when the data is finally\nwritten out, which may not be immediately.")]),e._v(" "),n("p",[e._v("See "),n("code",[e._v("Writable")]),e._v(" stream "),n("router-link",{attrs:{to:"/node/stream.html#stream_writable_write_chunk_encoding_callback"}},[n("code",[e._v("write()")])]),e._v(" method for more\ninformation.")],1),e._v(" "),n("h2",{attrs:{id:"net-connect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-connect"}},[e._v("#")]),e._v(" net.connect()")]),e._v(" "),n("p",[e._v("Aliases to\n"),n("a",{attrs:{href:"#net_net_createconnection"}},[n("code",[e._v("net.createConnection()")])]),e._v(".")]),e._v(" "),n("p",[e._v("Possible signatures:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#net_net_connect_options_connectlistener"}},[n("code",[e._v("net.connect(options[, connectListener])")])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#net_net_connect_path_connectlistener"}},[n("code",[e._v("net.connect(path[, connectListener])")])]),e._v(" for "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v("\nconnections.")]),e._v(" "),n("li",[n("a",{attrs:{href:"#net_net_connect_port_host_connectlistener"}},[n("code",[e._v("net.connect(port[, host][, connectListener])")])]),e._v("\nfor TCP connections.")])]),e._v(" "),n("h3",{attrs:{id:"net-connect-options-connectlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-connect-options-connectlistener"}},[e._v("#")]),e._v(" net.connect(options[, connectListener])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("options")]),e._v(" {Object}")]),e._v(" "),n("li",[n("code",[e._v("connectListener")]),e._v(" {Function}")]),e._v(" "),n("li",[e._v("Returns: {net.Socket}")])]),e._v(" "),n("p",[e._v("Alias to\n"),n("a",{attrs:{href:"#net_net_createconnection_options_connectlistener"}},[n("code",[e._v("net.createConnection(options[, connectListener])")])]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"net-connect-path-connectlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-connect-path-connectlistener"}},[e._v("#")]),e._v(" net.connect(path[, connectListener])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("path")]),e._v(" {string}")]),e._v(" "),n("li",[n("code",[e._v("connectListener")]),e._v(" {Function}")]),e._v(" "),n("li",[e._v("Returns: {net.Socket}")])]),e._v(" "),n("p",[e._v("Alias to\n"),n("a",{attrs:{href:"#net_net_createconnection_path_connectlistener"}},[n("code",[e._v("net.createConnection(path[, connectListener])")])]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"net-connect-port-host-connectlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-connect-port-host-connectlistener"}},[e._v("#")]),e._v(" net.connect(port[, host][, connectListener])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("port")]),e._v(" {number}")]),e._v(" "),n("li",[n("code",[e._v("host")]),e._v(" {string}")]),e._v(" "),n("li",[n("code",[e._v("connectListener")]),e._v(" {Function}")]),e._v(" "),n("li",[e._v("Returns: {net.Socket}")])]),e._v(" "),n("p",[e._v("Alias to\n"),n("a",{attrs:{href:"#net_net_createconnection_port_host_connectlistener"}},[n("code",[e._v("net.createConnection(port[, host][, connectListener])")])]),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"net-createconnection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-createconnection"}},[e._v("#")]),e._v(" net.createConnection()")]),e._v(" "),n("p",[e._v("A factory function, which creates a new "),n("a",{attrs:{href:"#net_class_net_socket"}},[n("code",[e._v("net.Socket")])]),e._v(",\nimmediately initiates connection with "),n("a",{attrs:{href:"#net_socket_connect"}},[n("code",[e._v("socket.connect()")])]),e._v(",\nthen returns the "),n("code",[e._v("net.Socket")]),e._v(" that starts the connection.")]),e._v(" "),n("p",[e._v("When the connection is established, a "),n("a",{attrs:{href:"#net_event_connect"}},[n("code",[e._v("'connect'")])]),e._v(" event will be emitted\non the returned socket. The last parameter "),n("code",[e._v("connectListener")]),e._v(", if supplied,\nwill be added as a listener for the "),n("a",{attrs:{href:"#net_event_connect"}},[n("code",[e._v("'connect'")])]),e._v(" event "),n("strong",[e._v("once")]),e._v(".")]),e._v(" "),n("p",[e._v("Possible signatures:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#net_net_createconnection_options_connectlistener"}},[n("code",[e._v("net.createConnection(options[, connectListener])")])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#net_net_createconnection_path_connectlistener"}},[n("code",[e._v("net.createConnection(path[, connectListener])")])]),e._v("\nfor "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" connections.")]),e._v(" "),n("li",[n("a",{attrs:{href:"#net_net_createconnection_port_host_connectlistener"}},[n("code",[e._v("net.createConnection(port[, host][, connectListener])")])]),e._v("\nfor TCP connections.")])]),e._v(" "),n("p",[e._v("The "),n("a",{attrs:{href:"#net_net_connect"}},[n("code",[e._v("net.connect()")])]),e._v(" function is an alias to this function.")]),e._v(" "),n("h3",{attrs:{id:"net-createconnection-options-connectlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-createconnection-options-connectlistener"}},[e._v("#")]),e._v(" net.createConnection(options[, connectListener])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("options")]),e._v(" {Object} Required. Will be passed to both the\n"),n("a",{attrs:{href:"#net_new_net_socket_options"}},[n("code",[e._v("new net.Socket([options])")])]),e._v(" call and the\n"),n("a",{attrs:{href:"#net_socket_connect_options_connectlistener"}},[n("code",[e._v("socket.connect(options[, connectListener])")])]),e._v("\nmethod.")]),e._v(" "),n("li",[n("code",[e._v("connectListener")]),e._v(" {Function} Common parameter of the\n"),n("a",{attrs:{href:"#net_net_createconnection"}},[n("code",[e._v("net.createConnection()")])]),e._v(" functions. If supplied, will be added as\na listener for the "),n("a",{attrs:{href:"#net_event_connect"}},[n("code",[e._v("'connect'")])]),e._v(" event on the returned socket once.")]),e._v(" "),n("li",[e._v("Returns: {net.Socket} The newly created socket used to start the connection.")])]),e._v(" "),n("p",[e._v("For available options, see\n"),n("a",{attrs:{href:"#net_new_net_socket_options"}},[n("code",[e._v("new net.Socket([options])")])]),e._v("\nand "),n("a",{attrs:{href:"#net_socket_connect_options_connectlistener"}},[n("code",[e._v("socket.connect(options[, connectListener])")])]),e._v(".")]),e._v(" "),n("p",[e._v("Additional options:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("timeout")]),e._v(" {number} If set, will be used to call\n"),n("a",{attrs:{href:"#net_socket_settimeout_timeout_callback"}},[n("code",[e._v("socket.setTimeout(timeout)")])]),e._v(" after the socket is created, but before\nit starts the connection.")])]),e._v(" "),n("p",[e._v("Following is an example of a client of the echo server described\nin the "),n("a",{attrs:{href:"#net_net_createserver_options_connectionlistener"}},[n("code",[e._v("net.createServer()")])]),e._v(" section:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" net "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'net'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" client "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" net"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("createConnection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("8124")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 'connect' listener.")]),e._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'connected to server!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'world!\\r\\n'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nclient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'data'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nclient"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'end'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'disconnected from server'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[e._v("To connect on the socket "),n("code",[e._v("/tmp/echo.sock")]),e._v(" the second line would just be\nchanged to:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" client "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" net"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("createConnection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/tmp/echo.sock'")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("h3",{attrs:{id:"net-createconnection-path-connectlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-createconnection-path-connectlistener"}},[e._v("#")]),e._v(" net.createConnection(path[, connectListener])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("path")]),e._v(" {string} Path the socket should connect to. Will be passed to\n"),n("a",{attrs:{href:"#net_socket_connect_path_connectlistener"}},[n("code",[e._v("socket.connect(path[, connectListener])")])]),e._v(".\nSee "),n("a",{attrs:{href:"#net_identifying_paths_for_ipc_connections"}},[e._v("Identifying paths for IPC connections")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("connectListener")]),e._v(" {Function} Common parameter of the\n"),n("a",{attrs:{href:"#net_net_createconnection"}},[n("code",[e._v("net.createConnection()")])]),e._v(' functions, an "once" listener for the\n'),n("code",[e._v("'connect'")]),e._v(" event on the initiating socket. Will be passed to\n"),n("a",{attrs:{href:"#net_socket_connect_path_connectlistener"}},[n("code",[e._v("socket.connect(path[, connectListener])")])]),e._v(".")]),e._v(" "),n("li",[e._v("Returns: {net.Socket} The newly created socket used to start the connection.")])]),e._v(" "),n("p",[e._v("Initiates an "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" connection.")]),e._v(" "),n("p",[e._v("This function creates a new "),n("a",{attrs:{href:"#net_class_net_socket"}},[n("code",[e._v("net.Socket")])]),e._v(" with all options set to default,\nimmediately initiates connection with\n"),n("a",{attrs:{href:"#net_socket_connect_path_connectlistener"}},[n("code",[e._v("socket.connect(path[, connectListener])")])]),e._v(",\nthen returns the "),n("code",[e._v("net.Socket")]),e._v(" that starts the connection.")]),e._v(" "),n("h3",{attrs:{id:"net-createconnection-port-host-connectlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-createconnection-port-host-connectlistener"}},[e._v("#")]),e._v(" net.createConnection(port[, host][, connectListener])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("port")]),e._v(" {number} Port the socket should connect to. Will be passed to\n"),n("a",{attrs:{href:"#net_socket_connect_port_host_connectlistener"}},[n("code",[e._v("socket.connect(port[, host][, connectListener])")])]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("host")]),e._v(" {string} Host the socket should connect to. Will be passed to\n"),n("a",{attrs:{href:"#net_socket_connect_port_host_connectlistener"}},[n("code",[e._v("socket.connect(port[, host][, connectListener])")])]),e._v(".\n"),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("'localhost'")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("connectListener")]),e._v(" {Function} Common parameter of the\n"),n("a",{attrs:{href:"#net_net_createconnection"}},[n("code",[e._v("net.createConnection()")])]),e._v(' functions, an "once" listener for the\n'),n("code",[e._v("'connect'")]),e._v(" event on the initiating socket. Will be passed to\n"),n("a",{attrs:{href:"#net_socket_connect_port_host_connectlistener"}},[n("code",[e._v("socket.connect(port[, host][, connectListener])")])]),e._v(".")]),e._v(" "),n("li",[e._v("Returns: {net.Socket} The newly created socket used to start the connection.")])]),e._v(" "),n("p",[e._v("Initiates a TCP connection.")]),e._v(" "),n("p",[e._v("This function creates a new "),n("a",{attrs:{href:"#net_class_net_socket"}},[n("code",[e._v("net.Socket")])]),e._v(" with all options set to default,\nimmediately initiates connection with\n"),n("a",{attrs:{href:"#net_socket_connect_port_host_connectlistener"}},[n("code",[e._v("socket.connect(port[, host][, connectListener])")])]),e._v(",\nthen returns the "),n("code",[e._v("net.Socket")]),e._v(" that starts the connection.")]),e._v(" "),n("h2",{attrs:{id:"net-createserver-options-connectionlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-createserver-options-connectionlistener"}},[e._v("#")]),e._v(" net.createServer([options][, connectionListener])")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("options")]),e._v(" {Object}\n"),n("ul",[n("li",[n("code",[e._v("allowHalfOpen")]),e._v(" {boolean} Indicates whether half-opened TCP\nconnections are allowed. "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("false")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("pauseOnConnect")]),e._v(" {boolean} Indicates whether the socket should be\npaused on incoming connections. "),n("strong",[e._v("Default:")]),e._v(" "),n("code",[e._v("false")]),e._v(".")])])]),e._v(" "),n("li",[n("code",[e._v("connectionListener")]),e._v(" {Function} Automatically set as a listener for the\n"),n("a",{attrs:{href:"#net_event_connection"}},[n("code",[e._v("'connection'")])]),e._v(" event.")]),e._v(" "),n("li",[e._v("Returns: {net.Server}")])]),e._v(" "),n("p",[e._v("Creates a new TCP or "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" server.")]),e._v(" "),n("p",[e._v("If "),n("code",[e._v("allowHalfOpen")]),e._v(" is set to "),n("code",[e._v("true")]),e._v(", when the other end of the socket\nsends a FIN packet, the server will only send a FIN packet back when\n"),n("a",{attrs:{href:"#net_socket_end_data_encoding_callback"}},[n("code",[e._v("socket.end()")])]),e._v(" is explicitly called, until then the connection is\nhalf-closed (non-readable but still writable). See "),n("a",{attrs:{href:"#net_event_end"}},[n("code",[e._v("'end'")])]),e._v(" event\nand "),n("a",{attrs:{href:"https://tools.ietf.org/html/rfc1122",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC 1122"),n("OutboundLink")],1),e._v(" (section 4.2.2.13) for more information.")]),e._v(" "),n("p",[e._v("If "),n("code",[e._v("pauseOnConnect")]),e._v(" is set to "),n("code",[e._v("true")]),e._v(", then the socket associated with each\nincoming connection will be paused, and no data will be read from its handle.\nThis allows connections to be passed between processes without any data being\nread by the original process. To begin reading data from a paused socket, call\n"),n("a",{attrs:{href:"#net_socket_resume"}},[n("code",[e._v("socket.resume()")])]),e._v(".")]),e._v(" "),n("p",[e._v("The server can be a TCP server or an "),n("a",{attrs:{href:"#net_ipc_support"}},[e._v("IPC")]),e._v(" server, depending on what it\n"),n("a",{attrs:{href:"#net_server_listen"}},[n("code",[e._v("listen()")])]),e._v(" to.")]),e._v(" "),n("p",[e._v("Here is an example of an TCP echo server which listens for connections\non port 8124:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" net "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'net'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" server "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" net"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("createServer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("c")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 'connection' listener.")]),e._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'client connected'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'end'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'client disconnected'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'hello\\r\\n'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n  c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("pipe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nserver"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'error'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("err")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throw")]),e._v(" err"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nserver"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("8124")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'server bound'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[e._v("Test this by using "),n("code",[e._v("telnet")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language-console extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ telnet localhost 8124\n")])])]),n("p",[e._v("To listen on the socket "),n("code",[e._v("/tmp/echo.sock")]),e._v(" the third line from the last would\njust be changed to:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[e._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/tmp/echo.sock'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'server bound'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[e._v("Use "),n("code",[e._v("nc")]),e._v(" to connect to a Unix domain socket server:")]),e._v(" "),n("div",{staticClass:"language-console extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ nc -U /tmp/echo.sock\n")])])]),n("h2",{attrs:{id:"net-isip-input"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-isip-input"}},[e._v("#")]),e._v(" net.isIP(input)")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("input")]),e._v(" {string}")]),e._v(" "),n("li",[e._v("Returns: {integer}")])]),e._v(" "),n("p",[e._v("Tests if input is an IP address. Returns "),n("code",[e._v("0")]),e._v(" for invalid strings,\nreturns "),n("code",[e._v("4")]),e._v(" for IP version 4 addresses, and returns "),n("code",[e._v("6")]),e._v(" for IP version 6\naddresses.")]),e._v(" "),n("h2",{attrs:{id:"net-isipv4-input"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-isipv4-input"}},[e._v("#")]),e._v(" net.isIPv4(input)")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("input")]),e._v(" {string}")]),e._v(" "),n("li",[e._v("Returns: {boolean}")])]),e._v(" "),n("p",[e._v("Returns "),n("code",[e._v("true")]),e._v(" if input is a version 4 IP address, otherwise returns "),n("code",[e._v("false")]),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"net-isipv6-input"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-isipv6-input"}},[e._v("#")]),e._v(" net.isIPv6(input)")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("input")]),e._v(" {string}")]),e._v(" "),n("li",[e._v("Returns: {boolean}")])]),e._v(" "),n("p",[e._v("Returns "),n("code",[e._v("true")]),e._v(" if input is a version 6 IP address, otherwise returns "),n("code",[e._v("false")]),e._v(".")])])}),[],!1,null,null,null);t.default=a.exports}}]);