(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{213:function(t,e,s){"use strict";s.r(e);var a=s(3),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"crypto"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto"}},[t._v("#")]),t._v(" Crypto")]),t._v(" "),s("blockquote",[s("p",[t._v("Stability: 2 - Stable")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("crypto")]),t._v(" module provides cryptographic functionality that includes a set of\nwrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.")]),t._v(" "),s("p",[t._v("Use "),s("code",[t._v("require('crypto')")]),t._v(" to access this module.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" secret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefg'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHmac")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" secret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I love cupcakes'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e")]),t._v("\n")])])]),s("h2",{attrs:{id:"determining-if-crypto-support-is-unavailable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#determining-if-crypto-support-is-unavailable"}},[t._v("#")]),t._v(" Determining if crypto support is unavailable")]),t._v(" "),s("p",[t._v("It is possible for Node.js to be built without including support for the\n"),s("code",[t._v("crypto")]),t._v(" module. In such cases, calling "),s("code",[t._v("require('crypto')")]),t._v(" will result in an\nerror being thrown.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto support is disabled!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"class-certificate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-certificate"}},[t._v("#")]),t._v(" Class: Certificate")]),t._v(" "),s("p",[t._v("SPKAC is a Certificate Signing Request mechanism originally implemented by\nNetscape and was specified formally as part of "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML5's "),s("code",[t._v("keygen")]),t._v(" element"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[s("code",[t._v("<keygen>")]),t._v(" is deprecated since "),s("a",{attrs:{href:"https://www.w3.org/TR/html52/changes.html#features-removed",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML 5.2"),s("OutboundLink")],1),t._v(" and new projects\nshould not use this element anymore.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("crypto")]),t._v(" module provides the "),s("code",[t._v("Certificate")]),t._v(" class for working with SPKAC\ndata. The most common usage is handling output generated by the HTML5\n"),s("code",[t._v("<keygen>")]),t._v(" element. Node.js uses "),s("a",{attrs:{href:"https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("OpenSSL's SPKAC implementation"),s("OutboundLink")],1),t._v(" internally.")]),t._v(" "),s("h3",{attrs:{id:"certificate-exportchallenge-spkac"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#certificate-exportchallenge-spkac"}},[t._v("#")]),t._v(" Certificate.exportChallenge(spkac)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("spkac")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[t._v("Returns: {Buffer} The challenge component of the "),s("code",[t._v("spkac")]),t._v(" data structure, which\nincludes a public key and a challenge.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Certificate "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" spkac "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSpkacSomehow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" challenge "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Certificate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exportChallenge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spkac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("challenge"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: the challenge as a UTF8 string")]),t._v("\n")])])]),s("h3",{attrs:{id:"certificate-exportpublickey-spkac-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#certificate-exportpublickey-spkac-encoding"}},[t._v("#")]),t._v(" Certificate.exportPublicKey(spkac[, encoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("spkac")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("spkac")]),t._v(" string.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer} The public key component of the "),s("code",[t._v("spkac")]),t._v(" data structure,\nwhich includes a public key and a challenge.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Certificate "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" spkac "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSpkacSomehow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" publicKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Certificate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exportPublicKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spkac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("publicKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: the public key as <Buffer ...>")]),t._v("\n")])])]),s("h3",{attrs:{id:"certificate-verifyspkac-spkac"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#certificate-verifyspkac-spkac"}},[t._v("#")]),t._v(" Certificate.verifySpkac(spkac)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("spkac")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[t._v("Returns: {boolean} "),s("code",[t._v("true")]),t._v(" if the given "),s("code",[t._v("spkac")]),t._v(" data structure is valid,\n"),s("code",[t._v("false")]),t._v(" otherwise.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Certificate "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" spkac "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSpkacSomehow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Certificate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("verifySpkac")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spkac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: true or false")]),t._v("\n")])])]),s("h3",{attrs:{id:"legacy-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#legacy-api"}},[t._v("#")]),t._v(" Legacy API")]),t._v(" "),s("p",[t._v("As a still supported legacy interface, it is possible (but not recommended) to\ncreate new instances of the "),s("code",[t._v("crypto.Certificate")]),t._v(" class as illustrated in the\nexamples below.")]),t._v(" "),s("h4",{attrs:{id:"new-crypto-certificate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new-crypto-certificate"}},[t._v("#")]),t._v(" new crypto.Certificate()")]),t._v(" "),s("p",[t._v("Instances of the "),s("code",[t._v("Certificate")]),t._v(" class can be created using the "),s("code",[t._v("new")]),t._v(" keyword\nor by calling "),s("code",[t._v("crypto.Certificate()")]),t._v(" as a function:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cert1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Certificate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cert2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Certificate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"certificate-exportchallenge-spkac-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#certificate-exportchallenge-spkac-2"}},[t._v("#")]),t._v(" certificate.exportChallenge(spkac)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("spkac")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[t._v("Returns: {Buffer} The challenge component of the "),s("code",[t._v("spkac")]),t._v(" data structure, which\nincludes a public key and a challenge.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cert "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Certificate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" spkac "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSpkacSomehow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" challenge "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exportChallenge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spkac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("challenge"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: the challenge as a UTF8 string")]),t._v("\n")])])]),s("h4",{attrs:{id:"certificate-exportpublickey-spkac"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#certificate-exportpublickey-spkac"}},[t._v("#")]),t._v(" certificate.exportPublicKey(spkac)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("spkac")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[t._v("Returns: {Buffer} The public key component of the "),s("code",[t._v("spkac")]),t._v(" data structure,\nwhich includes a public key and a challenge.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cert "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Certificate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" spkac "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSpkacSomehow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" publicKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exportPublicKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spkac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("publicKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: the public key as <Buffer ...>")]),t._v("\n")])])]),s("h4",{attrs:{id:"certificate-verifyspkac-spkac-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#certificate-verifyspkac-spkac-2"}},[t._v("#")]),t._v(" certificate.verifySpkac(spkac)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("spkac")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[t._v("Returns: {boolean} "),s("code",[t._v("true")]),t._v(" if the given "),s("code",[t._v("spkac")]),t._v(" data structure is valid,\n"),s("code",[t._v("false")]),t._v(" otherwise.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cert "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Certificate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" spkac "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSpkacSomehow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("verifySpkac")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spkac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: true or false")]),t._v("\n")])])]),s("h2",{attrs:{id:"class-cipher"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-cipher"}},[t._v("#")]),t._v(" Class: Cipher")]),t._v(" "),s("ul",[s("li",[t._v("Extends: {stream.Transform}")])]),t._v(" "),s("p",[t._v("Instances of the "),s("code",[t._v("Cipher")]),t._v(" class are used to encrypt data. The class can be\nused in one of two ways:")]),t._v(" "),s("ul",[s("li",[t._v("As a "),s("router-link",{attrs:{to:"/node/stream.html"}},[t._v("stream")]),t._v(" that is both readable and writable, where plain unencrypted\ndata is written to produce encrypted data on the readable side, or")],1),t._v(" "),s("li",[t._v("Using the "),s("a",{attrs:{href:"#crypto_cipher_update_data_inputencoding_outputencoding"}},[s("code",[t._v("cipher.update()")])]),t._v(" and "),s("a",{attrs:{href:"#crypto_cipher_final_outputencoding"}},[s("code",[t._v("cipher.final()")])]),t._v(" methods to produce\nthe encrypted data.")])]),t._v(" "),s("p",[t._v("The "),s("a",{attrs:{href:"#crypto_crypto_createcipher_algorithm_password_options"}},[s("code",[t._v("crypto.createCipher()")])]),t._v(" or "),s("a",{attrs:{href:"#crypto_crypto_createcipheriv_algorithm_key_iv_options"}},[s("code",[t._v("crypto.createCipheriv()")])]),t._v(" methods are\nused to create "),s("code",[t._v("Cipher")]),t._v(" instances. "),s("code",[t._v("Cipher")]),t._v(" objects are not to be created\ndirectly using the "),s("code",[t._v("new")]),t._v(" keyword.")]),t._v(" "),s("p",[t._v("Example: Using "),s("code",[t._v("Cipher")]),t._v(" objects as streams:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" algorithm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aes-192-cbc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" password "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Password used to generate key'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Key length is dependent on the algorithm. In this case for aes192, it is")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 24 bytes (192 bits).")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use async `crypto.scrypt()` instead.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scryptSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("password"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use `crypto.randomBytes()` to generate a random iv instead of the static iv")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// shown here.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iv "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialization vector.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cipher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCipheriv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("algorithm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" encrypted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readable'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" chunk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chunk "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    encrypted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" chunk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'end'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("encrypted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ncipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some clear text data'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Example: Using "),s("code",[t._v("Cipher")]),t._v(" and piped streams:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" algorithm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aes-192-cbc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" password "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Password used to generate key'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use the async `crypto.scrypt()` instead.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scryptSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("password"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use `crypto.randomBytes()` to generate a random iv instead of the static iv")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// shown here.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iv "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialization vector.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cipher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCipheriv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("algorithm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" input "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" output "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createWriteStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test.enc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ninput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Example: Using the "),s("a",{attrs:{href:"#crypto_cipher_update_data_inputencoding_outputencoding"}},[s("code",[t._v("cipher.update()")])]),t._v(" and "),s("a",{attrs:{href:"#crypto_cipher_final_outputencoding"}},[s("code",[t._v("cipher.final()")])]),t._v(" methods:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" algorithm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aes-192-cbc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" password "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Password used to generate key'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use the async `crypto.scrypt()` instead.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scryptSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("password"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use `crypto.randomBytes` to generate a random iv instead of the static iv")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// shown here.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iv "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialization vector.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cipher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCipheriv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("algorithm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" encrypted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some clear text data'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nencrypted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" cipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("final")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("encrypted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa")]),t._v("\n")])])]),s("h3",{attrs:{id:"cipher-final-outputencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cipher-final-outputencoding"}},[t._v("#")]),t._v(" cipher.final([outputEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("outputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string} Any remaining enciphered contents.\nIf "),s("code",[t._v("outputEncoding")]),t._v(" is specified, a string is\nreturned. If an "),s("code",[t._v("outputEncoding")]),t._v(" is not provided, a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned.")],1)]),t._v(" "),s("p",[t._v("Once the "),s("code",[t._v("cipher.final()")]),t._v(" method has been called, the "),s("code",[t._v("Cipher")]),t._v(" object can no\nlonger be used to encrypt data. Attempts to call "),s("code",[t._v("cipher.final()")]),t._v(" more than\nonce will result in an error being thrown.")]),t._v(" "),s("h3",{attrs:{id:"cipher-setaad-buffer-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cipher-setaad-buffer-options"}},[t._v("#")]),t._v(" cipher.setAAD(buffer[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object} "),s("router-link",{attrs:{to:"/node/stream.html#stream_new_stream_transform_options"}},[s("code",[t._v("stream.transform")]),t._v(" options")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("plaintextLength")]),t._v(" {number}")])])],1),t._v(" "),s("li",[t._v("Returns: {Cipher} for method chaining.")])]),t._v(" "),s("p",[t._v("When using an authenticated encryption mode ("),s("code",[t._v("GCM")]),t._v(", "),s("code",[t._v("CCM")]),t._v(" and "),s("code",[t._v("OCB")]),t._v(" are\ncurrently supported), the "),s("code",[t._v("cipher.setAAD()")]),t._v(" method sets the value used for the\n"),s("em",[t._v("additional authenticated data")]),t._v(" (AAD) input parameter.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("options")]),t._v(" argument is optional for "),s("code",[t._v("GCM")]),t._v(" and "),s("code",[t._v("OCB")]),t._v(". When using "),s("code",[t._v("CCM")]),t._v(", the\n"),s("code",[t._v("plaintextLength")]),t._v(" option must be specified and its value must match the length\nof the plaintext in bytes. See "),s("a",{attrs:{href:"#crypto_ccm_mode"}},[t._v("CCM mode")]),t._v(".")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("cipher.setAAD()")]),t._v(" method must be called before "),s("a",{attrs:{href:"#crypto_cipher_update_data_inputencoding_outputencoding"}},[s("code",[t._v("cipher.update()")])]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"cipher-getauthtag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cipher-getauthtag"}},[t._v("#")]),t._v(" cipher.getAuthTag()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {Buffer} When using an authenticated encryption mode ("),s("code",[t._v("GCM")]),t._v(", "),s("code",[t._v("CCM")]),t._v("\nand "),s("code",[t._v("OCB")]),t._v(" are currently supported), the "),s("code",[t._v("cipher.getAuthTag()")]),t._v(" method returns a\n"),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" containing the "),s("em",[t._v("authentication tag")]),t._v(" that has been computed from\nthe given data.")],1)]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("cipher.getAuthTag()")]),t._v(" method should only be called after encryption has\nbeen completed using the "),s("a",{attrs:{href:"#crypto_cipher_final_outputencoding"}},[s("code",[t._v("cipher.final()")])]),t._v(" method.")]),t._v(" "),s("h3",{attrs:{id:"cipher-setautopadding-autopadding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cipher-setautopadding-autopadding"}},[t._v("#")]),t._v(" cipher.setAutoPadding([autoPadding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("autoPadding")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("true")])]),t._v(" "),s("li",[t._v("Returns: {Cipher} for method chaining.")])]),t._v(" "),s("p",[t._v("When using block encryption algorithms, the "),s("code",[t._v("Cipher")]),t._v(" class will automatically\nadd padding to the input data to the appropriate block size. To disable the\ndefault padding call "),s("code",[t._v("cipher.setAutoPadding(false)")]),t._v(".")]),t._v(" "),s("p",[t._v("When "),s("code",[t._v("autoPadding")]),t._v(" is "),s("code",[t._v("false")]),t._v(", the length of the entire input data must be a\nmultiple of the cipher's block size or "),s("a",{attrs:{href:"#crypto_cipher_final_outputencoding"}},[s("code",[t._v("cipher.final()")])]),t._v(" will throw an error.\nDisabling automatic padding is useful for non-standard padding, for instance\nusing "),s("code",[t._v("0x0")]),t._v(" instead of PKCS padding.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("cipher.setAutoPadding()")]),t._v(" method must be called before\n"),s("a",{attrs:{href:"#crypto_cipher_final_outputencoding"}},[s("code",[t._v("cipher.final()")])]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"cipher-update-data-inputencoding-outputencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cipher-update-data-inputencoding-outputencoding"}},[t._v("#")]),t._v(" cipher.update(data[, inputEncoding][, outputEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("data")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("inputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the data.")],1),t._v(" "),s("li",[s("code",[t._v("outputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Updates the cipher with "),s("code",[t._v("data")]),t._v(". If the "),s("code",[t._v("inputEncoding")]),t._v(" argument is given,\nthe "),s("code",[t._v("data")]),t._v("\nargument is a string using the specified encoding. If the "),s("code",[t._v("inputEncoding")]),t._v("\nargument is not given, "),s("code",[t._v("data")]),t._v(" must be a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or\n"),s("code",[t._v("DataView")]),t._v(". If "),s("code",[t._v("data")]),t._v(" is a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or "),s("code",[t._v("DataView")]),t._v(", then\n"),s("code",[t._v("inputEncoding")]),t._v(" is ignored.")],1),t._v(" "),s("p",[t._v("The "),s("code",[t._v("outputEncoding")]),t._v(" specifies the output format of the enciphered\ndata. If the "),s("code",[t._v("outputEncoding")]),t._v("\nis specified, a string using the specified encoding is returned. If no\n"),s("code",[t._v("outputEncoding")]),t._v(" is provided, a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned.")],1),t._v(" "),s("p",[t._v("The "),s("code",[t._v("cipher.update()")]),t._v(" method can be called multiple times with new data until\n"),s("a",{attrs:{href:"#crypto_cipher_final_outputencoding"}},[s("code",[t._v("cipher.final()")])]),t._v(" is called. Calling "),s("code",[t._v("cipher.update()")]),t._v(" after\n"),s("a",{attrs:{href:"#crypto_cipher_final_outputencoding"}},[s("code",[t._v("cipher.final()")])]),t._v(" will result in an error being thrown.")]),t._v(" "),s("h2",{attrs:{id:"class-decipher"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-decipher"}},[t._v("#")]),t._v(" Class: Decipher")]),t._v(" "),s("ul",[s("li",[t._v("Extends: {stream.Transform}")])]),t._v(" "),s("p",[t._v("Instances of the "),s("code",[t._v("Decipher")]),t._v(" class are used to decrypt data. The class can be\nused in one of two ways:")]),t._v(" "),s("ul",[s("li",[t._v("As a "),s("router-link",{attrs:{to:"/node/stream.html"}},[t._v("stream")]),t._v(" that is both readable and writable, where plain encrypted\ndata is written to produce unencrypted data on the readable side, or")],1),t._v(" "),s("li",[t._v("Using the "),s("a",{attrs:{href:"#crypto_decipher_update_data_inputencoding_outputencoding"}},[s("code",[t._v("decipher.update()")])]),t._v(" and "),s("a",{attrs:{href:"#crypto_decipher_final_outputencoding"}},[s("code",[t._v("decipher.final()")])]),t._v(" methods to\nproduce the unencrypted data.")])]),t._v(" "),s("p",[t._v("The "),s("a",{attrs:{href:"#crypto_crypto_createdecipher_algorithm_password_options"}},[s("code",[t._v("crypto.createDecipher()")])]),t._v(" or "),s("a",{attrs:{href:"#crypto_crypto_createdecipheriv_algorithm_key_iv_options"}},[s("code",[t._v("crypto.createDecipheriv()")])]),t._v(" methods are\nused to create "),s("code",[t._v("Decipher")]),t._v(" instances. "),s("code",[t._v("Decipher")]),t._v(" objects are not to be created\ndirectly using the "),s("code",[t._v("new")]),t._v(" keyword.")]),t._v(" "),s("p",[t._v("Example: Using "),s("code",[t._v("Decipher")]),t._v(" objects as streams:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" algorithm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aes-192-cbc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" password "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Password used to generate key'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Key length is dependent on the algorithm. In this case for aes192, it is")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 24 bytes (192 bits).")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use the async `crypto.scrypt()` instead.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scryptSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("password"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The IV is usually passed along with the ciphertext.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iv "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialization vector.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" decipher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDecipheriv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("algorithm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" decrypted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndecipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readable'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chunk "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" decipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    decrypted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" chunk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndecipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'end'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("decrypted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: some clear text data")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Encrypted with same algorithm, key and iv.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" encrypted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndecipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("encrypted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndecipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Example: Using "),s("code",[t._v("Decipher")]),t._v(" and piped streams:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" algorithm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aes-192-cbc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" password "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Password used to generate key'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use the async `crypto.scrypt()` instead.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scryptSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("password"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The IV is usually passed along with the ciphertext.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iv "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialization vector.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" decipher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDecipheriv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("algorithm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" input "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test.enc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" output "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createWriteStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ninput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("decipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Example: Using the "),s("a",{attrs:{href:"#crypto_decipher_update_data_inputencoding_outputencoding"}},[s("code",[t._v("decipher.update()")])]),t._v(" and "),s("a",{attrs:{href:"#crypto_decipher_final_outputencoding"}},[s("code",[t._v("decipher.final()")])]),t._v(" methods:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" algorithm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aes-192-cbc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" password "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Password used to generate key'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use the async `crypto.scrypt()` instead.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scryptSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("password"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The IV is usually passed along with the ciphertext.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iv "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialization vector.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" decipher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDecipheriv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("algorithm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Encrypted using same algorithm, key and iv.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" encrypted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" decrypted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" decipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("encrypted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndecrypted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" decipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("final")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("decrypted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: some clear text data")]),t._v("\n")])])]),s("h3",{attrs:{id:"decipher-final-outputencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#decipher-final-outputencoding"}},[t._v("#")]),t._v(" decipher.final([outputEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("outputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string} Any remaining deciphered contents.\nIf "),s("code",[t._v("outputEncoding")]),t._v(" is specified, a string is\nreturned. If an "),s("code",[t._v("outputEncoding")]),t._v(" is not provided, a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned.")],1)]),t._v(" "),s("p",[t._v("Once the "),s("code",[t._v("decipher.final()")]),t._v(" method has been called, the "),s("code",[t._v("Decipher")]),t._v(" object can\nno longer be used to decrypt data. Attempts to call "),s("code",[t._v("decipher.final()")]),t._v(" more\nthan once will result in an error being thrown.")]),t._v(" "),s("h3",{attrs:{id:"decipher-setaad-buffer-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#decipher-setaad-buffer-options"}},[t._v("#")]),t._v(" decipher.setAAD(buffer[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object} "),s("router-link",{attrs:{to:"/node/stream.html#stream_new_stream_transform_options"}},[s("code",[t._v("stream.transform")]),t._v(" options")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("plaintextLength")]),t._v(" {number}")])])],1),t._v(" "),s("li",[t._v("Returns: {Decipher} for method chaining.")])]),t._v(" "),s("p",[t._v("When using an authenticated encryption mode ("),s("code",[t._v("GCM")]),t._v(", "),s("code",[t._v("CCM")]),t._v(" and "),s("code",[t._v("OCB")]),t._v(" are\ncurrently supported), the "),s("code",[t._v("decipher.setAAD()")]),t._v(" method sets the value used for the\n"),s("em",[t._v("additional authenticated data")]),t._v(" (AAD) input parameter.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("options")]),t._v(" argument is optional for "),s("code",[t._v("GCM")]),t._v(". When using "),s("code",[t._v("CCM")]),t._v(", the\n"),s("code",[t._v("plaintextLength")]),t._v(" option must be specified and its value must match the length\nof the plaintext in bytes. See "),s("a",{attrs:{href:"#crypto_ccm_mode"}},[t._v("CCM mode")]),t._v(".")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("decipher.setAAD()")]),t._v(" method must be called before "),s("a",{attrs:{href:"#crypto_decipher_update_data_inputencoding_outputencoding"}},[s("code",[t._v("decipher.update()")])]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"decipher-setauthtag-buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#decipher-setauthtag-buffer"}},[t._v("#")]),t._v(" decipher.setAuthTag(buffer)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[t._v("Returns: {Decipher} for method chaining.")])]),t._v(" "),s("p",[t._v("When using an authenticated encryption mode ("),s("code",[t._v("GCM")]),t._v(", "),s("code",[t._v("CCM")]),t._v(" and "),s("code",[t._v("OCB")]),t._v(" are\ncurrently supported), the "),s("code",[t._v("decipher.setAuthTag()")]),t._v(" method is used to pass in the\nreceived "),s("em",[t._v("authentication tag")]),t._v(". If no tag is provided, or if the cipher text\nhas been tampered with, "),s("a",{attrs:{href:"#crypto_decipher_final_outputencoding"}},[s("code",[t._v("decipher.final()")])]),t._v(" will throw, indicating that the\ncipher text should be discarded due to failed authentication. If the tag length\nis invalid according to "),s("a",{attrs:{href:"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("NIST SP 800-38D"),s("OutboundLink")],1),t._v(" or does not match the value of the\n"),s("code",[t._v("authTagLength")]),t._v(" option, "),s("code",[t._v("decipher.setAuthTag()")]),t._v(" will throw an error.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("decipher.setAuthTag()")]),t._v(" method must be called before\n"),s("a",{attrs:{href:"#crypto_decipher_final_outputencoding"}},[s("code",[t._v("decipher.final()")])]),t._v(" and can only be called once.")]),t._v(" "),s("h3",{attrs:{id:"decipher-setautopadding-autopadding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#decipher-setautopadding-autopadding"}},[t._v("#")]),t._v(" decipher.setAutoPadding([autoPadding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("autoPadding")]),t._v(" {boolean} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("true")])]),t._v(" "),s("li",[t._v("Returns: {Decipher} for method chaining.")])]),t._v(" "),s("p",[t._v("When data has been encrypted without standard block padding, calling\n"),s("code",[t._v("decipher.setAutoPadding(false)")]),t._v(" will disable automatic padding to prevent\n"),s("a",{attrs:{href:"#crypto_decipher_final_outputencoding"}},[s("code",[t._v("decipher.final()")])]),t._v(" from checking for and removing padding.")]),t._v(" "),s("p",[t._v("Turning auto padding off will only work if the input data's length is a\nmultiple of the ciphers block size.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("decipher.setAutoPadding()")]),t._v(" method must be called before\n"),s("a",{attrs:{href:"#crypto_decipher_final_outputencoding"}},[s("code",[t._v("decipher.final()")])]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"decipher-update-data-inputencoding-outputencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#decipher-update-data-inputencoding-outputencoding"}},[t._v("#")]),t._v(" decipher.update(data[, inputEncoding][, outputEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("data")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("inputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("data")]),t._v(" string.")],1),t._v(" "),s("li",[s("code",[t._v("outputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Updates the decipher with "),s("code",[t._v("data")]),t._v(". If the "),s("code",[t._v("inputEncoding")]),t._v(" argument is given,\nthe "),s("code",[t._v("data")]),t._v("\nargument is a string using the specified encoding. If the "),s("code",[t._v("inputEncoding")]),t._v("\nargument is not given, "),s("code",[t._v("data")]),t._v(" must be a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(". If "),s("code",[t._v("data")]),t._v(" is a\n"),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" then "),s("code",[t._v("inputEncoding")]),t._v(" is ignored.")],1),t._v(" "),s("p",[t._v("The "),s("code",[t._v("outputEncoding")]),t._v(" specifies the output format of the enciphered\ndata. If the "),s("code",[t._v("outputEncoding")]),t._v("\nis specified, a string using the specified encoding is returned. If no\n"),s("code",[t._v("outputEncoding")]),t._v(" is provided, a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned.")],1),t._v(" "),s("p",[t._v("The "),s("code",[t._v("decipher.update()")]),t._v(" method can be called multiple times with new data until\n"),s("a",{attrs:{href:"#crypto_decipher_final_outputencoding"}},[s("code",[t._v("decipher.final()")])]),t._v(" is called. Calling "),s("code",[t._v("decipher.update()")]),t._v(" after\n"),s("a",{attrs:{href:"#crypto_decipher_final_outputencoding"}},[s("code",[t._v("decipher.final()")])]),t._v(" will result in an error being thrown.")]),t._v(" "),s("h2",{attrs:{id:"class-diffiehellman"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-diffiehellman"}},[t._v("#")]),t._v(" Class: DiffieHellman")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("DiffieHellman")]),t._v(" class is a utility for creating Diffie-Hellman key\nexchanges.")]),t._v(" "),s("p",[t._v("Instances of the "),s("code",[t._v("DiffieHellman")]),t._v(" class can be created using the\n"),s("a",{attrs:{href:"#crypto_crypto_creatediffiehellman_prime_primeencoding_generator_generatorencoding"}},[s("code",[t._v("crypto.createDiffieHellman()")])]),t._v(" function.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" assert "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'assert'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Generate Alice's keys...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" alice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDiffieHellman")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2048")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" aliceKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateKeys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Generate Bob's keys...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bob "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDiffieHellman")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("alice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" alice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getGenerator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bobKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bob"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateKeys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Exchange and generate the secret...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" aliceSecret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeSecret")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bobKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bobSecret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bob"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeSecret")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aliceKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\nassert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strictEqual")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aliceSecret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bobSecret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"diffiehellman-computesecret-otherpublickey-inputencoding-outputencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diffiehellman-computesecret-otherpublickey-inputencoding-outputencoding"}},[t._v("#")]),t._v(" diffieHellman.computeSecret(otherPublicKey[, inputEncoding][, outputEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("otherPublicKey")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("inputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of an "),s("code",[t._v("otherPublicKey")]),t._v(" string.")],1),t._v(" "),s("li",[s("code",[t._v("outputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Computes the shared secret using "),s("code",[t._v("otherPublicKey")]),t._v(" as the other\nparty's public key and returns the computed shared secret. The supplied\nkey is interpreted using the specified "),s("code",[t._v("inputEncoding")]),t._v(", and secret is\nencoded using specified "),s("code",[t._v("outputEncoding")]),t._v(".\nIf the "),s("code",[t._v("inputEncoding")]),t._v(" is not\nprovided, "),s("code",[t._v("otherPublicKey")]),t._v(" is expected to be a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(",\n"),s("code",[t._v("TypedArray")]),t._v(", or "),s("code",[t._v("DataView")]),t._v(".")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("outputEncoding")]),t._v(" is given a string is returned; otherwise, a\n"),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned.")],1),t._v(" "),s("h3",{attrs:{id:"diffiehellman-generatekeys-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diffiehellman-generatekeys-encoding"}},[t._v("#")]),t._v(" diffieHellman.generateKeys([encoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Generates private and public Diffie-Hellman key values, and returns\nthe public key in the specified "),s("code",[t._v("encoding")]),t._v(". This key should be\ntransferred to the other party.\nIf "),s("code",[t._v("encoding")]),t._v(" is provided a string is returned; otherwise a\n"),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned.")],1),t._v(" "),s("h3",{attrs:{id:"diffiehellman-getgenerator-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diffiehellman-getgenerator-encoding"}},[t._v("#")]),t._v(" diffieHellman.getGenerator([encoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Returns the Diffie-Hellman generator in the specified "),s("code",[t._v("encoding")]),t._v(".\nIf "),s("code",[t._v("encoding")]),t._v(" is provided a string is\nreturned; otherwise a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned.")],1),t._v(" "),s("h3",{attrs:{id:"diffiehellman-getprime-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diffiehellman-getprime-encoding"}},[t._v("#")]),t._v(" diffieHellman.getPrime([encoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Returns the Diffie-Hellman prime in the specified "),s("code",[t._v("encoding")]),t._v(".\nIf "),s("code",[t._v("encoding")]),t._v(" is provided a string is\nreturned; otherwise a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned.")],1),t._v(" "),s("h3",{attrs:{id:"diffiehellman-getprivatekey-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diffiehellman-getprivatekey-encoding"}},[t._v("#")]),t._v(" diffieHellman.getPrivateKey([encoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Returns the Diffie-Hellman private key in the specified "),s("code",[t._v("encoding")]),t._v(".\nIf "),s("code",[t._v("encoding")]),t._v(" is provided a\nstring is returned; otherwise a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned.")],1),t._v(" "),s("h3",{attrs:{id:"diffiehellman-getpublickey-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diffiehellman-getpublickey-encoding"}},[t._v("#")]),t._v(" diffieHellman.getPublicKey([encoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Returns the Diffie-Hellman public key in the specified "),s("code",[t._v("encoding")]),t._v(".\nIf "),s("code",[t._v("encoding")]),t._v(" is provided a\nstring is returned; otherwise a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned.")],1),t._v(" "),s("h3",{attrs:{id:"diffiehellman-setprivatekey-privatekey-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diffiehellman-setprivatekey-privatekey-encoding"}},[t._v("#")]),t._v(" diffieHellman.setPrivateKey(privateKey[, encoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("privateKey")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("privateKey")]),t._v(" string.")],1)]),t._v(" "),s("p",[t._v("Sets the Diffie-Hellman private key. If the "),s("code",[t._v("encoding")]),t._v(" argument is provided,\n"),s("code",[t._v("privateKey")]),t._v(" is expected\nto be a string. If no "),s("code",[t._v("encoding")]),t._v(" is provided, "),s("code",[t._v("privateKey")]),t._v(" is expected\nto be a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or "),s("code",[t._v("DataView")]),t._v(".")],1),t._v(" "),s("h3",{attrs:{id:"diffiehellman-setpublickey-publickey-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diffiehellman-setpublickey-publickey-encoding"}},[t._v("#")]),t._v(" diffieHellman.setPublicKey(publicKey[, encoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("publicKey")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("publicKey")]),t._v(" string.")],1)]),t._v(" "),s("p",[t._v("Sets the Diffie-Hellman public key. If the "),s("code",[t._v("encoding")]),t._v(" argument is provided,\n"),s("code",[t._v("publicKey")]),t._v(" is expected\nto be a string. If no "),s("code",[t._v("encoding")]),t._v(" is provided, "),s("code",[t._v("publicKey")]),t._v(" is expected\nto be a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or "),s("code",[t._v("DataView")]),t._v(".")],1),t._v(" "),s("h3",{attrs:{id:"diffiehellman-verifyerror"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diffiehellman-verifyerror"}},[t._v("#")]),t._v(" diffieHellman.verifyError")]),t._v(" "),s("p",[t._v("A bit field containing any warnings and/or errors resulting from a check\nperformed during initialization of the "),s("code",[t._v("DiffieHellman")]),t._v(" object.")]),t._v(" "),s("p",[t._v("The following values are valid for this property (as defined in "),s("code",[t._v("constants")]),t._v("\nmodule):")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("DH_CHECK_P_NOT_SAFE_PRIME")])]),t._v(" "),s("li",[s("code",[t._v("DH_CHECK_P_NOT_PRIME")])]),t._v(" "),s("li",[s("code",[t._v("DH_UNABLE_TO_CHECK_GENERATOR")])]),t._v(" "),s("li",[s("code",[t._v("DH_NOT_SUITABLE_GENERATOR")])])]),t._v(" "),s("h2",{attrs:{id:"class-diffiehellmangroup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-diffiehellmangroup"}},[t._v("#")]),t._v(" Class: DiffieHellmanGroup")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("DiffieHellmanGroup")]),t._v(" class takes a well-known modp group as its argument but\notherwise works the same as "),s("code",[t._v("DiffieHellman")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'modp1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDiffieHellmanGroup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("name")]),t._v(" is taken from "),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc2412.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 2412"),s("OutboundLink")],1),t._v(" (modp1 and 2) and "),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc3526.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 3526"),s("OutboundLink")],1),t._v(":")]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('$ perl -ne \'print "$1\\n" if /"(modp\\d+)"/\' src/node_crypto_groups.h\nmodp1  #  768 bits\nmodp2  # 1024 bits\nmodp5  # 1536 bits\nmodp14 # 2048 bits\nmodp15 # etc.\nmodp16\nmodp17\nmodp18\n')])])]),s("h2",{attrs:{id:"class-ecdh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-ecdh"}},[t._v("#")]),t._v(" Class: ECDH")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("ECDH")]),t._v(" class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH)\nkey exchanges.")]),t._v(" "),s("p",[t._v("Instances of the "),s("code",[t._v("ECDH")]),t._v(" class can be created using the\n"),s("a",{attrs:{href:"#crypto_crypto_createecdh_curvename"}},[s("code",[t._v("crypto.createECDH()")])]),t._v(" function.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" assert "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'assert'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Generate Alice's keys...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" alice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createECDH")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secp521r1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" aliceKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateKeys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Generate Bob's keys...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bob "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createECDH")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secp521r1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bobKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bob"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateKeys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Exchange and generate the secret...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" aliceSecret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeSecret")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bobKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bobSecret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bob"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeSecret")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aliceKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nassert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strictEqual")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aliceSecret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bobSecret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\n")])])]),s("h3",{attrs:{id:"class-method-ecdh-convertkey-key-curve-inputencoding-outputencoding-format"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-method-ecdh-convertkey-key-curve-inputencoding-outputencoding-format"}},[t._v("#")]),t._v(" Class Method: ECDH.convertKey(key, curve[, inputEncoding[, outputEncoding[, format]]])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("key")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("curve")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("inputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("key")]),t._v(" string.")],1),t._v(" "),s("li",[s("code",[t._v("outputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[s("code",[t._v("format")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'uncompressed'")])]),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Converts the EC Diffie-Hellman public key specified by "),s("code",[t._v("key")]),t._v(" and "),s("code",[t._v("curve")]),t._v(" to the\nformat specified by "),s("code",[t._v("format")]),t._v(". The "),s("code",[t._v("format")]),t._v(" argument specifies point encoding\nand can be "),s("code",[t._v("'compressed'")]),t._v(", "),s("code",[t._v("'uncompressed'")]),t._v(" or "),s("code",[t._v("'hybrid'")]),t._v(". The supplied key is\ninterpreted using the specified "),s("code",[t._v("inputEncoding")]),t._v(", and the returned key is encoded\nusing the specified "),s("code",[t._v("outputEncoding")]),t._v(".")]),t._v(" "),s("p",[t._v("Use "),s("a",{attrs:{href:"#crypto_crypto_getcurves"}},[s("code",[t._v("crypto.getCurves()")])]),t._v(" to obtain a list of available curve names.\nOn recent OpenSSL releases, "),s("code",[t._v("openssl ecparam -list_curves")]),t._v(" will also display\nthe name and description of each available elliptic curve.")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("format")]),t._v(" is not specified the point will be returned in "),s("code",[t._v("'uncompressed'")]),t._v("\nformat.")]),t._v(" "),s("p",[t._v("If the "),s("code",[t._v("inputEncoding")]),t._v(" is not provided, "),s("code",[t._v("key")]),t._v(" is expected to be a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(",\n"),s("code",[t._v("TypedArray")]),t._v(", or "),s("code",[t._v("DataView")]),t._v(".")],1),t._v(" "),s("p",[t._v("Example (uncompressing a key):")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createECDH"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ECDH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ecdh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createECDH")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secp256k1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\necdh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateKeys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" compressedKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ecdh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPublicKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'compressed'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" uncompressedKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ECDH")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("convertKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compressedKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secp256k1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'uncompressed'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The converted key and the uncompressed public key should be the same")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uncompressedKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" ecdh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPublicKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"ecdh-computesecret-otherpublickey-inputencoding-outputencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ecdh-computesecret-otherpublickey-inputencoding-outputencoding"}},[t._v("#")]),t._v(" ecdh.computeSecret(otherPublicKey[, inputEncoding][, outputEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("otherPublicKey")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("inputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("otherPublicKey")]),t._v(" string.")],1),t._v(" "),s("li",[s("code",[t._v("outputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Computes the shared secret using "),s("code",[t._v("otherPublicKey")]),t._v(" as the other\nparty's public key and returns the computed shared secret. The supplied\nkey is interpreted using specified "),s("code",[t._v("inputEncoding")]),t._v(", and the returned secret\nis encoded using the specified "),s("code",[t._v("outputEncoding")]),t._v(".\nIf the "),s("code",[t._v("inputEncoding")]),t._v(" is not\nprovided, "),s("code",[t._v("otherPublicKey")]),t._v(" is expected to be a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or\n"),s("code",[t._v("DataView")]),t._v(".")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("outputEncoding")]),t._v(" is given a string will be returned; otherwise a\n"),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned.")],1),t._v(" "),s("p",[s("code",[t._v("ecdh.computeSecret")]),t._v(" will throw an\n"),s("code",[t._v("ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY")]),t._v(" error when "),s("code",[t._v("otherPublicKey")]),t._v("\nlies outside of the elliptic curve. Since "),s("code",[t._v("otherPublicKey")]),t._v(" is\nusually supplied from a remote user over an insecure network,\nits recommended for developers to handle this exception accordingly.")]),t._v(" "),s("h3",{attrs:{id:"ecdh-generatekeys-encoding-format"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ecdh-generatekeys-encoding-format"}},[t._v("#")]),t._v(" ecdh.generateKeys([encoding[, format]])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[s("code",[t._v("format")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'uncompressed'")])]),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Generates private and public EC Diffie-Hellman key values, and returns\nthe public key in the specified "),s("code",[t._v("format")]),t._v(" and "),s("code",[t._v("encoding")]),t._v(". This key should be\ntransferred to the other party.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("format")]),t._v(" argument specifies point encoding and can be "),s("code",[t._v("'compressed'")]),t._v(" or\n"),s("code",[t._v("'uncompressed'")]),t._v(". If "),s("code",[t._v("format")]),t._v(" is not specified, the point will be returned in\n"),s("code",[t._v("'uncompressed'")]),t._v(" format.")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("encoding")]),t._v(" is provided a string is returned; otherwise a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v("\nis returned.")],1),t._v(" "),s("h3",{attrs:{id:"ecdh-getprivatekey-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ecdh-getprivatekey-encoding"}},[t._v("#")]),t._v(" ecdh.getPrivateKey([encoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string} The EC Diffie-Hellman in the specified "),s("code",[t._v("encoding")]),t._v(".")])]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("encoding")]),t._v(" is specified, a string is returned; otherwise a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is\nreturned.")],1),t._v(" "),s("h3",{attrs:{id:"ecdh-getpublickey-encoding-format"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ecdh-getpublickey-encoding-format"}},[t._v("#")]),t._v(" ecdh.getPublicKey([encoding][, format])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[s("code",[t._v("format")]),t._v(" {string} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'uncompressed'")])]),t._v(" "),s("li",[t._v("Returns: {Buffer | string} The EC Diffie-Hellman public key in the specified\n"),s("code",[t._v("encoding")]),t._v(" and "),s("code",[t._v("format")]),t._v(".")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("format")]),t._v(" argument specifies point encoding and can be "),s("code",[t._v("'compressed'")]),t._v(" or\n"),s("code",[t._v("'uncompressed'")]),t._v(". If "),s("code",[t._v("format")]),t._v(" is not specified the point will be returned in\n"),s("code",[t._v("'uncompressed'")]),t._v(" format.")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("encoding")]),t._v(" is specified, a string is returned; otherwise a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is\nreturned.")],1),t._v(" "),s("h3",{attrs:{id:"ecdh-setprivatekey-privatekey-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ecdh-setprivatekey-privatekey-encoding"}},[t._v("#")]),t._v(" ecdh.setPrivateKey(privateKey[, encoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("privateKey")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("privateKey")]),t._v(" string.")],1)]),t._v(" "),s("p",[t._v("Sets the EC Diffie-Hellman private key.\nIf "),s("code",[t._v("encoding")]),t._v(" is provided, "),s("code",[t._v("privateKey")]),t._v(" is expected\nto be a string; otherwise "),s("code",[t._v("privateKey")]),t._v(" is expected to be a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(",\n"),s("code",[t._v("TypedArray")]),t._v(", or "),s("code",[t._v("DataView")]),t._v(".")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("privateKey")]),t._v(" is not valid for the curve specified when the "),s("code",[t._v("ECDH")]),t._v(" object was\ncreated, an error is thrown. Upon setting the private key, the associated\npublic point (key) is also generated and set in the "),s("code",[t._v("ECDH")]),t._v(" object.")]),t._v(" "),s("h3",{attrs:{id:"ecdh-setpublickey-publickey-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ecdh-setpublickey-publickey-encoding"}},[t._v("#")]),t._v(" ecdh.setPublicKey(publicKey[, encoding])")]),t._v(" "),s("blockquote",[s("p",[t._v("Stability: 0 - Deprecated")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("publicKey")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("publicKey")]),t._v(" string.")],1)]),t._v(" "),s("p",[t._v("Sets the EC Diffie-Hellman public key.\nIf "),s("code",[t._v("encoding")]),t._v(" is provided "),s("code",[t._v("publicKey")]),t._v(" is expected to\nbe a string; otherwise a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or "),s("code",[t._v("DataView")]),t._v(" is expected.")],1),t._v(" "),s("p",[t._v("There is not normally a reason to call this method because "),s("code",[t._v("ECDH")]),t._v("\nonly requires a private key and the other party's public key to compute the\nshared secret. Typically either "),s("a",{attrs:{href:"#crypto_ecdh_generatekeys_encoding_format"}},[s("code",[t._v("ecdh.generateKeys()")])]),t._v(" or\n"),s("a",{attrs:{href:"#crypto_ecdh_setprivatekey_privatekey_encoding"}},[s("code",[t._v("ecdh.setPrivateKey()")])]),t._v(" will be called. The "),s("a",{attrs:{href:"#crypto_ecdh_setprivatekey_privatekey_encoding"}},[s("code",[t._v("ecdh.setPrivateKey()")])]),t._v(" method\nattempts to generate the public point/key associated with the private key being\nset.")]),t._v(" "),s("p",[t._v("Example (obtaining a shared secret):")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" alice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createECDH")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secp256k1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bob "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createECDH")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secp256k1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is a shortcut way of specifying one of Alice's previous private")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// keys. It would be unwise to use such a predictable private key in a real")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// application.")]),t._v("\nalice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPrivateKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'alice'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Bob uses a newly generated cryptographically strong")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pseudorandom key pair")]),t._v("\nbob"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateKeys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" aliceSecret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeSecret")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bob"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPublicKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bobSecret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bob"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeSecret")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("alice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPublicKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// aliceSecret and bobSecret should be the same shared secret value")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aliceSecret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" bobSecret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"class-hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-hash"}},[t._v("#")]),t._v(" Class: Hash")]),t._v(" "),s("ul",[s("li",[t._v("Extends: {stream.Transform}")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Hash")]),t._v(" class is a utility for creating hash digests of data. It can be\nused in one of two ways:")]),t._v(" "),s("ul",[s("li",[t._v("As a "),s("router-link",{attrs:{to:"/node/stream.html"}},[t._v("stream")]),t._v(" that is both readable and writable, where data is written\nto produce a computed hash digest on the readable side, or")],1),t._v(" "),s("li",[t._v("Using the "),s("a",{attrs:{href:"#crypto_hash_update_data_inputencoding"}},[s("code",[t._v("hash.update()")])]),t._v(" and "),s("a",{attrs:{href:"#crypto_hash_digest_encoding"}},[s("code",[t._v("hash.digest()")])]),t._v(" methods to produce the\ncomputed hash.")])]),t._v(" "),s("p",[t._v("The "),s("a",{attrs:{href:"#crypto_crypto_createhash_algorithm_options"}},[s("code",[t._v("crypto.createHash()")])]),t._v(" method is used to create "),s("code",[t._v("Hash")]),t._v(" instances. "),s("code",[t._v("Hash")]),t._v("\nobjects are not to be created directly using the "),s("code",[t._v("new")]),t._v(" keyword.")]),t._v(" "),s("p",[t._v("Example: Using "),s("code",[t._v("Hash")]),t._v(" objects as streams:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readable'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Only one element is going to be produced by the")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hash stream.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some data to hash'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nhash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Example: Using "),s("code",[t._v("Hash")]),t._v(" and piped streams:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" input "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Example: Using the "),s("a",{attrs:{href:"#crypto_hash_update_data_inputencoding"}},[s("code",[t._v("hash.update()")])]),t._v(" and "),s("a",{attrs:{href:"#crypto_hash_digest_encoding"}},[s("code",[t._v("hash.digest()")])]),t._v(" methods:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some data to hash'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50")]),t._v("\n")])])]),s("h3",{attrs:{id:"hash-copy-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash-copy-options"}},[t._v("#")]),t._v(" hash.copy([options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("options")]),t._v(" {Object} "),s("router-link",{attrs:{to:"/node/stream.html#stream_new_stream_transform_options"}},[s("code",[t._v("stream.transform")]),t._v(" options")])],1),t._v(" "),s("li",[t._v("Returns: {Hash}")])]),t._v(" "),s("p",[t._v("Creates a new "),s("code",[t._v("Hash")]),t._v(" object that contains a deep copy of the internal state\nof the current "),s("code",[t._v("Hash")]),t._v(" object.")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("options")]),t._v(" argument controls stream behavior. For XOF hash\nfunctions such as "),s("code",[t._v("'shake256'")]),t._v(", the "),s("code",[t._v("outputLength")]),t._v(" option can be used to\nspecify the desired output length in bytes.")]),t._v(" "),s("p",[t._v("An error is thrown when an attempt is made to copy the "),s("code",[t._v("Hash")]),t._v(" object after\nits "),s("a",{attrs:{href:"#crypto_hash_digest_encoding"}},[s("code",[t._v("hash.digest()")])]),t._v(" method has been called.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Calculate a rolling hash.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'one'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'two'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'three'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Etc.")]),t._v("\n")])])]),s("h3",{attrs:{id:"hash-digest-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash-digest-encoding"}},[t._v("#")]),t._v(" hash.digest([encoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Calculates the digest of all of the data passed to be hashed (using the\n"),s("a",{attrs:{href:"#crypto_hash_update_data_inputencoding"}},[s("code",[t._v("hash.update()")])]),t._v(" method).\nIf "),s("code",[t._v("encoding")]),t._v(" is provided a string will be returned; otherwise\na "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned.")],1),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Hash")]),t._v(" object can not be used again after "),s("code",[t._v("hash.digest()")]),t._v(" method has been\ncalled. Multiple calls will cause an error to be thrown.")]),t._v(" "),s("h3",{attrs:{id:"hash-update-data-inputencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash-update-data-inputencoding"}},[t._v("#")]),t._v(" hash.update(data[, inputEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("data")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("inputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("data")]),t._v(" string.")],1)]),t._v(" "),s("p",[t._v("Updates the hash content with the given "),s("code",[t._v("data")]),t._v(", the encoding of which\nis given in "),s("code",[t._v("inputEncoding")]),t._v(".\nIf "),s("code",[t._v("encoding")]),t._v(" is not provided, and the "),s("code",[t._v("data")]),t._v(" is a string, an\nencoding of "),s("code",[t._v("'utf8'")]),t._v(" is enforced. If "),s("code",[t._v("data")]),t._v(" is a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or\n"),s("code",[t._v("DataView")]),t._v(", then "),s("code",[t._v("inputEncoding")]),t._v(" is ignored.")],1),t._v(" "),s("p",[t._v("This can be called many times with new data as it is streamed.")]),t._v(" "),s("h2",{attrs:{id:"class-hmac"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-hmac"}},[t._v("#")]),t._v(" Class: Hmac")]),t._v(" "),s("ul",[s("li",[t._v("Extends: {stream.Transform}")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Hmac")]),t._v(" class is a utility for creating cryptographic HMAC digests. It can\nbe used in one of two ways:")]),t._v(" "),s("ul",[s("li",[t._v("As a "),s("router-link",{attrs:{to:"/node/stream.html"}},[t._v("stream")]),t._v(" that is both readable and writable, where data is written\nto produce a computed HMAC digest on the readable side, or")],1),t._v(" "),s("li",[t._v("Using the "),s("a",{attrs:{href:"#crypto_hmac_update_data_inputencoding"}},[s("code",[t._v("hmac.update()")])]),t._v(" and "),s("a",{attrs:{href:"#crypto_hmac_digest_encoding"}},[s("code",[t._v("hmac.digest()")])]),t._v(" methods to produce the\ncomputed HMAC digest.")])]),t._v(" "),s("p",[t._v("The "),s("a",{attrs:{href:"#crypto_crypto_createhmac_algorithm_key_options"}},[s("code",[t._v("crypto.createHmac()")])]),t._v(" method is used to create "),s("code",[t._v("Hmac")]),t._v(" instances. "),s("code",[t._v("Hmac")]),t._v("\nobjects are not to be created directly using the "),s("code",[t._v("new")]),t._v(" keyword.")]),t._v(" "),s("p",[t._v("Example: Using "),s("code",[t._v("Hmac")]),t._v(" objects as streams:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hmac "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHmac")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a secret'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhmac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readable'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Only one element is going to be produced by the")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hash stream.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hmac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhmac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some data to hash'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nhmac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Example: Using "),s("code",[t._v("Hmac")]),t._v(" and piped streams:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hmac "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHmac")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a secret'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" input "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hmac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Example: Using the "),s("a",{attrs:{href:"#crypto_hmac_update_data_inputencoding"}},[s("code",[t._v("hmac.update()")])]),t._v(" and "),s("a",{attrs:{href:"#crypto_hmac_digest_encoding"}},[s("code",[t._v("hmac.digest()")])]),t._v(" methods:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hmac "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHmac")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a secret'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhmac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some data to hash'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hmac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e")]),t._v("\n")])])]),s("h3",{attrs:{id:"hmac-digest-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hmac-digest-encoding"}},[t._v("#")]),t._v(" hmac.digest([encoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("encoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Calculates the HMAC digest of all of the data passed using "),s("a",{attrs:{href:"#crypto_hmac_update_data_inputencoding"}},[s("code",[t._v("hmac.update()")])]),t._v(".\nIf "),s("code",[t._v("encoding")]),t._v(" is\nprovided a string is returned; otherwise a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" is returned;")],1),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Hmac")]),t._v(" object can not be used again after "),s("code",[t._v("hmac.digest()")]),t._v(" has been\ncalled. Multiple calls to "),s("code",[t._v("hmac.digest()")]),t._v(" will result in an error being thrown.")]),t._v(" "),s("h3",{attrs:{id:"hmac-update-data-inputencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hmac-update-data-inputencoding"}},[t._v("#")]),t._v(" hmac.update(data[, inputEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("data")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("inputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("data")]),t._v(" string.")],1)]),t._v(" "),s("p",[t._v("Updates the "),s("code",[t._v("Hmac")]),t._v(" content with the given "),s("code",[t._v("data")]),t._v(", the encoding of which\nis given in "),s("code",[t._v("inputEncoding")]),t._v(".\nIf "),s("code",[t._v("encoding")]),t._v(" is not provided, and the "),s("code",[t._v("data")]),t._v(" is a string, an\nencoding of "),s("code",[t._v("'utf8'")]),t._v(" is enforced. If "),s("code",[t._v("data")]),t._v(" is a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or\n"),s("code",[t._v("DataView")]),t._v(", then "),s("code",[t._v("inputEncoding")]),t._v(" is ignored.")],1),t._v(" "),s("p",[t._v("This can be called many times with new data as it is streamed.")]),t._v(" "),s("h2",{attrs:{id:"class-keyobject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-keyobject"}},[t._v("#")]),t._v(" Class: KeyObject")]),t._v(" "),s("p",[t._v("Node.js uses a "),s("code",[t._v("KeyObject")]),t._v(" class to represent a symmetric or asymmetric key,\nand each kind of key exposes different functions. The\n"),s("a",{attrs:{href:"#crypto_crypto_createsecretkey_key"}},[s("code",[t._v("crypto.createSecretKey()")])]),t._v(", "),s("a",{attrs:{href:"#crypto_crypto_createpublickey_key"}},[s("code",[t._v("crypto.createPublicKey()")])]),t._v(" and\n"),s("a",{attrs:{href:"#crypto_crypto_createprivatekey_key"}},[s("code",[t._v("crypto.createPrivateKey()")])]),t._v(" methods are used to create "),s("code",[t._v("KeyObject")]),t._v("\ninstances. "),s("code",[t._v("KeyObject")]),t._v(" objects are not to be created directly using the "),s("code",[t._v("new")]),t._v("\nkeyword.")]),t._v(" "),s("p",[t._v("Most applications should consider using the new "),s("code",[t._v("KeyObject")]),t._v(" API instead of\npassing keys as strings or "),s("code",[t._v("Buffer")]),t._v("s due to improved security features.")]),t._v(" "),s("h3",{attrs:{id:"keyobject-asymmetrickeytype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keyobject-asymmetrickeytype"}},[t._v("#")]),t._v(" keyObject.asymmetricKeyType")]),t._v(" "),s("ul",[s("li",[t._v("{string}")])]),t._v(" "),s("p",[t._v("For asymmetric keys, this property represents the type of the key. Supported key\ntypes are:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("'rsa'")]),t._v(" (OID 1.2.840.113549.1.1.1)")]),t._v(" "),s("li",[s("code",[t._v("'rsa-pss'")]),t._v(" (OID 1.2.840.113549.1.1.10)")]),t._v(" "),s("li",[s("code",[t._v("'dsa'")]),t._v(" (OID 1.2.840.10040.4.1)")]),t._v(" "),s("li",[s("code",[t._v("'ec'")]),t._v(" (OID 1.2.840.10045.2.1)")]),t._v(" "),s("li",[s("code",[t._v("'x25519'")]),t._v(" (OID 1.3.101.110)")]),t._v(" "),s("li",[s("code",[t._v("'x448'")]),t._v(" (OID 1.3.101.111)")]),t._v(" "),s("li",[s("code",[t._v("'ed25519'")]),t._v(" (OID 1.3.101.112)")]),t._v(" "),s("li",[s("code",[t._v("'ed448'")]),t._v(" (OID 1.3.101.113)")])]),t._v(" "),s("p",[t._v("This property is "),s("code",[t._v("undefined")]),t._v(" for unrecognized "),s("code",[t._v("KeyObject")]),t._v(" types and symmetric\nkeys.")]),t._v(" "),s("h3",{attrs:{id:"keyobject-export-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keyobject-export-options"}},[t._v("#")]),t._v(" keyObject.export([options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("options")]),t._v(": {Object}")]),t._v(" "),s("li",[t._v("Returns: {string | Buffer}")])]),t._v(" "),s("p",[t._v("For symmetric keys, this function allocates a "),s("code",[t._v("Buffer")]),t._v(" containing the key\nmaterial and ignores any options.")]),t._v(" "),s("p",[t._v("For asymmetric keys, the "),s("code",[t._v("options")]),t._v(" parameter is used to determine the export\nformat.")]),t._v(" "),s("p",[t._v("For public keys, the following encoding options can be used:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("type")]),t._v(": {string} Must be one of "),s("code",[t._v("'pkcs1'")]),t._v(" (RSA only) or "),s("code",[t._v("'spki'")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("format")]),t._v(": {string} Must be "),s("code",[t._v("'pem'")]),t._v(" or "),s("code",[t._v("'der'")]),t._v(".")])]),t._v(" "),s("p",[t._v("For private keys, the following encoding options can be used:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("type")]),t._v(": {string} Must be one of "),s("code",[t._v("'pkcs1'")]),t._v(" (RSA only), "),s("code",[t._v("'pkcs8'")]),t._v(" or\n"),s("code",[t._v("'sec1'")]),t._v(" (EC only).")]),t._v(" "),s("li",[s("code",[t._v("format")]),t._v(": {string} Must be "),s("code",[t._v("'pem'")]),t._v(" or "),s("code",[t._v("'der'")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("cipher")]),t._v(": {string} If specified, the private key will be encrypted with\nthe given "),s("code",[t._v("cipher")]),t._v(" and "),s("code",[t._v("passphrase")]),t._v(" using PKCS#5 v2.0 password based\nencryption.")]),t._v(" "),s("li",[s("code",[t._v("passphrase")]),t._v(": {string | Buffer} The passphrase to use for encryption, see\n"),s("code",[t._v("cipher")]),t._v(".")])]),t._v(" "),s("p",[t._v("When PEM encoding was selected, the result will be a string, otherwise it will\nbe a buffer containing the data encoded as DER.")]),t._v(" "),s("p",[t._v("PKCS#1, SEC1, and PKCS#8 type keys can be encrypted by using a combination of\nthe "),s("code",[t._v("cipher")]),t._v(" and "),s("code",[t._v("format")]),t._v(" options. The PKCS#8 "),s("code",[t._v("type")]),t._v(" can be used with any\n"),s("code",[t._v("format")]),t._v(" to encrypt any key algorithm (RSA, EC, or DH) by specifying a\n"),s("code",[t._v("cipher")]),t._v(". PKCS#1 and SEC1 can only be encrypted by specifying a "),s("code",[t._v("cipher")]),t._v("\nwhen the PEM "),s("code",[t._v("format")]),t._v(" is used. For maximum compatibility, use PKCS#8 for\nencrypted private keys. Since PKCS#8 defines its own\nencryption mechanism, PEM-level encryption is not supported when encrypting\na PKCS#8 key. See "),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc5208.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 5208"),s("OutboundLink")],1),t._v(" for PKCS#8 encryption and "),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc1421.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 1421"),s("OutboundLink")],1),t._v(" for\nPKCS#1 and SEC1 encryption.")]),t._v(" "),s("h3",{attrs:{id:"keyobject-symmetrickeysize"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keyobject-symmetrickeysize"}},[t._v("#")]),t._v(" keyObject.symmetricKeySize")]),t._v(" "),s("ul",[s("li",[t._v("{number}")])]),t._v(" "),s("p",[t._v("For secret keys, this property represents the size of the key in bytes. This\nproperty is "),s("code",[t._v("undefined")]),t._v(" for asymmetric keys.")]),t._v(" "),s("h3",{attrs:{id:"keyobject-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keyobject-type"}},[t._v("#")]),t._v(" keyObject.type")]),t._v(" "),s("ul",[s("li",[t._v("{string}")])]),t._v(" "),s("p",[t._v("Depending on the type of this "),s("code",[t._v("KeyObject")]),t._v(", this property is either\n"),s("code",[t._v("'secret'")]),t._v(" for secret (symmetric) keys, "),s("code",[t._v("'public'")]),t._v(" for public (asymmetric) keys\nor "),s("code",[t._v("'private'")]),t._v(" for private (asymmetric) keys.")]),t._v(" "),s("h2",{attrs:{id:"class-sign"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-sign"}},[t._v("#")]),t._v(" Class: Sign")]),t._v(" "),s("ul",[s("li",[t._v("Extends: {stream.Writable}")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Sign")]),t._v(" class is a utility for generating signatures. It can be used in one\nof two ways:")]),t._v(" "),s("ul",[s("li",[t._v("As a writable "),s("router-link",{attrs:{to:"/node/stream.html"}},[t._v("stream")]),t._v(", where data to be signed is written and the\n"),s("a",{attrs:{href:"#crypto_sign_sign_privatekey_outputencoding"}},[s("code",[t._v("sign.sign()")])]),t._v(" method is used to generate and return the signature, or")],1),t._v(" "),s("li",[t._v("Using the "),s("a",{attrs:{href:"#crypto_sign_update_data_inputencoding"}},[s("code",[t._v("sign.update()")])]),t._v(" and "),s("a",{attrs:{href:"#crypto_sign_sign_privatekey_outputencoding"}},[s("code",[t._v("sign.sign()")])]),t._v(" methods to produce the\nsignature.")])]),t._v(" "),s("p",[t._v("The "),s("a",{attrs:{href:"#crypto_crypto_createsign_algorithm_options"}},[s("code",[t._v("crypto.createSign()")])]),t._v(" method is used to create "),s("code",[t._v("Sign")]),t._v(" instances. The\nargument is the string name of the hash function to use. "),s("code",[t._v("Sign")]),t._v(" objects are not\nto be created directly using the "),s("code",[t._v("new")]),t._v(" keyword.")]),t._v(" "),s("p",[t._v("Example: Using "),s("code",[t._v("Sign")]),t._v(" and "),s("a",{attrs:{href:"#crypto_class_verify"}},[s("code",[t._v("Verify")])]),t._v(" objects as streams:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" privateKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" publicKey "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateKeyPairSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ec'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  namedCurve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sect239k1'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sign "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createSign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SHA256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsign"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some data to sign'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsign"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" signature "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sign"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("privateKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" verify "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createVerify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SHA256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nverify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some data to sign'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nverify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("verify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("verify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("publicKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" signature"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: true or false")]),t._v("\n")])])]),s("p",[t._v("Example: Using the "),s("a",{attrs:{href:"#crypto_sign_update_data_inputencoding"}},[s("code",[t._v("sign.update()")])]),t._v(" and "),s("a",{attrs:{href:"#crypto_verify_update_data_inputencoding"}},[s("code",[t._v("verify.update()")])]),t._v(" methods:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" privateKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" publicKey "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateKeyPairSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rsa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  modulusLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2048")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sign "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createSign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SHA256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsign"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some data to sign'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsign"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" signature "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sign"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("privateKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" verify "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createVerify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SHA256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nverify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some data to sign'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nverify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("verify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("verify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("publicKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" signature"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: true")]),t._v("\n")])])]),s("h3",{attrs:{id:"sign-sign-privatekey-outputencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sign-sign-privatekey-outputencoding"}},[t._v("#")]),t._v(" sign.sign(privateKey[, outputEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("privateKey")]),t._v(" {Object | string | Buffer | KeyObject}\n"),s("ul",[s("li",[s("code",[t._v("padding")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("saltLength")]),t._v(" {integer}")])])]),t._v(" "),s("li",[s("code",[t._v("outputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the return value.")],1),t._v(" "),s("li",[t._v("Returns: {Buffer | string}")])]),t._v(" "),s("p",[t._v("Calculates the signature on all the data passed through using either\n"),s("a",{attrs:{href:"#crypto_sign_update_data_inputencoding"}},[s("code",[t._v("sign.update()")])]),t._v(" or "),s("router-link",{attrs:{to:"/node/stream.html#stream_writable_write_chunk_encoding_callback"}},[s("code",[t._v("sign.write()")])]),t._v(".")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("privateKey")]),t._v(" is not a "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(", this function behaves as if\n"),s("code",[t._v("privateKey")]),t._v(" had been passed to "),s("a",{attrs:{href:"#crypto_crypto_createprivatekey_key"}},[s("code",[t._v("crypto.createPrivateKey()")])]),t._v(". If it is an\nobject, the following additional properties can be passed:")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("padding")]),t._v(" {integer} Optional padding value for RSA, one of the following:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("crypto.constants.RSA_PKCS1_PADDING")]),t._v(" (default)")]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.RSA_PKCS1_PSS_PADDING")])])]),t._v(" "),s("p",[s("code",[t._v("RSA_PKCS1_PSS_PADDING")]),t._v(" will use MGF1 with the same hash function\nused to sign the message as specified in section 3.1 of "),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc4055.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 4055"),s("OutboundLink")],1),t._v(", unless\nan MGF1 hash function has been specified as part of the key in compliance with\nsection 3.3 of "),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc4055.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 4055"),s("OutboundLink")],1),t._v(".")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("saltLength")]),t._v(" {integer} Salt length for when padding is\n"),s("code",[t._v("RSA_PKCS1_PSS_PADDING")]),t._v(". The special value\n"),s("code",[t._v("crypto.constants.RSA_PSS_SALTLEN_DIGEST")]),t._v(" sets the salt length to the digest\nsize, "),s("code",[t._v("crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN")]),t._v(" (default) sets it to the\nmaximum permissible value.")])])]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("outputEncoding")]),t._v(" is provided a string is returned; otherwise a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v("\nis returned.")],1),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Sign")]),t._v(" object can not be again used after "),s("code",[t._v("sign.sign()")]),t._v(" method has been\ncalled. Multiple calls to "),s("code",[t._v("sign.sign()")]),t._v(" will result in an error being thrown.")]),t._v(" "),s("h3",{attrs:{id:"sign-update-data-inputencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sign-update-data-inputencoding"}},[t._v("#")]),t._v(" sign.update(data[, inputEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("data")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("inputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("data")]),t._v(" string.")],1)]),t._v(" "),s("p",[t._v("Updates the "),s("code",[t._v("Sign")]),t._v(" content with the given "),s("code",[t._v("data")]),t._v(", the encoding of which\nis given in "),s("code",[t._v("inputEncoding")]),t._v(".\nIf "),s("code",[t._v("encoding")]),t._v(" is not provided, and the "),s("code",[t._v("data")]),t._v(" is a string, an\nencoding of "),s("code",[t._v("'utf8'")]),t._v(" is enforced. If "),s("code",[t._v("data")]),t._v(" is a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or\n"),s("code",[t._v("DataView")]),t._v(", then "),s("code",[t._v("inputEncoding")]),t._v(" is ignored.")],1),t._v(" "),s("p",[t._v("This can be called many times with new data as it is streamed.")]),t._v(" "),s("h2",{attrs:{id:"class-verify"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-verify"}},[t._v("#")]),t._v(" Class: Verify")]),t._v(" "),s("ul",[s("li",[t._v("Extends: {stream.Writable}")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Verify")]),t._v(" class is a utility for verifying signatures. It can be used in one\nof two ways:")]),t._v(" "),s("ul",[s("li",[t._v("As a writable "),s("router-link",{attrs:{to:"/node/stream.html"}},[t._v("stream")]),t._v(" where written data is used to validate against the\nsupplied signature, or")],1),t._v(" "),s("li",[t._v("Using the "),s("a",{attrs:{href:"#crypto_verify_update_data_inputencoding"}},[s("code",[t._v("verify.update()")])]),t._v(" and "),s("a",{attrs:{href:"#crypto_verify_verify_object_signature_signatureencoding"}},[s("code",[t._v("verify.verify()")])]),t._v(" methods to verify\nthe signature.")])]),t._v(" "),s("p",[t._v("The "),s("a",{attrs:{href:"#crypto_crypto_createverify_algorithm_options"}},[s("code",[t._v("crypto.createVerify()")])]),t._v(" method is used to create "),s("code",[t._v("Verify")]),t._v(" instances.\n"),s("code",[t._v("Verify")]),t._v(" objects are not to be created directly using the "),s("code",[t._v("new")]),t._v(" keyword.")]),t._v(" "),s("p",[t._v("See "),s("a",{attrs:{href:"#crypto_class_sign"}},[s("code",[t._v("Sign")])]),t._v(" for examples.")]),t._v(" "),s("h3",{attrs:{id:"verify-update-data-inputencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#verify-update-data-inputencoding"}},[t._v("#")]),t._v(" verify.update(data[, inputEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("data")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("inputEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("data")]),t._v(" string.")],1)]),t._v(" "),s("p",[t._v("Updates the "),s("code",[t._v("Verify")]),t._v(" content with the given "),s("code",[t._v("data")]),t._v(", the encoding of which\nis given in "),s("code",[t._v("inputEncoding")]),t._v(".\nIf "),s("code",[t._v("inputEncoding")]),t._v(" is not provided, and the "),s("code",[t._v("data")]),t._v(" is a string, an\nencoding of "),s("code",[t._v("'utf8'")]),t._v(" is enforced. If "),s("code",[t._v("data")]),t._v(" is a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or\n"),s("code",[t._v("DataView")]),t._v(", then "),s("code",[t._v("inputEncoding")]),t._v(" is ignored.")],1),t._v(" "),s("p",[t._v("This can be called many times with new data as it is streamed.")]),t._v(" "),s("h3",{attrs:{id:"verify-verify-object-signature-signatureencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#verify-verify-object-signature-signatureencoding"}},[t._v("#")]),t._v(" verify.verify(object, signature[, signatureEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("object")]),t._v(" {Object | string | Buffer | KeyObject}\n"),s("ul",[s("li",[s("code",[t._v("padding")]),t._v(" {integer}")]),t._v(" "),s("li",[s("code",[t._v("saltLength")]),t._v(" {integer}")])])]),t._v(" "),s("li",[s("code",[t._v("signature")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("signatureEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("signature")]),t._v(" string.")],1),t._v(" "),s("li",[t._v("Returns: {boolean} "),s("code",[t._v("true")]),t._v(" or "),s("code",[t._v("false")]),t._v(" depending on the validity of the\nsignature for the data and public key.")])]),t._v(" "),s("p",[t._v("Verifies the provided data using the given "),s("code",[t._v("object")]),t._v(" and "),s("code",[t._v("signature")]),t._v(".")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("object")]),t._v(" is not a "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(", this function behaves as if\n"),s("code",[t._v("object")]),t._v(" had been passed to "),s("a",{attrs:{href:"#crypto_crypto_createpublickey_key"}},[s("code",[t._v("crypto.createPublicKey()")])]),t._v(". If it is an\nobject, the following additional properties can be passed:")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("padding")]),t._v(" {integer} Optional padding value for RSA, one of the following:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("crypto.constants.RSA_PKCS1_PADDING")]),t._v(" (default)")]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.RSA_PKCS1_PSS_PADDING")])])]),t._v(" "),s("p",[s("code",[t._v("RSA_PKCS1_PSS_PADDING")]),t._v(" will use MGF1 with the same hash function\nused to verify the message as specified in section 3.1 of "),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc4055.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 4055"),s("OutboundLink")],1),t._v(", unless\nan MGF1 hash function has been specified as part of the key in compliance with\nsection 3.3 of "),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc4055.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 4055"),s("OutboundLink")],1),t._v(".")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("saltLength")]),t._v(" {integer} Salt length for when padding is\n"),s("code",[t._v("RSA_PKCS1_PSS_PADDING")]),t._v(". The special value\n"),s("code",[t._v("crypto.constants.RSA_PSS_SALTLEN_DIGEST")]),t._v(" sets the salt length to the digest\nsize, "),s("code",[t._v("crypto.constants.RSA_PSS_SALTLEN_AUTO")]),t._v(" (default) causes it to be\ndetermined automatically.")])])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("signature")]),t._v(" argument is the previously calculated signature for the data, in\nthe "),s("code",[t._v("signatureEncoding")]),t._v(".\nIf a "),s("code",[t._v("signatureEncoding")]),t._v(" is specified, the "),s("code",[t._v("signature")]),t._v(" is expected to be a\nstring; otherwise "),s("code",[t._v("signature")]),t._v(" is expected to be a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(",\n"),s("code",[t._v("TypedArray")]),t._v(", or "),s("code",[t._v("DataView")]),t._v(".")],1),t._v(" "),s("p",[t._v("The "),s("code",[t._v("verify")]),t._v(" object can not be used again after "),s("code",[t._v("verify.verify()")]),t._v(" has been\ncalled. Multiple calls to "),s("code",[t._v("verify.verify()")]),t._v(" will result in an error being\nthrown.")]),t._v(" "),s("p",[t._v("Because public keys can be derived from private keys, a private key may\nbe passed instead of a public key.")]),t._v(" "),s("h2",{attrs:{id:"crypto-module-methods-and-properties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-module-methods-and-properties"}},[t._v("#")]),t._v(" "),s("code",[t._v("crypto")]),t._v(" module methods and properties")]),t._v(" "),s("h3",{attrs:{id:"crypto-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-constants"}},[t._v("#")]),t._v(" crypto.constants")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {Object} An object containing commonly used constants for crypto and\nsecurity related operations. The specific constants currently defined are\ndescribed in "),s("a",{attrs:{href:"#crypto_crypto_constants_1"}},[t._v("Crypto Constants")]),t._v(".")])]),t._v(" "),s("h3",{attrs:{id:"crypto-default-encoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-default-encoding"}},[t._v("#")]),t._v(" crypto.DEFAULT_ENCODING")]),t._v(" "),s("blockquote",[s("p",[t._v("Stability: 0 - Deprecated")])]),t._v(" "),s("p",[t._v("The default encoding to use for functions that can take either strings\nor "),s("router-link",{attrs:{to:"/node/buffer.html"}},[t._v("buffers")]),t._v(". The default value is "),s("code",[t._v("'buffer'")]),t._v(", which makes methods\ndefault to "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" objects.")],1),t._v(" "),s("p",[t._v("The "),s("code",[t._v("crypto.DEFAULT_ENCODING")]),t._v(" mechanism is provided for backwards compatibility\nwith legacy programs that expect "),s("code",[t._v("'latin1'")]),t._v(" to be the default encoding.")]),t._v(" "),s("p",[t._v("New applications should expect the default to be "),s("code",[t._v("'buffer'")]),t._v(".")]),t._v(" "),s("p",[t._v("This property is deprecated.")]),t._v(" "),s("h3",{attrs:{id:"crypto-fips"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-fips"}},[t._v("#")]),t._v(" crypto.fips")]),t._v(" "),s("blockquote",[s("p",[t._v("Stability: 0 - Deprecated")])]),t._v(" "),s("p",[t._v("Property for checking and controlling whether a FIPS compliant crypto provider\nis currently in use. Setting to true requires a FIPS build of Node.js.")]),t._v(" "),s("p",[t._v("This property is deprecated. Please use "),s("code",[t._v("crypto.setFips()")]),t._v(" and\n"),s("code",[t._v("crypto.getFips()")]),t._v(" instead.")]),t._v(" "),s("h3",{attrs:{id:"crypto-createcipher-algorithm-password-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-createcipher-algorithm-password-options"}},[t._v("#")]),t._v(" crypto.createCipher(algorithm, password[, options])")]),t._v(" "),s("blockquote",[s("p",[t._v("Stability: 0 - Deprecated: Use "),s("a",{attrs:{href:"#crypto_crypto_createcipheriv_algorithm_key_iv_options"}},[s("code",[t._v("crypto.createCipheriv()")])]),t._v(" instead.")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("algorithm")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("password")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object} "),s("router-link",{attrs:{to:"/node/stream.html#stream_new_stream_transform_options"}},[s("code",[t._v("stream.transform")]),t._v(" options")])],1),t._v(" "),s("li",[t._v("Returns: {Cipher}")])]),t._v(" "),s("p",[t._v("Creates and returns a "),s("code",[t._v("Cipher")]),t._v(" object that uses the given "),s("code",[t._v("algorithm")]),t._v(" and\n"),s("code",[t._v("password")]),t._v(".")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("options")]),t._v(" argument controls stream behavior and is optional except when a\ncipher in CCM or OCB mode is used (e.g. "),s("code",[t._v("'aes-128-ccm'")]),t._v("). In that case, the\n"),s("code",[t._v("authTagLength")]),t._v(" option is required and specifies the length of the\nauthentication tag in bytes, see "),s("a",{attrs:{href:"#crypto_ccm_mode"}},[t._v("CCM mode")]),t._v(". In GCM mode, the "),s("code",[t._v("authTagLength")]),t._v("\noption is not required but can be used to set the length of the authentication\ntag that will be returned by "),s("code",[t._v("getAuthTag()")]),t._v(" and defaults to 16 bytes.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("algorithm")]),t._v(" is dependent on OpenSSL, examples are "),s("code",[t._v("'aes192'")]),t._v(", etc. On\nrecent OpenSSL releases, "),s("code",[t._v("openssl list -cipher-algorithms")]),t._v("\n("),s("code",[t._v("openssl list-cipher-algorithms")]),t._v(" for older versions of OpenSSL) will\ndisplay the available cipher algorithms.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("password")]),t._v(" is used to derive the cipher key and initialization vector (IV).\nThe value must be either a "),s("code",[t._v("'latin1'")]),t._v(" encoded string, a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", a\n"),s("code",[t._v("TypedArray")]),t._v(", or a "),s("code",[t._v("DataView")]),t._v(".")],1),t._v(" "),s("p",[t._v("The implementation of "),s("code",[t._v("crypto.createCipher()")]),t._v(" derives keys using the OpenSSL\nfunction "),s("a",{attrs:{href:"https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("EVP_BytesToKey")]),s("OutboundLink")],1),t._v(" with the digest algorithm set to MD5, one\niteration, and no salt. The lack of salt allows dictionary attacks as the same\npassword always creates the same key. The low iteration count and\nnon-cryptographically secure hash algorithm allow passwords to be tested very\nrapidly.")]),t._v(" "),s("p",[t._v("In line with OpenSSL's recommendation to use a more modern algorithm instead of\n"),s("a",{attrs:{href:"https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("EVP_BytesToKey")]),s("OutboundLink")],1),t._v(" it is recommended that developers derive a key and IV on\ntheir own using "),s("a",{attrs:{href:"#crypto_crypto_scrypt_password_salt_keylen_options_callback"}},[s("code",[t._v("crypto.scrypt()")])]),t._v(" and to use "),s("a",{attrs:{href:"#crypto_crypto_createcipheriv_algorithm_key_iv_options"}},[s("code",[t._v("crypto.createCipheriv()")])]),t._v("\nto create the "),s("code",[t._v("Cipher")]),t._v(" object. Users should not use ciphers with counter mode\n(e.g. CTR, GCM, or CCM) in "),s("code",[t._v("crypto.createCipher()")]),t._v(". A warning is emitted when\nthey are used in order to avoid the risk of IV reuse that causes\nvulnerabilities. For the case when IV is reused in GCM, see "),s("a",{attrs:{href:"https://github.com/nonce-disrespect/nonce-disrespect",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nonce-Disrespecting\nAdversaries"),s("OutboundLink")],1),t._v(" for details.")]),t._v(" "),s("h3",{attrs:{id:"crypto-createcipheriv-algorithm-key-iv-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-createcipheriv-algorithm-key-iv-options"}},[t._v("#")]),t._v(" crypto.createCipheriv(algorithm, key, iv[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("algorithm")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("key")]),t._v(" {string | Buffer | TypedArray | DataView | KeyObject}")]),t._v(" "),s("li",[s("code",[t._v("iv")]),t._v(" {string | Buffer | TypedArray | DataView | null}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object} "),s("router-link",{attrs:{to:"/node/stream.html#stream_new_stream_transform_options"}},[s("code",[t._v("stream.transform")]),t._v(" options")])],1),t._v(" "),s("li",[t._v("Returns: {Cipher}")])]),t._v(" "),s("p",[t._v("Creates and returns a "),s("code",[t._v("Cipher")]),t._v(" object, with the given "),s("code",[t._v("algorithm")]),t._v(", "),s("code",[t._v("key")]),t._v(" and\ninitialization vector ("),s("code",[t._v("iv")]),t._v(").")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("options")]),t._v(" argument controls stream behavior and is optional except when a\ncipher in CCM or OCB mode is used (e.g. "),s("code",[t._v("'aes-128-ccm'")]),t._v("). In that case, the\n"),s("code",[t._v("authTagLength")]),t._v(" option is required and specifies the length of the\nauthentication tag in bytes, see "),s("a",{attrs:{href:"#crypto_ccm_mode"}},[t._v("CCM mode")]),t._v(". In GCM mode, the "),s("code",[t._v("authTagLength")]),t._v("\noption is not required but can be used to set the length of the authentication\ntag that will be returned by "),s("code",[t._v("getAuthTag()")]),t._v(" and defaults to 16 bytes.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("algorithm")]),t._v(" is dependent on OpenSSL, examples are "),s("code",[t._v("'aes192'")]),t._v(", etc. On\nrecent OpenSSL releases, "),s("code",[t._v("openssl list -cipher-algorithms")]),t._v("\n("),s("code",[t._v("openssl list-cipher-algorithms")]),t._v(" for older versions of OpenSSL) will\ndisplay the available cipher algorithms.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("key")]),t._v(" is the raw key used by the "),s("code",[t._v("algorithm")]),t._v(" and "),s("code",[t._v("iv")]),t._v(" is an\n"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Initialization_vector",target:"_blank",rel:"noopener noreferrer"}},[t._v("initialization vector"),s("OutboundLink")],1),t._v(". Both arguments must be "),s("code",[t._v("'utf8'")]),t._v(" encoded strings,\n"),s("router-link",{attrs:{to:"/node/buffer.html"}},[t._v("Buffers")]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or "),s("code",[t._v("DataView")]),t._v("s. The "),s("code",[t._v("key")]),t._v(" may optionally be\na "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(" of type "),s("code",[t._v("secret")]),t._v(". If the cipher does not need\nan initialization vector, "),s("code",[t._v("iv")]),t._v(" may be "),s("code",[t._v("null")]),t._v(".")],1),t._v(" "),s("p",[t._v("Initialization vectors should be unpredictable and unique; ideally, they will be\ncryptographically random. They do not have to be secret: IVs are typically just\nadded to ciphertext messages unencrypted. It may sound contradictory that\nsomething has to be unpredictable and unique, but does not have to be secret;\nremember that an attacker must not be able to predict ahead of time what a\ngiven IV will be.")]),t._v(" "),s("h3",{attrs:{id:"crypto-createdecipher-algorithm-password-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-createdecipher-algorithm-password-options"}},[t._v("#")]),t._v(" crypto.createDecipher(algorithm, password[, options])")]),t._v(" "),s("blockquote",[s("p",[t._v("Stability: 0 - Deprecated: Use "),s("a",{attrs:{href:"#crypto_crypto_createdecipheriv_algorithm_key_iv_options"}},[s("code",[t._v("crypto.createDecipheriv()")])]),t._v(" instead.")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("algorithm")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("password")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object} "),s("router-link",{attrs:{to:"/node/stream.html#stream_new_stream_transform_options"}},[s("code",[t._v("stream.transform")]),t._v(" options")])],1),t._v(" "),s("li",[t._v("Returns: {Decipher}")])]),t._v(" "),s("p",[t._v("Creates and returns a "),s("code",[t._v("Decipher")]),t._v(" object that uses the given "),s("code",[t._v("algorithm")]),t._v(" and\n"),s("code",[t._v("password")]),t._v(" (key).")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("options")]),t._v(" argument controls stream behavior and is optional except when a\ncipher in CCM or OCB mode is used (e.g. "),s("code",[t._v("'aes-128-ccm'")]),t._v("). In that case, the\n"),s("code",[t._v("authTagLength")]),t._v(" option is required and specifies the length of the\nauthentication tag in bytes, see "),s("a",{attrs:{href:"#crypto_ccm_mode"}},[t._v("CCM mode")]),t._v(".")]),t._v(" "),s("p",[t._v("The implementation of "),s("code",[t._v("crypto.createDecipher()")]),t._v(" derives keys using the OpenSSL\nfunction "),s("a",{attrs:{href:"https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("EVP_BytesToKey")]),s("OutboundLink")],1),t._v(" with the digest algorithm set to MD5, one\niteration, and no salt. The lack of salt allows dictionary attacks as the same\npassword always creates the same key. The low iteration count and\nnon-cryptographically secure hash algorithm allow passwords to be tested very\nrapidly.")]),t._v(" "),s("p",[t._v("In line with OpenSSL's recommendation to use a more modern algorithm instead of\n"),s("a",{attrs:{href:"https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("EVP_BytesToKey")]),s("OutboundLink")],1),t._v(" it is recommended that developers derive a key and IV on\ntheir own using "),s("a",{attrs:{href:"#crypto_crypto_scrypt_password_salt_keylen_options_callback"}},[s("code",[t._v("crypto.scrypt()")])]),t._v(" and to use "),s("a",{attrs:{href:"#crypto_crypto_createdecipheriv_algorithm_key_iv_options"}},[s("code",[t._v("crypto.createDecipheriv()")])]),t._v("\nto create the "),s("code",[t._v("Decipher")]),t._v(" object.")]),t._v(" "),s("h3",{attrs:{id:"crypto-createdecipheriv-algorithm-key-iv-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-createdecipheriv-algorithm-key-iv-options"}},[t._v("#")]),t._v(" crypto.createDecipheriv(algorithm, key, iv[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("algorithm")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("key")]),t._v(" {string | Buffer | TypedArray | DataView | KeyObject}")]),t._v(" "),s("li",[s("code",[t._v("iv")]),t._v(" {string | Buffer | TypedArray | DataView | null}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object} "),s("router-link",{attrs:{to:"/node/stream.html#stream_new_stream_transform_options"}},[s("code",[t._v("stream.transform")]),t._v(" options")])],1),t._v(" "),s("li",[t._v("Returns: {Decipher}")])]),t._v(" "),s("p",[t._v("Creates and returns a "),s("code",[t._v("Decipher")]),t._v(" object that uses the given "),s("code",[t._v("algorithm")]),t._v(", "),s("code",[t._v("key")]),t._v("\nand initialization vector ("),s("code",[t._v("iv")]),t._v(").")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("options")]),t._v(" argument controls stream behavior and is optional except when a\ncipher in CCM or OCB mode is used (e.g. "),s("code",[t._v("'aes-128-ccm'")]),t._v("). In that case, the\n"),s("code",[t._v("authTagLength")]),t._v(" option is required and specifies the length of the\nauthentication tag in bytes, see "),s("a",{attrs:{href:"#crypto_ccm_mode"}},[t._v("CCM mode")]),t._v(". In GCM mode, the "),s("code",[t._v("authTagLength")]),t._v("\noption is not required but can be used to restrict accepted authentication tags\nto those with the specified length.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("algorithm")]),t._v(" is dependent on OpenSSL, examples are "),s("code",[t._v("'aes192'")]),t._v(", etc. On\nrecent OpenSSL releases, "),s("code",[t._v("openssl list -cipher-algorithms")]),t._v("\n("),s("code",[t._v("openssl list-cipher-algorithms")]),t._v(" for older versions of OpenSSL) will\ndisplay the available cipher algorithms.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("key")]),t._v(" is the raw key used by the "),s("code",[t._v("algorithm")]),t._v(" and "),s("code",[t._v("iv")]),t._v(" is an\n"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Initialization_vector",target:"_blank",rel:"noopener noreferrer"}},[t._v("initialization vector"),s("OutboundLink")],1),t._v(". Both arguments must be "),s("code",[t._v("'utf8'")]),t._v(" encoded strings,\n"),s("router-link",{attrs:{to:"/node/buffer.html"}},[t._v("Buffers")]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or "),s("code",[t._v("DataView")]),t._v("s. The "),s("code",[t._v("key")]),t._v(" may optionally be\na "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(" of type "),s("code",[t._v("secret")]),t._v(". If the cipher does not need\nan initialization vector, "),s("code",[t._v("iv")]),t._v(" may be "),s("code",[t._v("null")]),t._v(".")],1),t._v(" "),s("p",[t._v("Initialization vectors should be unpredictable and unique; ideally, they will be\ncryptographically random. They do not have to be secret: IVs are typically just\nadded to ciphertext messages unencrypted. It may sound contradictory that\nsomething has to be unpredictable and unique, but does not have to be secret;\nremember that an attacker must not be able to predict ahead of time what a given\nIV will be.")]),t._v(" "),s("h3",{attrs:{id:"crypto-creatediffiehellman-prime-primeencoding-generator-generatorencoding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-creatediffiehellman-prime-primeencoding-generator-generatorencoding"}},[t._v("#")]),t._v(" crypto.createDiffieHellman(prime[, primeEncoding][, generator][, generatorEncoding])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("prime")]),t._v(" {string | Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("primeEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("prime")]),t._v(" string.")],1),t._v(" "),s("li",[s("code",[t._v("generator")]),t._v(" {number | string | Buffer | TypedArray | DataView} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("2")])]),t._v(" "),s("li",[s("code",[t._v("generatorEncoding")]),t._v(" {string} The "),s("router-link",{attrs:{to:"/node/buffer.html#buffer_buffers_and_character_encodings"}},[t._v("encoding")]),t._v(" of the "),s("code",[t._v("generator")]),t._v(" string.")],1),t._v(" "),s("li",[t._v("Returns: {DiffieHellman}")])]),t._v(" "),s("p",[t._v("Creates a "),s("code",[t._v("DiffieHellman")]),t._v(" key exchange object using the supplied "),s("code",[t._v("prime")]),t._v(" and an\noptional specific "),s("code",[t._v("generator")]),t._v(".")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("generator")]),t._v(" argument can be a number, string, or "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(". If\n"),s("code",[t._v("generator")]),t._v(" is not specified, the value "),s("code",[t._v("2")]),t._v(" is used.")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("primeEncoding")]),t._v(" is specified, "),s("code",[t._v("prime")]),t._v(" is expected to be a string; otherwise\na "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or "),s("code",[t._v("DataView")]),t._v(" is expected.")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("generatorEncoding")]),t._v(" is specified, "),s("code",[t._v("generator")]),t._v(" is expected to be a string;\notherwise a number, "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(", "),s("code",[t._v("TypedArray")]),t._v(", or "),s("code",[t._v("DataView")]),t._v(" is expected.")],1),t._v(" "),s("h3",{attrs:{id:"crypto-creatediffiehellman-primelength-generator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-creatediffiehellman-primelength-generator"}},[t._v("#")]),t._v(" crypto.createDiffieHellman(primeLength[, generator])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("primeLength")]),t._v(" {number}")]),t._v(" "),s("li",[s("code",[t._v("generator")]),t._v(" {number | string | Buffer | TypedArray | DataView} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("2")])]),t._v(" "),s("li",[t._v("Returns: {DiffieHellman}")])]),t._v(" "),s("p",[t._v("Creates a "),s("code",[t._v("DiffieHellman")]),t._v(" key exchange object and generates a prime of\n"),s("code",[t._v("primeLength")]),t._v(" bits using an optional specific numeric "),s("code",[t._v("generator")]),t._v(".\nIf "),s("code",[t._v("generator")]),t._v(" is not specified, the value "),s("code",[t._v("2")]),t._v(" is used.")]),t._v(" "),s("h3",{attrs:{id:"crypto-creatediffiehellmangroup-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-creatediffiehellmangroup-name"}},[t._v("#")]),t._v(" crypto.createDiffieHellmanGroup(name)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("name")]),t._v(" {string}")]),t._v(" "),s("li",[t._v("Returns: {DiffieHellmanGroup}")])]),t._v(" "),s("p",[t._v("An alias for "),s("a",{attrs:{href:"#crypto_crypto_getdiffiehellman_groupname"}},[s("code",[t._v("crypto.getDiffieHellman()")])])]),t._v(" "),s("h3",{attrs:{id:"crypto-createecdh-curvename"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-createecdh-curvename"}},[t._v("#")]),t._v(" crypto.createECDH(curveName)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("curveName")]),t._v(" {string}")]),t._v(" "),s("li",[t._v("Returns: {ECDH}")])]),t._v(" "),s("p",[t._v("Creates an Elliptic Curve Diffie-Hellman ("),s("code",[t._v("ECDH")]),t._v(") key exchange object using a\npredefined curve specified by the "),s("code",[t._v("curveName")]),t._v(" string. Use\n"),s("a",{attrs:{href:"#crypto_crypto_getcurves"}},[s("code",[t._v("crypto.getCurves()")])]),t._v(" to obtain a list of available curve names. On recent\nOpenSSL releases, "),s("code",[t._v("openssl ecparam -list_curves")]),t._v(" will also display the name\nand description of each available elliptic curve.")]),t._v(" "),s("h3",{attrs:{id:"crypto-createhash-algorithm-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-createhash-algorithm-options"}},[t._v("#")]),t._v(" crypto.createHash(algorithm[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("algorithm")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object} "),s("router-link",{attrs:{to:"/node/stream.html#stream_new_stream_transform_options"}},[s("code",[t._v("stream.transform")]),t._v(" options")])],1),t._v(" "),s("li",[t._v("Returns: {Hash}")])]),t._v(" "),s("p",[t._v("Creates and returns a "),s("code",[t._v("Hash")]),t._v(" object that can be used to generate hash digests\nusing the given "),s("code",[t._v("algorithm")]),t._v(". Optional "),s("code",[t._v("options")]),t._v(" argument controls stream\nbehavior. For XOF hash functions such as "),s("code",[t._v("'shake256'")]),t._v(", the "),s("code",[t._v("outputLength")]),t._v(" option\ncan be used to specify the desired output length in bytes.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("algorithm")]),t._v(" is dependent on the available algorithms supported by the\nversion of OpenSSL on the platform. Examples are "),s("code",[t._v("'sha256'")]),t._v(", "),s("code",[t._v("'sha512'")]),t._v(", etc.\nOn recent releases of OpenSSL, "),s("code",[t._v("openssl list -digest-algorithms")]),t._v("\n("),s("code",[t._v("openssl list-message-digest-algorithms")]),t._v(" for older versions of OpenSSL) will\ndisplay the available digest algorithms.")]),t._v(" "),s("p",[t._v("Example: generating the sha256 sum of a file")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" filename "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" input "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readable'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Only one element is going to be produced by the")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hash stream.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"crypto-createhmac-algorithm-key-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-createhmac-algorithm-key-options"}},[t._v("#")]),t._v(" crypto.createHmac(algorithm, key[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("algorithm")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("key")]),t._v(" {string | Buffer | TypedArray | DataView | KeyObject}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object} "),s("router-link",{attrs:{to:"/node/stream.html#stream_new_stream_transform_options"}},[s("code",[t._v("stream.transform")]),t._v(" options")])],1),t._v(" "),s("li",[t._v("Returns: {Hmac}")])]),t._v(" "),s("p",[t._v("Creates and returns an "),s("code",[t._v("Hmac")]),t._v(" object that uses the given "),s("code",[t._v("algorithm")]),t._v(" and "),s("code",[t._v("key")]),t._v(".\nOptional "),s("code",[t._v("options")]),t._v(" argument controls stream behavior.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("algorithm")]),t._v(" is dependent on the available algorithms supported by the\nversion of OpenSSL on the platform. Examples are "),s("code",[t._v("'sha256'")]),t._v(", "),s("code",[t._v("'sha512'")]),t._v(", etc.\nOn recent releases of OpenSSL, "),s("code",[t._v("openssl list -digest-algorithms")]),t._v("\n("),s("code",[t._v("openssl list-message-digest-algorithms")]),t._v(" for older versions of OpenSSL) will\ndisplay the available digest algorithms.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("key")]),t._v(" is the HMAC key used to generate the cryptographic HMAC hash. If it is\na "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(", its type must be "),s("code",[t._v("secret")]),t._v(".")]),t._v(" "),s("p",[t._v("Example: generating the sha256 HMAC of a file")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" filename "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hmac "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHmac")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha256'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a secret'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" input "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readable'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Only one element is going to be produced by the")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hash stream.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    hmac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hmac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"crypto-createprivatekey-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-createprivatekey-key"}},[t._v("#")]),t._v(" crypto.createPrivateKey(key)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("key")]),t._v(" {Object | string | Buffer}\n"),s("ul",[s("li",[s("code",[t._v("key")]),t._v(": {string | Buffer} The key material, either in PEM or DER format.")]),t._v(" "),s("li",[s("code",[t._v("format")]),t._v(": {string} Must be "),s("code",[t._v("'pem'")]),t._v(" or "),s("code",[t._v("'der'")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'pem'")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("type")]),t._v(": {string} Must be "),s("code",[t._v("'pkcs1'")]),t._v(", "),s("code",[t._v("'pkcs8'")]),t._v(" or "),s("code",[t._v("'sec1'")]),t._v(". This option is\nrequired only if the "),s("code",[t._v("format")]),t._v(" is "),s("code",[t._v("'der'")]),t._v(" and ignored if it is "),s("code",[t._v("'pem'")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("passphrase")]),t._v(": {string | Buffer} The passphrase to use for decryption.")])])]),t._v(" "),s("li",[t._v("Returns: {KeyObject}")])]),t._v(" "),s("p",[t._v("Creates and returns a new key object containing a private key. If "),s("code",[t._v("key")]),t._v(" is a\nstring or "),s("code",[t._v("Buffer")]),t._v(", "),s("code",[t._v("format")]),t._v(" is assumed to be "),s("code",[t._v("'pem'")]),t._v("; otherwise, "),s("code",[t._v("key")]),t._v("\nmust be an object with the properties described above.")]),t._v(" "),s("p",[t._v("If the private key is encrypted, a "),s("code",[t._v("passphrase")]),t._v(" must be specified. The length\nof the passphrase is limited to 1024 bytes.")]),t._v(" "),s("h3",{attrs:{id:"crypto-createpublickey-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-createpublickey-key"}},[t._v("#")]),t._v(" crypto.createPublicKey(key)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("key")]),t._v(" {Object | string | Buffer | KeyObject}\n"),s("ul",[s("li",[s("code",[t._v("key")]),t._v(": {string | Buffer}")]),t._v(" "),s("li",[s("code",[t._v("format")]),t._v(": {string} Must be "),s("code",[t._v("'pem'")]),t._v(" or "),s("code",[t._v("'der'")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'pem'")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("type")]),t._v(": {string} Must be "),s("code",[t._v("'pkcs1'")]),t._v(" or "),s("code",[t._v("'spki'")]),t._v(". This option is required\nonly if the "),s("code",[t._v("format")]),t._v(" is "),s("code",[t._v("'der'")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {KeyObject}")])]),t._v(" "),s("p",[t._v("Creates and returns a new key object containing a public key. If "),s("code",[t._v("key")]),t._v(" is a\nstring or "),s("code",[t._v("Buffer")]),t._v(", "),s("code",[t._v("format")]),t._v(" is assumed to be "),s("code",[t._v("'pem'")]),t._v("; if "),s("code",[t._v("key")]),t._v(" is a "),s("code",[t._v("KeyObject")]),t._v("\nwith type "),s("code",[t._v("'private'")]),t._v(", the public key is derived from the given private key;\notherwise, "),s("code",[t._v("key")]),t._v(" must be an object with the properties described above.")]),t._v(" "),s("p",[t._v("If the format is "),s("code",[t._v("'pem'")]),t._v(", the "),s("code",[t._v("'key'")]),t._v(" may also be an X.509 certificate.")]),t._v(" "),s("p",[t._v("Because public keys can be derived from private keys, a private key may be\npassed instead of a public key. In that case, this function behaves as if\n"),s("a",{attrs:{href:"#crypto_crypto_createprivatekey_key"}},[s("code",[t._v("crypto.createPrivateKey()")])]),t._v(" had been called, except that the type of the\nreturned "),s("code",[t._v("KeyObject")]),t._v(" will be "),s("code",[t._v("'public'")]),t._v(" and that the private key cannot be\nextracted from the returned "),s("code",[t._v("KeyObject")]),t._v(". Similarly, if a "),s("code",[t._v("KeyObject")]),t._v(" with type\n"),s("code",[t._v("'private'")]),t._v(" is given, a new "),s("code",[t._v("KeyObject")]),t._v(" with type "),s("code",[t._v("'public'")]),t._v(" will be returned\nand it will be impossible to extract the private key from the returned object.")]),t._v(" "),s("h3",{attrs:{id:"crypto-createsecretkey-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-createsecretkey-key"}},[t._v("#")]),t._v(" crypto.createSecretKey(key)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("key")]),t._v(" {Buffer}")]),t._v(" "),s("li",[t._v("Returns: {KeyObject}")])]),t._v(" "),s("p",[t._v("Creates and returns a new key object containing a secret key for symmetric\nencryption or "),s("code",[t._v("Hmac")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"crypto-createsign-algorithm-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-createsign-algorithm-options"}},[t._v("#")]),t._v(" crypto.createSign(algorithm[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("algorithm")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object} "),s("router-link",{attrs:{to:"/node/stream.html#stream_constructor_new_stream_writable_options"}},[s("code",[t._v("stream.Writable")]),t._v(" options")])],1),t._v(" "),s("li",[t._v("Returns: {Sign}")])]),t._v(" "),s("p",[t._v("Creates and returns a "),s("code",[t._v("Sign")]),t._v(" object that uses the given "),s("code",[t._v("algorithm")]),t._v(".  Use\n"),s("a",{attrs:{href:"#crypto_crypto_gethashes"}},[s("code",[t._v("crypto.getHashes()")])]),t._v(" to obtain the names of the available digest algorithms.\nOptional "),s("code",[t._v("options")]),t._v(" argument controls the "),s("code",[t._v("stream.Writable")]),t._v(" behavior.")]),t._v(" "),s("p",[t._v("In some cases, a "),s("code",[t._v("Sign")]),t._v(" instance can be created using the name of a signature\nalgorithm, such as "),s("code",[t._v("'RSA-SHA256'")]),t._v(", instead of a digest algorithm. This will use\nthe corresponding digest algorithm. This does not work for all signature\nalgorithms, such as "),s("code",[t._v("'ecdsa-with-SHA256'")]),t._v(", so it is best to always use digest\nalgorithm names.")]),t._v(" "),s("h3",{attrs:{id:"crypto-createverify-algorithm-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-createverify-algorithm-options"}},[t._v("#")]),t._v(" crypto.createVerify(algorithm[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("algorithm")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object} "),s("router-link",{attrs:{to:"/node/stream.html#stream_constructor_new_stream_writable_options"}},[s("code",[t._v("stream.Writable")]),t._v(" options")])],1),t._v(" "),s("li",[t._v("Returns: {Verify}")])]),t._v(" "),s("p",[t._v("Creates and returns a "),s("code",[t._v("Verify")]),t._v(" object that uses the given algorithm.\nUse "),s("a",{attrs:{href:"#crypto_crypto_gethashes"}},[s("code",[t._v("crypto.getHashes()")])]),t._v(" to obtain an array of names of the available\nsigning algorithms. Optional "),s("code",[t._v("options")]),t._v(" argument controls the\n"),s("code",[t._v("stream.Writable")]),t._v(" behavior.")]),t._v(" "),s("p",[t._v("In some cases, a "),s("code",[t._v("Verify")]),t._v(" instance can be created using the name of a signature\nalgorithm, such as "),s("code",[t._v("'RSA-SHA256'")]),t._v(", instead of a digest algorithm. This will use\nthe corresponding digest algorithm. This does not work for all signature\nalgorithms, such as "),s("code",[t._v("'ecdsa-with-SHA256'")]),t._v(", so it is best to always use digest\nalgorithm names.")]),t._v(" "),s("h3",{attrs:{id:"crypto-generatekeypair-type-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-generatekeypair-type-options-callback"}},[t._v("#")]),t._v(" crypto.generateKeyPair(type, options, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("type")]),t._v(": {string} Must be "),s("code",[t._v("'rsa'")]),t._v(", "),s("code",[t._v("'dsa'")]),t._v(", "),s("code",[t._v("'ec'")]),t._v(", "),s("code",[t._v("'ed25519'")]),t._v(", "),s("code",[t._v("'ed448'")]),t._v(",\n"),s("code",[t._v("'x25519'")]),t._v(", or "),s("code",[t._v("'x448'")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(": {Object}\n"),s("ul",[s("li",[s("code",[t._v("modulusLength")]),t._v(": {number} Key size in bits (RSA, DSA).")]),t._v(" "),s("li",[s("code",[t._v("publicExponent")]),t._v(": {number} Public exponent (RSA). "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0x10001")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("divisorLength")]),t._v(": {number} Size of "),s("code",[t._v("q")]),t._v(" in bits (DSA).")]),t._v(" "),s("li",[s("code",[t._v("namedCurve")]),t._v(": {string} Name of the curve to use (EC).")]),t._v(" "),s("li",[s("code",[t._v("publicKeyEncoding")]),t._v(": {Object} See "),s("a",{attrs:{href:"#crypto_keyobject_export_options"}},[s("code",[t._v("keyObject.export()")])]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("privateKeyEncoding")]),t._v(": {Object} See "),s("a",{attrs:{href:"#crypto_keyobject_export_options"}},[s("code",[t._v("keyObject.export()")])]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(": {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(": {Error}")]),t._v(" "),s("li",[s("code",[t._v("publicKey")]),t._v(": {string | Buffer | KeyObject}")]),t._v(" "),s("li",[s("code",[t._v("privateKey")]),t._v(": {string | Buffer | KeyObject}")])])])]),t._v(" "),s("p",[t._v("Generates a new asymmetric key pair of the given "),s("code",[t._v("type")]),t._v(". RSA, DSA, EC, Ed25519\nand Ed448 are currently supported.")]),t._v(" "),s("p",[t._v("If a "),s("code",[t._v("publicKeyEncoding")]),t._v(" or "),s("code",[t._v("privateKeyEncoding")]),t._v(" was specified, this function\nbehaves as if "),s("a",{attrs:{href:"#crypto_keyobject_export_options"}},[s("code",[t._v("keyObject.export()")])]),t._v(" had been called on its result. Otherwise,\nthe respective part of the key is returned as a "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(".")]),t._v(" "),s("p",[t._v("It is recommended to encode public keys as "),s("code",[t._v("'spki'")]),t._v(" and private keys as\n"),s("code",[t._v("'pkcs8'")]),t._v(" with encryption for long-term storage:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" generateKeyPair "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateKeyPair")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rsa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  modulusLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  publicKeyEncoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'spki'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    format"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pem'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  privateKeyEncoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pkcs8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    format"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pem'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    cipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aes-256-cbc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    passphrase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'top secret'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" publicKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" privateKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Handle errors and use the generated key pair.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("On completion, "),s("code",[t._v("callback")]),t._v(" will be called with "),s("code",[t._v("err")]),t._v(" set to "),s("code",[t._v("undefined")]),t._v(" and\n"),s("code",[t._v("publicKey")]),t._v(" / "),s("code",[t._v("privateKey")]),t._v(" representing the generated key pair.")]),t._v(" "),s("p",[t._v("If this method is invoked as its "),s("router-link",{attrs:{to:"/node/util.html#util_util_promisify_original"}},[s("code",[t._v("util.promisify()")])]),t._v("ed version, it returns\na "),s("code",[t._v("Promise")]),t._v(" for an "),s("code",[t._v("Object")]),t._v(" with "),s("code",[t._v("publicKey")]),t._v(" and "),s("code",[t._v("privateKey")]),t._v(" properties.")],1),t._v(" "),s("h3",{attrs:{id:"crypto-generatekeypairsync-type-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-generatekeypairsync-type-options"}},[t._v("#")]),t._v(" crypto.generateKeyPairSync(type, options)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("type")]),t._v(": {string} Must be "),s("code",[t._v("'rsa'")]),t._v(", "),s("code",[t._v("'dsa'")]),t._v(", "),s("code",[t._v("'ec'")]),t._v(", "),s("code",[t._v("'ed25519'")]),t._v(", or "),s("code",[t._v("'ed448'")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(": {Object}\n"),s("ul",[s("li",[s("code",[t._v("modulusLength")]),t._v(": {number} Key size in bits (RSA, DSA).")]),t._v(" "),s("li",[s("code",[t._v("publicExponent")]),t._v(": {number} Public exponent (RSA). "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0x10001")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("divisorLength")]),t._v(": {number} Size of "),s("code",[t._v("q")]),t._v(" in bits (DSA).")]),t._v(" "),s("li",[s("code",[t._v("namedCurve")]),t._v(": {string} Name of the curve to use (EC).")]),t._v(" "),s("li",[s("code",[t._v("publicKeyEncoding")]),t._v(": {Object} See "),s("a",{attrs:{href:"#crypto_keyobject_export_options"}},[s("code",[t._v("keyObject.export()")])]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("privateKeyEncoding")]),t._v(": {Object} See "),s("a",{attrs:{href:"#crypto_keyobject_export_options"}},[s("code",[t._v("keyObject.export()")])]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Object}\n"),s("ul",[s("li",[s("code",[t._v("publicKey")]),t._v(": {string | Buffer | KeyObject}")]),t._v(" "),s("li",[s("code",[t._v("privateKey")]),t._v(": {string | Buffer | KeyObject}")])])])]),t._v(" "),s("p",[t._v("Generates a new asymmetric key pair of the given "),s("code",[t._v("type")]),t._v(". RSA, DSA, EC, Ed25519\nand Ed448 are currently supported.")]),t._v(" "),s("p",[t._v("If a "),s("code",[t._v("publicKeyEncoding")]),t._v(" or "),s("code",[t._v("privateKeyEncoding")]),t._v(" was specified, this function\nbehaves as if "),s("a",{attrs:{href:"#crypto_keyobject_export_options"}},[s("code",[t._v("keyObject.export()")])]),t._v(" had been called on its result. Otherwise,\nthe respective part of the key is returned as a "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(".")]),t._v(" "),s("p",[t._v("When encoding public keys, it is recommended to use "),s("code",[t._v("'spki'")]),t._v(". When encoding\nprivate keys, it is recommended to use "),s("code",[t._v("'pks8'")]),t._v(" with a strong passphrase, and to\nkeep the passphrase confidential.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" generateKeyPairSync "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" publicKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" privateKey "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateKeyPairSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rsa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  modulusLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  publicKeyEncoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'spki'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    format"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pem'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  privateKeyEncoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pkcs8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    format"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pem'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    cipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aes-256-cbc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    passphrase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'top secret'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The return value "),s("code",[t._v("{ publicKey, privateKey }")]),t._v(" represents the generated key pair.\nWhen PEM encoding was selected, the respective key will be a string, otherwise\nit will be a buffer containing the data encoded as DER.")]),t._v(" "),s("h3",{attrs:{id:"crypto-getciphers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-getciphers"}},[t._v("#")]),t._v(" crypto.getCiphers()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {string[]} An array with the names of the supported cipher\nalgorithms.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ciphers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCiphers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ciphers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['aes-128-cbc', 'aes-128-ccm', ...]")]),t._v("\n")])])]),s("h3",{attrs:{id:"crypto-getcurves"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-getcurves"}},[t._v("#")]),t._v(" crypto.getCurves()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {string[]} An array with the names of the supported elliptic curves.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" curves "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCurves")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curves"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['Oakley-EC2N-3', 'Oakley-EC2N-4', ...]")]),t._v("\n")])])]),s("h3",{attrs:{id:"crypto-getdiffiehellman-groupname"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-getdiffiehellman-groupname"}},[t._v("#")]),t._v(" crypto.getDiffieHellman(groupName)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("groupName")]),t._v(" {string}")]),t._v(" "),s("li",[t._v("Returns: {DiffieHellmanGroup}")])]),t._v(" "),s("p",[t._v("Creates a predefined "),s("code",[t._v("DiffieHellmanGroup")]),t._v(" key exchange object. The\nsupported groups are: "),s("code",[t._v("'modp1'")]),t._v(", "),s("code",[t._v("'modp2'")]),t._v(", "),s("code",[t._v("'modp5'")]),t._v(" (defined in\n"),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc2412.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 2412"),s("OutboundLink")],1),t._v(", but see "),s("a",{attrs:{href:"#crypto_support_for_weak_or_compromised_algorithms"}},[t._v("Caveats")]),t._v(") and "),s("code",[t._v("'modp14'")]),t._v(", "),s("code",[t._v("'modp15'")]),t._v(",\n"),s("code",[t._v("'modp16'")]),t._v(", "),s("code",[t._v("'modp17'")]),t._v(", "),s("code",[t._v("'modp18'")]),t._v(" (defined in "),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc3526.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 3526"),s("OutboundLink")],1),t._v("). The\nreturned object mimics the interface of objects created by\n"),s("a",{attrs:{href:"#crypto_crypto_creatediffiehellman_prime_primeencoding_generator_generatorencoding"}},[s("code",[t._v("crypto.createDiffieHellman()")])]),t._v(", but will not allow changing\nthe keys (with "),s("a",{attrs:{href:"#crypto_diffiehellman_setpublickey_publickey_encoding"}},[s("code",[t._v("diffieHellman.setPublicKey()")])]),t._v(", for example). The\nadvantage of using this method is that the parties do not have to\ngenerate nor exchange a group modulus beforehand, saving both processor\nand communication time.")]),t._v(" "),s("p",[t._v("Example (obtaining a shared secret):")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" alice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDiffieHellman")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'modp14'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bob "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDiffieHellman")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'modp14'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nalice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateKeys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbob"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateKeys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" aliceSecret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeSecret")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bob"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPublicKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bobSecret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bob"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeSecret")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("alice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPublicKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* aliceSecret and bobSecret should be the same */")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aliceSecret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" bobSecret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"crypto-getfips"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-getfips"}},[t._v("#")]),t._v(" crypto.getFips()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {boolean} "),s("code",[t._v("true")]),t._v(" if and only if a FIPS compliant crypto provider is\ncurrently in use.")])]),t._v(" "),s("h3",{attrs:{id:"crypto-gethashes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-gethashes"}},[t._v("#")]),t._v(" crypto.getHashes()")]),t._v(" "),s("ul",[s("li",[t._v("Returns: {string[]} An array of the names of the supported hash algorithms,\nsuch as "),s("code",[t._v("'RSA-SHA256'")]),t._v('. Hash algorithms are also called "digest" algorithms.')])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hashes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHashes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hashes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['DSA', 'DSA-SHA', 'DSA-SHA1', ...]")]),t._v("\n")])])]),s("h3",{attrs:{id:"crypto-pbkdf2-password-salt-iterations-keylen-digest-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-pbkdf2-password-salt-iterations-keylen-digest-callback"}},[t._v("#")]),t._v(" crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("password")]),t._v(" {string|Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("salt")]),t._v(" {string|Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("iterations")]),t._v(" {number}")]),t._v(" "),s("li",[s("code",[t._v("keylen")]),t._v(" {number}")]),t._v(" "),s("li",[s("code",[t._v("digest")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("derivedKey")]),t._v(" {Buffer}")])])])]),t._v(" "),s("p",[t._v("Provides an asynchronous Password-Based Key Derivation Function 2 (PBKDF2)\nimplementation. A selected HMAC digest algorithm specified by "),s("code",[t._v("digest")]),t._v(" is\napplied to derive a key of the requested byte length ("),s("code",[t._v("keylen")]),t._v(") from the\n"),s("code",[t._v("password")]),t._v(", "),s("code",[t._v("salt")]),t._v(" and "),s("code",[t._v("iterations")]),t._v(".")]),t._v(" "),s("p",[t._v("The supplied "),s("code",[t._v("callback")]),t._v(" function is called with two arguments: "),s("code",[t._v("err")]),t._v(" and\n"),s("code",[t._v("derivedKey")]),t._v(". If an error occurs while deriving the key, "),s("code",[t._v("err")]),t._v(" will be set;\notherwise "),s("code",[t._v("err")]),t._v(" will be "),s("code",[t._v("null")]),t._v(". By default, the successfully generated\n"),s("code",[t._v("derivedKey")]),t._v(" will be passed to the callback as a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(". An error will be\nthrown if any of the input arguments specify invalid values or types.")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("digest")]),t._v(" is "),s("code",[t._v("null")]),t._v(", "),s("code",[t._v("'sha1'")]),t._v(" will be used. This behavior is deprecated,\nplease specify a "),s("code",[t._v("digest")]),t._v(" explicitly.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("iterations")]),t._v(" argument must be a number set as high as possible. The\nhigher the number of iterations, the more secure the derived key will be,\nbut will take a longer amount of time to complete.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("salt")]),t._v(" should be as unique as possible. It is recommended that a salt is\nrandom and at least 16 bytes long. See "),s("a",{attrs:{href:"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("NIST SP 800-132"),s("OutboundLink")],1),t._v(" for details.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pbkdf2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secret'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha512'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" derivedKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("derivedKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '3745e48...08d59ae'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The "),s("code",[t._v("crypto.DEFAULT_ENCODING")]),t._v(" property can be used to change the way the\n"),s("code",[t._v("derivedKey")]),t._v(" is passed to the callback. This property, however, has been\ndeprecated and use should be avoided.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULT_ENCODING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pbkdf2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secret'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha512'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" derivedKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("derivedKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '3745e48...aa39b34'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("An array of supported digest functions can be retrieved using\n"),s("a",{attrs:{href:"#crypto_crypto_gethashes"}},[s("code",[t._v("crypto.getHashes()")])]),t._v(".")]),t._v(" "),s("p",[t._v("This API uses libuv's threadpool, which can have surprising and\nnegative performance implications for some applications; see the\n"),s("router-link",{attrs:{to:"/node/cli.html#cli_uv_threadpool_size_size"}},[s("code",[t._v("UV_THREADPOOL_SIZE")])]),t._v(" documentation for more information.")],1),t._v(" "),s("h3",{attrs:{id:"crypto-pbkdf2sync-password-salt-iterations-keylen-digest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-pbkdf2sync-password-salt-iterations-keylen-digest"}},[t._v("#")]),t._v(" crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("password")]),t._v(" {string|Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("salt")]),t._v(" {string|Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("iterations")]),t._v(" {number}")]),t._v(" "),s("li",[s("code",[t._v("keylen")]),t._v(" {number}")]),t._v(" "),s("li",[s("code",[t._v("digest")]),t._v(" {string}")]),t._v(" "),s("li",[t._v("Returns: {Buffer}")])]),t._v(" "),s("p",[t._v("Provides a synchronous Password-Based Key Derivation Function 2 (PBKDF2)\nimplementation. A selected HMAC digest algorithm specified by "),s("code",[t._v("digest")]),t._v(" is\napplied to derive a key of the requested byte length ("),s("code",[t._v("keylen")]),t._v(") from the\n"),s("code",[t._v("password")]),t._v(", "),s("code",[t._v("salt")]),t._v(" and "),s("code",[t._v("iterations")]),t._v(".")]),t._v(" "),s("p",[t._v("If an error occurs an "),s("code",[t._v("Error")]),t._v(" will be thrown, otherwise the derived key will be\nreturned as a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(".")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("digest")]),t._v(" is "),s("code",[t._v("null")]),t._v(", "),s("code",[t._v("'sha1'")]),t._v(" will be used. This behavior is deprecated,\nplease specify a "),s("code",[t._v("digest")]),t._v(" explicitly.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("iterations")]),t._v(" argument must be a number set as high as possible. The\nhigher the number of iterations, the more secure the derived key will be,\nbut will take a longer amount of time to complete.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("salt")]),t._v(" should be as unique as possible. It is recommended that a salt is\nrandom and at least 16 bytes long. See "),s("a",{attrs:{href:"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("NIST SP 800-132"),s("OutboundLink")],1),t._v(" for details.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pbkdf2Sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secret'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha512'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '3745e48...08d59ae'")]),t._v("\n")])])]),s("p",[t._v("The "),s("code",[t._v("crypto.DEFAULT_ENCODING")]),t._v(" property may be used to change the way the\n"),s("code",[t._v("derivedKey")]),t._v(" is returned. This property, however, is deprecated and use\nshould be avoided.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULT_ENCODING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pbkdf2Sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secret'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sha512'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '3745e48...aa39b34'")]),t._v("\n")])])]),s("p",[t._v("An array of supported digest functions can be retrieved using\n"),s("a",{attrs:{href:"#crypto_crypto_gethashes"}},[s("code",[t._v("crypto.getHashes()")])]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"crypto-privatedecrypt-privatekey-buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-privatedecrypt-privatekey-buffer"}},[t._v("#")]),t._v(" crypto.privateDecrypt(privateKey, buffer)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("privateKey")]),t._v(" {Object | string | Buffer | KeyObject}\n"),s("ul",[s("li",[s("code",[t._v("oaepHash")]),t._v(" {string} The hash function to use for OAEP padding.\n"),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'sha1'")])]),t._v(" "),s("li",[s("code",[t._v("padding")]),t._v(" {crypto.constants} An optional padding value defined in\n"),s("code",[t._v("crypto.constants")]),t._v(", which may be: "),s("code",[t._v("crypto.constants.RSA_NO_PADDING")]),t._v(",\n"),s("code",[t._v("crypto.constants.RSA_PKCS1_PADDING")]),t._v(", or\n"),s("code",[t._v("crypto.constants.RSA_PKCS1_OAEP_PADDING")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[t._v("Returns: {Buffer} A new "),s("code",[t._v("Buffer")]),t._v(" with the decrypted content.")])]),t._v(" "),s("p",[t._v("Decrypts "),s("code",[t._v("buffer")]),t._v(" with "),s("code",[t._v("privateKey")]),t._v(". "),s("code",[t._v("buffer")]),t._v(" was previously encrypted using\nthe corresponding public key, for example using "),s("a",{attrs:{href:"#crypto_crypto_publicencrypt_key_buffer"}},[s("code",[t._v("crypto.publicEncrypt()")])]),t._v(".")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("privateKey")]),t._v(" is not a "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(", this function behaves as if\n"),s("code",[t._v("privateKey")]),t._v(" had been passed to "),s("a",{attrs:{href:"#crypto_crypto_createprivatekey_key"}},[s("code",[t._v("crypto.createPrivateKey()")])]),t._v(". If it is an\nobject, the "),s("code",[t._v("padding")]),t._v(" property can be passed. Otherwise, this function uses\n"),s("code",[t._v("RSA_PKCS1_OAEP_PADDING")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"crypto-privateencrypt-privatekey-buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-privateencrypt-privatekey-buffer"}},[t._v("#")]),t._v(" crypto.privateEncrypt(privateKey, buffer)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("privateKey")]),t._v(" {Object | string | Buffer | KeyObject}\n"),s("ul",[s("li",[s("code",[t._v("key")]),t._v(" {string | Buffer | KeyObject} A PEM encoded private key.")]),t._v(" "),s("li",[s("code",[t._v("passphrase")]),t._v(" {string | Buffer} An optional passphrase for the private key.")]),t._v(" "),s("li",[s("code",[t._v("padding")]),t._v(" {crypto.constants} An optional padding value defined in\n"),s("code",[t._v("crypto.constants")]),t._v(", which may be: "),s("code",[t._v("crypto.constants.RSA_NO_PADDING")]),t._v(" or\n"),s("code",[t._v("crypto.constants.RSA_PKCS1_PADDING")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[t._v("Returns: {Buffer} A new "),s("code",[t._v("Buffer")]),t._v(" with the encrypted content.")])]),t._v(" "),s("p",[t._v("Encrypts "),s("code",[t._v("buffer")]),t._v(" with "),s("code",[t._v("privateKey")]),t._v(". The returned data can be decrypted using\nthe corresponding public key, for example using "),s("a",{attrs:{href:"#crypto_crypto_publicdecrypt_key_buffer"}},[s("code",[t._v("crypto.publicDecrypt()")])]),t._v(".")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("privateKey")]),t._v(" is not a "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(", this function behaves as if\n"),s("code",[t._v("privateKey")]),t._v(" had been passed to "),s("a",{attrs:{href:"#crypto_crypto_createprivatekey_key"}},[s("code",[t._v("crypto.createPrivateKey()")])]),t._v(". If it is an\nobject, the "),s("code",[t._v("padding")]),t._v(" property can be passed. Otherwise, this function uses\n"),s("code",[t._v("RSA_PKCS1_PADDING")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"crypto-publicdecrypt-key-buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-publicdecrypt-key-buffer"}},[t._v("#")]),t._v(" crypto.publicDecrypt(key, buffer)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("key")]),t._v(" {Object | string | Buffer | KeyObject}\n"),s("ul",[s("li",[s("code",[t._v("passphrase")]),t._v(" {string | Buffer} An optional passphrase for the private key.")]),t._v(" "),s("li",[s("code",[t._v("padding")]),t._v(" {crypto.constants} An optional padding value defined in\n"),s("code",[t._v("crypto.constants")]),t._v(", which may be: "),s("code",[t._v("crypto.constants.RSA_NO_PADDING")]),t._v(" or\n"),s("code",[t._v("crypto.constants.RSA_PKCS1_PADDING")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[t._v("Returns: {Buffer} A new "),s("code",[t._v("Buffer")]),t._v(" with the decrypted content.")])]),t._v(" "),s("p",[t._v("Decrypts "),s("code",[t._v("buffer")]),t._v(" with "),s("code",[t._v("key")]),t._v("."),s("code",[t._v("buffer")]),t._v(" was previously encrypted using\nthe corresponding private key, for example using "),s("a",{attrs:{href:"#crypto_crypto_privateencrypt_privatekey_buffer"}},[s("code",[t._v("crypto.privateEncrypt()")])]),t._v(".")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("key")]),t._v(" is not a "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(", this function behaves as if\n"),s("code",[t._v("key")]),t._v(" had been passed to "),s("a",{attrs:{href:"#crypto_crypto_createpublickey_key"}},[s("code",[t._v("crypto.createPublicKey()")])]),t._v(". If it is an\nobject, the "),s("code",[t._v("padding")]),t._v(" property can be passed. Otherwise, this function uses\n"),s("code",[t._v("RSA_PKCS1_PADDING")]),t._v(".")]),t._v(" "),s("p",[t._v("Because RSA public keys can be derived from private keys, a private key may\nbe passed instead of a public key.")]),t._v(" "),s("h3",{attrs:{id:"crypto-publicencrypt-key-buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-publicencrypt-key-buffer"}},[t._v("#")]),t._v(" crypto.publicEncrypt(key, buffer)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("key")]),t._v(" {Object | string | Buffer | KeyObject}\n"),s("ul",[s("li",[s("code",[t._v("key")]),t._v(" {string | Buffer | KeyObject} A PEM encoded public or private key.")]),t._v(" "),s("li",[s("code",[t._v("oaepHash")]),t._v(" {string} The hash function to use for OAEP padding.\n"),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("'sha1'")])]),t._v(" "),s("li",[s("code",[t._v("passphrase")]),t._v(" {string | Buffer} An optional passphrase for the private key.")]),t._v(" "),s("li",[s("code",[t._v("padding")]),t._v(" {crypto.constants} An optional padding value defined in\n"),s("code",[t._v("crypto.constants")]),t._v(", which may be: "),s("code",[t._v("crypto.constants.RSA_NO_PADDING")]),t._v(",\n"),s("code",[t._v("crypto.constants.RSA_PKCS1_PADDING")]),t._v(", or\n"),s("code",[t._v("crypto.constants.RSA_PKCS1_OAEP_PADDING")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[t._v("Returns: {Buffer} A new "),s("code",[t._v("Buffer")]),t._v(" with the encrypted content.")])]),t._v(" "),s("p",[t._v("Encrypts the content of "),s("code",[t._v("buffer")]),t._v(" with "),s("code",[t._v("key")]),t._v(" and returns a new\n"),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" with encrypted content. The returned data can be decrypted using\nthe corresponding private key, for example using "),s("a",{attrs:{href:"#crypto_crypto_privatedecrypt_privatekey_buffer"}},[s("code",[t._v("crypto.privateDecrypt()")])]),t._v(".")],1),t._v(" "),s("p",[t._v("If "),s("code",[t._v("key")]),t._v(" is not a "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(", this function behaves as if\n"),s("code",[t._v("key")]),t._v(" had been passed to "),s("a",{attrs:{href:"#crypto_crypto_createpublickey_key"}},[s("code",[t._v("crypto.createPublicKey()")])]),t._v(". If it is an\nobject, the "),s("code",[t._v("padding")]),t._v(" property can be passed. Otherwise, this function uses\n"),s("code",[t._v("RSA_PKCS1_OAEP_PADDING")]),t._v(".")]),t._v(" "),s("p",[t._v("Because RSA public keys can be derived from private keys, a private key may\nbe passed instead of a public key.")]),t._v(" "),s("h3",{attrs:{id:"crypto-randombytes-size-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-randombytes-size-callback"}},[t._v("#")]),t._v(" crypto.randomBytes(size[, callback])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("size")]),t._v(" {number}")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("buf")]),t._v(" {Buffer}")])])]),t._v(" "),s("li",[t._v("Returns: {Buffer} if the "),s("code",[t._v("callback")]),t._v(" function is not provided.")])]),t._v(" "),s("p",[t._v("Generates cryptographically strong pseudo-random data. The "),s("code",[t._v("size")]),t._v(" argument\nis a number indicating the number of bytes to generate.")]),t._v(" "),s("p",[t._v("If a "),s("code",[t._v("callback")]),t._v(" function is provided, the bytes are generated asynchronously\nand the "),s("code",[t._v("callback")]),t._v(" function is invoked with two arguments: "),s("code",[t._v("err")]),t._v(" and "),s("code",[t._v("buf")]),t._v(".\nIf an error occurs, "),s("code",[t._v("err")]),t._v(" will be an "),s("code",[t._v("Error")]),t._v(" object; otherwise it is "),s("code",[t._v("null")]),t._v(". The\n"),s("code",[t._v("buf")]),t._v(" argument is a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" containing the generated bytes.")],1),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Asynchronous")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" bytes of random data: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("If the "),s("code",[t._v("callback")]),t._v(" function is not provided, the random bytes are generated\nsynchronously and returned as a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(". An error will be thrown if\nthere is a problem generating the bytes.")],1),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Synchronous")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" buf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" bytes of random data: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The "),s("code",[t._v("crypto.randomBytes()")]),t._v(" method will not complete until there is\nsufficient entropy available.\nThis should normally never take longer than a few milliseconds. The only time\nwhen generating the random bytes may conceivably block for a longer period of\ntime is right after boot, when the whole system is still low on entropy.")]),t._v(" "),s("p",[t._v("This API uses libuv's threadpool, which can have surprising and\nnegative performance implications for some applications; see the\n"),s("router-link",{attrs:{to:"/node/cli.html#cli_uv_threadpool_size_size"}},[s("code",[t._v("UV_THREADPOOL_SIZE")])]),t._v(" documentation for more information.")],1),t._v(" "),s("p",[t._v("The asynchronous version of "),s("code",[t._v("crypto.randomBytes()")]),t._v(" is carried out in a single\nthreadpool request. To minimize threadpool task length variation, partition\nlarge "),s("code",[t._v("randomBytes")]),t._v(" requests when doing so as part of fulfilling a client\nrequest.")]),t._v(" "),s("h3",{attrs:{id:"crypto-randomfillsync-buffer-offset-size"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-randomfillsync-buffer-offset-size"}},[t._v("#")]),t._v(" crypto.randomFillSync(buffer[, offset][, size])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer|TypedArray|DataView} Must be supplied.")]),t._v(" "),s("li",[s("code",[t._v("offset")]),t._v(" {number} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0")])]),t._v(" "),s("li",[s("code",[t._v("size")]),t._v(" {number} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("buffer.length - offset")])]),t._v(" "),s("li",[t._v("Returns: {Buffer|TypedArray|DataView} The object passed as "),s("code",[t._v("buffer")]),t._v(" argument.")])]),t._v(" "),s("p",[t._v("Synchronous version of "),s("a",{attrs:{href:"#crypto_crypto_randomfill_buffer_offset_size_callback"}},[s("code",[t._v("crypto.randomFill()")])]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" buf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomFillSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomFillSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The above is equivalent to the following:")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomFillSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Any "),s("code",[t._v("TypedArray")]),t._v(" or "),s("code",[t._v("DataView")]),t._v(" instance may be passed as "),s("code",[t._v("buffer")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint32Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomFillSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                        a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Float64Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomFillSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                        b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DataView")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomFillSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                        c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"crypto-randomfill-buffer-offset-size-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-randomfill-buffer-offset-size-callback"}},[t._v("#")]),t._v(" crypto.randomFill(buffer[, offset][, size], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("buffer")]),t._v(" {Buffer|TypedArray|DataView} Must be supplied.")]),t._v(" "),s("li",[s("code",[t._v("offset")]),t._v(" {number} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("0")])]),t._v(" "),s("li",[s("code",[t._v("size")]),t._v(" {number} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("buffer.length - offset")])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function} "),s("code",[t._v("function(err, buf) {}")]),t._v(".")])]),t._v(" "),s("p",[t._v("This function is similar to "),s("a",{attrs:{href:"#crypto_crypto_randombytes_size_callback"}},[s("code",[t._v("crypto.randomBytes()")])]),t._v(" but requires the first\nargument to be a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" that will be filled. It also\nrequires that a callback is passed in.")],1),t._v(" "),s("p",[t._v("If the "),s("code",[t._v("callback")]),t._v(" function is not provided, an error will be thrown.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" buf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomFill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomFill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The above is equivalent to the following:")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomFill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Any "),s("code",[t._v("TypedArray")]),t._v(" or "),s("code",[t._v("DataView")]),t._v(" instance may be passed as "),s("code",[t._v("buffer")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint32Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomFill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Float64Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomFill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DataView")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomFill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("This API uses libuv's threadpool, which can have surprising and\nnegative performance implications for some applications; see the\n"),s("router-link",{attrs:{to:"/node/cli.html#cli_uv_threadpool_size_size"}},[s("code",[t._v("UV_THREADPOOL_SIZE")])]),t._v(" documentation for more information.")],1),t._v(" "),s("p",[t._v("The asynchronous version of "),s("code",[t._v("crypto.randomFill()")]),t._v(" is carried out in a single\nthreadpool request. To minimize threadpool task length variation, partition\nlarge "),s("code",[t._v("randomFill")]),t._v(" requests when doing so as part of fulfilling a client\nrequest.")]),t._v(" "),s("h3",{attrs:{id:"crypto-scrypt-password-salt-keylen-options-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-scrypt-password-salt-keylen-options-callback"}},[t._v("#")]),t._v(" crypto.scrypt(password, salt, keylen[, options], callback)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("password")]),t._v(" {string|Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("salt")]),t._v(" {string|Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("keylen")]),t._v(" {number}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("cost")]),t._v(" {number} CPU/memory cost parameter. Must be a power of two greater\nthan one. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("16384")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("blockSize")]),t._v(" {number} Block size parameter. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("8")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("parallelization")]),t._v(" {number} Parallelization parameter. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("1")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("N")]),t._v(" {number} Alias for "),s("code",[t._v("cost")]),t._v(". Only one of both may be specified.")]),t._v(" "),s("li",[s("code",[t._v("r")]),t._v(" {number} Alias for "),s("code",[t._v("blockSize")]),t._v(". Only one of both may be specified.")]),t._v(" "),s("li",[s("code",[t._v("p")]),t._v(" {number} Alias for "),s("code",[t._v("parallelization")]),t._v(". Only one of both may be specified.")]),t._v(" "),s("li",[s("code",[t._v("maxmem")]),t._v(" {number} Memory upper bound. It is an error when (approximately)\n"),s("code",[t._v("128 * N * r > maxmem")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("32 * 1024 * 1024")]),t._v(".")])])]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v(" {Function}\n"),s("ul",[s("li",[s("code",[t._v("err")]),t._v(" {Error}")]),t._v(" "),s("li",[s("code",[t._v("derivedKey")]),t._v(" {Buffer}")])])])]),t._v(" "),s("p",[t._v("Provides an asynchronous "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Scrypt",target:"_blank",rel:"noopener noreferrer"}},[t._v("scrypt"),s("OutboundLink")],1),t._v(" implementation. Scrypt is a password-based\nkey derivation function that is designed to be expensive computationally and\nmemory-wise in order to make brute-force attacks unrewarding.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("salt")]),t._v(" should be as unique as possible. It is recommended that a salt is\nrandom and at least 16 bytes long. See "),s("a",{attrs:{href:"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("NIST SP 800-132"),s("OutboundLink")],1),t._v(" for details.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("callback")]),t._v(" function is called with two arguments: "),s("code",[t._v("err")]),t._v(" and "),s("code",[t._v("derivedKey")]),t._v(".\n"),s("code",[t._v("err")]),t._v(" is an exception object when key derivation fails, otherwise "),s("code",[t._v("err")]),t._v(" is\n"),s("code",[t._v("null")]),t._v(". "),s("code",[t._v("derivedKey")]),t._v(" is passed to the callback as a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(".")],1),t._v(" "),s("p",[t._v("An exception is thrown when any of the input arguments specify invalid values\nor types.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Using the factory defaults.")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scrypt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secret'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" derivedKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("derivedKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '3745e48...08d59ae'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Using a custom N parameter. Must be a power of two.")]),t._v("\ncrypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scrypt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secret'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" derivedKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("derivedKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '3745e48...aa39b34'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"crypto-scryptsync-password-salt-keylen-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-scryptsync-password-salt-keylen-options"}},[t._v("#")]),t._v(" crypto.scryptSync(password, salt, keylen[, options])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("password")]),t._v(" {string|Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("salt")]),t._v(" {string|Buffer|TypedArray|DataView}")]),t._v(" "),s("li",[s("code",[t._v("keylen")]),t._v(" {number}")]),t._v(" "),s("li",[s("code",[t._v("options")]),t._v(" {Object}\n"),s("ul",[s("li",[s("code",[t._v("cost")]),t._v(" {number} CPU/memory cost parameter. Must be a power of two greater\nthan one. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("16384")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("blockSize")]),t._v(" {number} Block size parameter. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("8")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("parallelization")]),t._v(" {number} Parallelization parameter. "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("1")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("N")]),t._v(" {number} Alias for "),s("code",[t._v("cost")]),t._v(". Only one of both may be specified.")]),t._v(" "),s("li",[s("code",[t._v("r")]),t._v(" {number} Alias for "),s("code",[t._v("blockSize")]),t._v(". Only one of both may be specified.")]),t._v(" "),s("li",[s("code",[t._v("p")]),t._v(" {number} Alias for "),s("code",[t._v("parallelization")]),t._v(". Only one of both may be specified.")]),t._v(" "),s("li",[s("code",[t._v("maxmem")]),t._v(" {number} Memory upper bound. It is an error when (approximately)\n"),s("code",[t._v("128 * N * r > maxmem")]),t._v(". "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("32 * 1024 * 1024")]),t._v(".")])])]),t._v(" "),s("li",[t._v("Returns: {Buffer}")])]),t._v(" "),s("p",[t._v("Provides a synchronous "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Scrypt",target:"_blank",rel:"noopener noreferrer"}},[t._v("scrypt"),s("OutboundLink")],1),t._v(" implementation. Scrypt is a password-based\nkey derivation function that is designed to be expensive computationally and\nmemory-wise in order to make brute-force attacks unrewarding.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("salt")]),t._v(" should be as unique as possible. It is recommended that a salt is\nrandom and at least 16 bytes long. See "),s("a",{attrs:{href:"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("NIST SP 800-132"),s("OutboundLink")],1),t._v(" for details.")]),t._v(" "),s("p",[t._v("An exception is thrown when key derivation fails, otherwise the derived key is\nreturned as a "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(".")],1),t._v(" "),s("p",[t._v("An exception is thrown when any of the input arguments specify invalid values\nor types.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Using the factory defaults.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scryptSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secret'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '3745e48...08d59ae'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Using a custom N parameter. Must be a power of two.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scryptSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'secret'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salt'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '3745e48...aa39b34'")]),t._v("\n")])])]),s("h3",{attrs:{id:"crypto-setengine-engine-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-setengine-engine-flags"}},[t._v("#")]),t._v(" crypto.setEngine(engine[, flags])")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("engine")]),t._v(" {string}")]),t._v(" "),s("li",[s("code",[t._v("flags")]),t._v(" {crypto.constants} "),s("strong",[t._v("Default:")]),t._v(" "),s("code",[t._v("crypto.constants.ENGINE_METHOD_ALL")])])]),t._v(" "),s("p",[t._v("Load and set the "),s("code",[t._v("engine")]),t._v(" for some or all OpenSSL functions (selected by flags).")]),t._v(" "),s("p",[s("code",[t._v("engine")]),t._v(" could be either an id or a path to the engine's shared library.")]),t._v(" "),s("p",[t._v("The optional "),s("code",[t._v("flags")]),t._v(" argument uses "),s("code",[t._v("ENGINE_METHOD_ALL")]),t._v(" by default. The "),s("code",[t._v("flags")]),t._v("\nis a bit field taking one of or a mix of the following flags (defined in\n"),s("code",[t._v("crypto.constants")]),t._v("):")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_RSA")])]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_DSA")])]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_DH")])]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_RAND")])]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_EC")])]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_CIPHERS")])]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_DIGESTS")])]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_PKEY_METHS")])]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_PKEY_ASN1_METHS")])]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_ALL")])]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_NONE")])])]),t._v(" "),s("p",[t._v("The flags below are deprecated in OpenSSL-1.1.0.")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_ECDH")])]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_ECDSA")])]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.ENGINE_METHOD_STORE")])])]),t._v(" "),s("h3",{attrs:{id:"crypto-setfips-bool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-setfips-bool"}},[t._v("#")]),t._v(" crypto.setFips(bool)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("bool")]),t._v(" {boolean} "),s("code",[t._v("true")]),t._v(" to enable FIPS mode.")])]),t._v(" "),s("p",[t._v("Enables the FIPS compliant crypto provider in a FIPS-enabled Node.js build.\nThrows an error if FIPS mode is not available.")]),t._v(" "),s("h3",{attrs:{id:"crypto-sign-algorithm-data-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-sign-algorithm-data-key"}},[t._v("#")]),t._v(" crypto.sign(algorithm, data, key)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("algorithm")]),t._v(" {string | null | undefined}")]),t._v(" "),s("li",[s("code",[t._v("data")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("key")]),t._v(" {Object | string | Buffer | KeyObject}")]),t._v(" "),s("li",[t._v("Returns: {Buffer}")])]),t._v(" "),s("p",[t._v("Calculates and returns the signature for "),s("code",[t._v("data")]),t._v(" using the given private key and\nalgorithm. If "),s("code",[t._v("algorithm")]),t._v(" is "),s("code",[t._v("null")]),t._v(" or "),s("code",[t._v("undefined")]),t._v(", then the algorithm is\ndependent upon the key type (especially Ed25519 and Ed448).")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("key")]),t._v(" is not a "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(", this function behaves as if "),s("code",[t._v("key")]),t._v(" had been\npassed to "),s("a",{attrs:{href:"#crypto_crypto_createprivatekey_key"}},[s("code",[t._v("crypto.createPrivateKey()")])]),t._v(". If it is an object, the following\nadditional properties can be passed:")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("padding")]),t._v(" {integer} Optional padding value for RSA, one of the following:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("crypto.constants.RSA_PKCS1_PADDING")]),t._v(" (default)")]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.RSA_PKCS1_PSS_PADDING")])])]),t._v(" "),s("p",[s("code",[t._v("RSA_PKCS1_PSS_PADDING")]),t._v(" will use MGF1 with the same hash function\nused to sign the message as specified in section 3.1 of "),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc4055.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 4055"),s("OutboundLink")],1),t._v(".")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("saltLength")]),t._v(" {integer} Salt length for when padding is\n"),s("code",[t._v("RSA_PKCS1_PSS_PADDING")]),t._v(". The special value\n"),s("code",[t._v("crypto.constants.RSA_PSS_SALTLEN_DIGEST")]),t._v(" sets the salt length to the digest\nsize, "),s("code",[t._v("crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN")]),t._v(" (default) sets it to the\nmaximum permissible value.")])])]),t._v(" "),s("h3",{attrs:{id:"crypto-timingsafeequal-a-b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-timingsafeequal-a-b"}},[t._v("#")]),t._v(" crypto.timingSafeEqual(a, b)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("a")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("b")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("This function is based on a constant-time algorithm.\nReturns true if "),s("code",[t._v("a")]),t._v(" is equal to "),s("code",[t._v("b")]),t._v(", without leaking timing information that\nwould allow an attacker to guess one of the values. This is suitable for\ncomparing HMAC digests or secret values like authentication cookies or\n"),s("a",{attrs:{href:"https://www.w3.org/TR/capability-urls/",target:"_blank",rel:"noopener noreferrer"}},[t._v("capability urls"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[s("code",[t._v("a")]),t._v(" and "),s("code",[t._v("b")]),t._v(" must both be "),s("code",[t._v("Buffer")]),t._v("s, "),s("code",[t._v("TypedArray")]),t._v("s, or "),s("code",[t._v("DataView")]),t._v("s, and they\nmust have the same length.")]),t._v(" "),s("p",[t._v("Use of "),s("code",[t._v("crypto.timingSafeEqual")]),t._v(" does not guarantee that the "),s("em",[t._v("surrounding")]),t._v(" code\nis timing-safe. Care should be taken to ensure that the surrounding code does\nnot introduce timing vulnerabilities.")]),t._v(" "),s("h3",{attrs:{id:"crypto-verify-algorithm-data-key-signature"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-verify-algorithm-data-key-signature"}},[t._v("#")]),t._v(" crypto.verify(algorithm, data, key, signature)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("algorithm")]),t._v(" {string | null | undefined}")]),t._v(" "),s("li",[s("code",[t._v("data")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[s("code",[t._v("key")]),t._v(" {Object | string | Buffer | KeyObject}")]),t._v(" "),s("li",[s("code",[t._v("signature")]),t._v(" {Buffer | TypedArray | DataView}")]),t._v(" "),s("li",[t._v("Returns: {boolean}")])]),t._v(" "),s("p",[t._v("Verifies the given signature for "),s("code",[t._v("data")]),t._v(" using the given key and algorithm. If\n"),s("code",[t._v("algorithm")]),t._v(" is "),s("code",[t._v("null")]),t._v(" or "),s("code",[t._v("undefined")]),t._v(", then the algorithm is dependent upon the\nkey type (especially Ed25519 and Ed448).")]),t._v(" "),s("p",[t._v("If "),s("code",[t._v("key")]),t._v(" is not a "),s("a",{attrs:{href:"#crypto_class_keyobject"}},[s("code",[t._v("KeyObject")])]),t._v(", this function behaves as if "),s("code",[t._v("key")]),t._v(" had been\npassed to "),s("a",{attrs:{href:"#crypto_crypto_createpublickey_key"}},[s("code",[t._v("crypto.createPublicKey()")])]),t._v(". If it is an object, the following\nadditional properties can be passed:")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("padding")]),t._v(" {integer} Optional padding value for RSA, one of the following:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("crypto.constants.RSA_PKCS1_PADDING")]),t._v(" (default)")]),t._v(" "),s("li",[s("code",[t._v("crypto.constants.RSA_PKCS1_PSS_PADDING")])])]),t._v(" "),s("p",[s("code",[t._v("RSA_PKCS1_PSS_PADDING")]),t._v(" will use MGF1 with the same hash function\nused to sign the message as specified in section 3.1 of "),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc4055.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 4055"),s("OutboundLink")],1),t._v(".")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("saltLength")]),t._v(" {integer} Salt length for when padding is\n"),s("code",[t._v("RSA_PKCS1_PSS_PADDING")]),t._v(". The special value\n"),s("code",[t._v("crypto.constants.RSA_PSS_SALTLEN_DIGEST")]),t._v(" sets the salt length to the digest\nsize, "),s("code",[t._v("crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN")]),t._v(" (default) sets it to the\nmaximum permissible value.")])])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("signature")]),t._v(" argument is the previously calculated signature for the "),s("code",[t._v("data")]),t._v(".")]),t._v(" "),s("p",[t._v("Because public keys can be derived from private keys, a private key or a public\nkey may be passed for "),s("code",[t._v("key")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"notes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notes"}},[t._v("#")]),t._v(" Notes")]),t._v(" "),s("h3",{attrs:{id:"legacy-streams-api-pre-node-js-v0-10"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#legacy-streams-api-pre-node-js-v0-10"}},[t._v("#")]),t._v(" Legacy Streams API (pre Node.js v0.10)")]),t._v(" "),s("p",[t._v("The Crypto module was added to Node.js before there was the concept of a\nunified Stream API, and before there were "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" objects for handling\nbinary data. As such, the many of the "),s("code",[t._v("crypto")]),t._v(" defined classes have methods not\ntypically found on other Node.js classes that implement the "),s("router-link",{attrs:{to:"/node/stream.html"}},[t._v("streams")]),t._v("\nAPI (e.g. "),s("code",[t._v("update()")]),t._v(", "),s("code",[t._v("final()")]),t._v(", or "),s("code",[t._v("digest()")]),t._v("). Also, many methods accepted\nand returned "),s("code",[t._v("'latin1'")]),t._v(" encoded strings by default rather than "),s("code",[t._v("Buffer")]),t._v("s. This\ndefault was changed after Node.js v0.8 to use "),s("router-link",{attrs:{to:"/node/buffer.html"}},[s("code",[t._v("Buffer")])]),t._v(" objects by default\ninstead.")],1),t._v(" "),s("h3",{attrs:{id:"recent-ecdh-changes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#recent-ecdh-changes"}},[t._v("#")]),t._v(" Recent ECDH Changes")]),t._v(" "),s("p",[t._v("Usage of "),s("code",[t._v("ECDH")]),t._v(" with non-dynamically generated key pairs has been simplified.\nNow, "),s("a",{attrs:{href:"#crypto_ecdh_setprivatekey_privatekey_encoding"}},[s("code",[t._v("ecdh.setPrivateKey()")])]),t._v(" can be called with a preselected private key\nand the associated public point (key) will be computed and stored in the object.\nThis allows code to only store and provide the private part of the EC key pair.\n"),s("a",{attrs:{href:"#crypto_ecdh_setprivatekey_privatekey_encoding"}},[s("code",[t._v("ecdh.setPrivateKey()")])]),t._v(" now also validates that the private key is valid for\nthe selected curve.")]),t._v(" "),s("p",[t._v("The "),s("a",{attrs:{href:"#crypto_ecdh_setpublickey_publickey_encoding"}},[s("code",[t._v("ecdh.setPublicKey()")])]),t._v(" method is now deprecated as its inclusion in the\nAPI is not useful. Either a previously stored private key should be set, which\nautomatically generates the associated public key, or "),s("a",{attrs:{href:"#crypto_ecdh_generatekeys_encoding_format"}},[s("code",[t._v("ecdh.generateKeys()")])]),t._v("\nshould be called. The main drawback of using "),s("a",{attrs:{href:"#crypto_ecdh_setpublickey_publickey_encoding"}},[s("code",[t._v("ecdh.setPublicKey()")])]),t._v(" is that\nit can be used to put the ECDH key pair into an inconsistent state.")]),t._v(" "),s("h3",{attrs:{id:"support-for-weak-or-compromised-algorithms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#support-for-weak-or-compromised-algorithms"}},[t._v("#")]),t._v(" Support for weak or compromised algorithms")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("crypto")]),t._v(" module still supports some algorithms which are already\ncompromised and are not currently recommended for use. The API also allows\nthe use of ciphers and hashes with a small key size that are too weak for safe\nuse.")]),t._v(" "),s("p",[t._v("Users should take full responsibility for selecting the crypto\nalgorithm and key size according to their security requirements.")]),t._v(" "),s("p",[t._v("Based on the recommendations of "),s("a",{attrs:{href:"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("NIST SP 800-131A"),s("OutboundLink")],1),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("MD5 and SHA-1 are no longer acceptable where collision resistance is\nrequired such as digital signatures.")]),t._v(" "),s("li",[t._v("The key used with RSA, DSA, and DH algorithms is recommended to have\nat least 2048 bits and that of the curve of ECDSA and ECDH at least\n224 bits, to be safe to use for several years.")]),t._v(" "),s("li",[t._v("The DH groups of "),s("code",[t._v("modp1")]),t._v(", "),s("code",[t._v("modp2")]),t._v(" and "),s("code",[t._v("modp5")]),t._v(" have a key size\nsmaller than 2048 bits and are not recommended.")])]),t._v(" "),s("p",[t._v("See the reference for other recommendations and details.")]),t._v(" "),s("h3",{attrs:{id:"ccm-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ccm-mode"}},[t._v("#")]),t._v(" CCM mode")]),t._v(" "),s("p",[t._v("CCM is one of the supported "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Authenticated_encryption",target:"_blank",rel:"noopener noreferrer"}},[t._v("AEAD algorithms"),s("OutboundLink")],1),t._v(". Applications which use this\nmode must adhere to certain restrictions when using the cipher API:")]),t._v(" "),s("ul",[s("li",[t._v("The authentication tag length must be specified during cipher creation by\nsetting the "),s("code",[t._v("authTagLength")]),t._v(" option and must be one of 4, 6, 8, 10, 12, 14 or\n16 bytes.")]),t._v(" "),s("li",[t._v("The length of the initialization vector (nonce) "),s("code",[t._v("N")]),t._v(" must be between 7 and 13\nbytes ("),s("code",[t._v("7 ≤ N ≤ 13")]),t._v(").")]),t._v(" "),s("li",[t._v("The length of the plaintext is limited to "),s("code",[t._v("2 ** (8 * (15 - N))")]),t._v(" bytes.")]),t._v(" "),s("li",[t._v("When decrypting, the authentication tag must be set via "),s("code",[t._v("setAuthTag()")]),t._v(" before\ncalling "),s("code",[t._v("update()")]),t._v(".\nOtherwise, decryption will fail and "),s("code",[t._v("final()")]),t._v(" will throw an error in\ncompliance with section 2.6 of "),s("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc3610.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 3610"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("li",[t._v("Using stream methods such as "),s("code",[t._v("write(data)")]),t._v(", "),s("code",[t._v("end(data)")]),t._v(" or "),s("code",[t._v("pipe()")]),t._v(" in CCM\nmode might fail as CCM cannot handle more than one chunk of data per instance.")]),t._v(" "),s("li",[t._v("When passing additional authenticated data (AAD), the length of the actual\nmessage in bytes must be passed to "),s("code",[t._v("setAAD()")]),t._v(" via the "),s("code",[t._v("plaintextLength")]),t._v("\noption. This is not necessary if no AAD is used.")]),t._v(" "),s("li",[t._v("As CCM processes the whole message at once, "),s("code",[t._v("update()")]),t._v(" can only be called\nonce.")]),t._v(" "),s("li",[t._v("Even though calling "),s("code",[t._v("update()")]),t._v(" is sufficient to encrypt/decrypt the message,\napplications "),s("em",[t._v("must")]),t._v(" call "),s("code",[t._v("final()")]),t._v(" to compute or verify the\nauthentication tag.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'keykeykeykeykeykeykeykey'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nonce "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" aad "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0123456789'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cipher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCipheriv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aes-192-ccm'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nonce"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  authTagLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" plaintext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello world'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAAD")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  plaintextLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("byteLength")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plaintext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ciphertext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plaintext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("final")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAuthTag")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Now transmit { ciphertext, nonce, tag }.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" decipher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDecipheriv")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aes-192-ccm'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nonce"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  authTagLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndecipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAuthTag")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndecipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAAD")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  plaintextLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ciphertext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" receivedPlaintext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" decipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ciphertext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  decipher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("final")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Authentication failed!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("receivedPlaintext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"crypto-constants-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crypto-constants-2"}},[t._v("#")]),t._v(" Crypto Constants")]),t._v(" "),s("p",[t._v("The following constants exported by "),s("code",[t._v("crypto.constants")]),t._v(" apply to various uses of\nthe "),s("code",[t._v("crypto")]),t._v(", "),s("code",[t._v("tls")]),t._v(", and "),s("code",[t._v("https")]),t._v(" modules and are generally specific to OpenSSL.")]),t._v(" "),s("h3",{attrs:{id:"openssl-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#openssl-options"}},[t._v("#")]),t._v(" OpenSSL Options")]),t._v(" "),s("table",[s("tr",[s("th",[t._v("Constant")]),t._v(" "),s("th",[t._v("Description")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_ALL")])]),t._v(" "),s("td",[t._v("Applies multiple bug workarounds within OpenSSL. See\n    "),s("a",{attrs:{href:"https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html"}},[t._v("https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html")]),t._v("\n    for detail.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION")])]),t._v(" "),s("td",[t._v("Allows legacy insecure renegotiation between OpenSSL and unpatched\n    clients or servers. See\n    "),s("a",{attrs:{href:"https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html"}},[t._v("https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_CIPHER_SERVER_PREFERENCE")])]),t._v(" "),s("td",[t._v("Attempts to use the server's preferences instead of the client's when\n    selecting a cipher. Behavior depends on protocol version. See\n    "),s("a",{attrs:{href:"https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html"}},[t._v("https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_CISCO_ANYCONNECT")])]),t._v(" "),s("td",[t._v('Instructs OpenSSL to use Cisco\'s "speshul" version of DTLS_BAD_VER.')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_COOKIE_EXCHANGE")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to turn on cookie exchange.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_CRYPTOPRO_TLSEXT_BUG")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to add server-hello extension from an early version\n    of the cryptopro draft.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to disable a SSL 3.0/TLS 1.0 vulnerability\n    workaround added in OpenSSL 0.9.6d.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_EPHEMERAL_RSA")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to always use the tmp_rsa key when performing RSA\n    operations.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_LEGACY_SERVER_CONNECT")])]),t._v(" "),s("td",[t._v("Allows initial connection to servers that do not support RI.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_MICROSOFT_SESS_ID_BUG")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_MSIE_SSLV2_RSA_PADDING")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to disable the workaround for a man-in-the-middle\n    protocol-version vulnerability in the SSL 2.0 server implementation.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NETSCAPE_CA_DN_BUG")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NETSCAPE_CHALLENGE_BUG")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NO_COMPRESSION")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to disable support for SSL/TLS compression.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NO_QUERY_MTU")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to always start a new session when performing\n    renegotiation.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NO_SSLv2")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to turn off SSL v2")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NO_SSLv3")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to turn off SSL v3")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NO_TICKET")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to disable use of RFC4507bis tickets.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NO_TLSv1")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to turn off TLS v1")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NO_TLSv1_1")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to turn off TLS v1.1")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_NO_TLSv1_2")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to turn off TLS v1.2")])]),t._v(" "),s("td",[s("code",[t._v("SSL_OP_PKCS1_CHECK_1")])]),t._v(" "),s("td"),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_PKCS1_CHECK_2")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_SINGLE_DH_USE")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to always create a new key when using\n    temporary/ephemeral DH parameters.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_SINGLE_ECDH_USE")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to always create a new key when using\n    temporary/ephemeral ECDH parameters.")])]),t._v(" "),s("td",[s("code",[t._v("SSL_OP_SSLEAY_080_CLIENT_DH_BUG")])]),t._v(" "),s("td"),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_TLS_BLOCK_PADDING_BUG")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_TLS_D5_BUG")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("SSL_OP_TLS_ROLLBACK_BUG")])]),t._v(" "),s("td",[t._v("Instructs OpenSSL to disable version rollback attack detection.")])])]),t._v(" "),s("h3",{attrs:{id:"openssl-engine-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#openssl-engine-constants"}},[t._v("#")]),t._v(" OpenSSL Engine Constants")]),t._v(" "),s("table",[s("tr",[s("th",[t._v("Constant")]),t._v(" "),s("th",[t._v("Description")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ENGINE_METHOD_RSA")])]),t._v(" "),s("td",[t._v("Limit engine usage to RSA")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ENGINE_METHOD_DSA")])]),t._v(" "),s("td",[t._v("Limit engine usage to DSA")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ENGINE_METHOD_DH")])]),t._v(" "),s("td",[t._v("Limit engine usage to DH")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ENGINE_METHOD_RAND")])]),t._v(" "),s("td",[t._v("Limit engine usage to RAND")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ENGINE_METHOD_EC")])]),t._v(" "),s("td",[t._v("Limit engine usage to EC")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ENGINE_METHOD_CIPHERS")])]),t._v(" "),s("td",[t._v("Limit engine usage to CIPHERS")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ENGINE_METHOD_DIGESTS")])]),t._v(" "),s("td",[t._v("Limit engine usage to DIGESTS")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ENGINE_METHOD_PKEY_METHS")])]),t._v(" "),s("td",[t._v("Limit engine usage to PKEY_METHDS")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ENGINE_METHOD_PKEY_ASN1_METHS")])]),t._v(" "),s("td",[t._v("Limit engine usage to PKEY_ASN1_METHS")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ENGINE_METHOD_ALL")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ENGINE_METHOD_NONE")])]),t._v(" "),s("td")])]),t._v(" "),s("h3",{attrs:{id:"other-openssl-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#other-openssl-constants"}},[t._v("#")]),t._v(" Other OpenSSL Constants")]),t._v(" "),s("table",[s("tr",[s("th",[t._v("Constant")]),t._v(" "),s("th",[t._v("Description")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("DH_CHECK_P_NOT_SAFE_PRIME")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("DH_CHECK_P_NOT_PRIME")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("DH_UNABLE_TO_CHECK_GENERATOR")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("DH_NOT_SUITABLE_GENERATOR")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("ALPN_ENABLED")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("RSA_PKCS1_PADDING")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("RSA_SSLV23_PADDING")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("RSA_NO_PADDING")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("RSA_PKCS1_OAEP_PADDING")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("RSA_X931_PADDING")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("RSA_PKCS1_PSS_PADDING")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("RSA_PSS_SALTLEN_DIGEST")])]),t._v(" "),s("td",[t._v("Sets the salt length for "),s("code",[t._v("RSA_PKCS1_PSS_PADDING")]),t._v(" to the\n        digest size when signing or verifying.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("RSA_PSS_SALTLEN_MAX_SIGN")])]),t._v(" "),s("td",[t._v("Sets the salt length for "),s("code",[t._v("RSA_PKCS1_PSS_PADDING")]),t._v(" to the\n        maximum permissible value when signing data.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("RSA_PSS_SALTLEN_AUTO")])]),t._v(" "),s("td",[t._v("Causes the salt length for "),s("code",[t._v("RSA_PKCS1_PSS_PADDING")]),t._v(" to be\n        determined automatically when verifying a signature.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("POINT_CONVERSION_COMPRESSED")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("POINT_CONVERSION_UNCOMPRESSED")])]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("POINT_CONVERSION_HYBRID")])]),t._v(" "),s("td")])]),t._v(" "),s("h3",{attrs:{id:"node-js-crypto-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-js-crypto-constants"}},[t._v("#")]),t._v(" Node.js Crypto Constants")]),t._v(" "),s("table",[s("tr",[s("th",[t._v("Constant")]),t._v(" "),s("th",[t._v("Description")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("defaultCoreCipherList")])]),t._v(" "),s("td",[t._v("Specifies the built-in default cipher list used by Node.js.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("defaultCipherList")])]),t._v(" "),s("td",[t._v("Specifies the active default cipher list used by the current Node.js\n    process.")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);