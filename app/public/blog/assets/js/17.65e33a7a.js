(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{242:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"console"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console"}},[t._v("#")]),t._v(" Console")]),t._v(" "),a("blockquote",[a("p",[t._v("Stability: 2 - Stable")])]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("console")]),t._v(" module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.")]),t._v(" "),a("p",[t._v("The module exports two specific components:")]),t._v(" "),a("ul",[a("li",[t._v("A "),a("code",[t._v("Console")]),t._v(" class with methods such as "),a("code",[t._v("console.log()")]),t._v(", "),a("code",[t._v("console.error()")]),t._v(" and\n"),a("code",[t._v("console.warn()")]),t._v(" that can be used to write to any Node.js stream.")]),t._v(" "),a("li",[t._v("A global "),a("code",[t._v("console")]),t._v(" instance configured to write to "),a("router-link",{attrs:{to:"/node/process.html#process_process_stdout"}},[a("code",[t._v("process.stdout")])]),t._v(" and\n"),a("router-link",{attrs:{to:"/node/process.html#process_process_stderr"}},[a("code",[t._v("process.stderr")])]),t._v(". The global "),a("code",[t._v("console")]),t._v(" can be used without calling\n"),a("code",[t._v("require('console')")]),t._v(".")],1)]),t._v(" "),a("p",[a("em",[a("strong",[t._v("Warning")])]),t._v(": The global console object's methods are neither consistently\nsynchronous like the browser APIs they resemble, nor are they consistently\nasynchronous like all other Node.js streams. See the "),a("router-link",{attrs:{to:"/node/process.html#process_a_note_on_process_i_o"}},[t._v("note on process I/O")]),t._v(" for\nmore information.")],1),t._v(" "),a("p",[t._v("Example using the global "),a("code",[t._v("console")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: hello world, to stdout")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello %s'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: hello world, to stdout")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Whoops, something bad happened'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: [Error: Whoops, something bad happened], to stderr")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Will Robinson'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("warn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Danger ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("! Danger!")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: Danger Will Robinson! Danger!, to stderr")]),t._v("\n")])])]),a("p",[t._v("Example using the "),a("code",[t._v("Console")]),t._v(" class:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" out "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getStreamSomehow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getStreamSomehow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myConsole "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nmyConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: hello world, to out")]),t._v("\nmyConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello %s'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: hello world, to out")]),t._v("\nmyConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Whoops, something bad happened'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: [Error: Whoops, something bad happened], to err")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Will Robinson'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmyConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("warn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Danger ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("! Danger!")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: Danger Will Robinson! Danger!, to err")]),t._v("\n")])])]),a("h2",{attrs:{id:"class-console"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-console"}},[t._v("#")]),t._v(" Class: Console")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("Console")]),t._v(" class can be used to create a simple logger with configurable\noutput streams and can be accessed using either "),a("code",[t._v("require('console').Console")]),t._v("\nor "),a("code",[t._v("console.Console")]),t._v(" (or their destructured counterparts):")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Console "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'console'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Console "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"new-console-stdout-stderr-ignoreerrors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-console-stdout-stderr-ignoreerrors"}},[t._v("#")]),t._v(" new Console(stdout[, stderr][, ignoreErrors])")]),t._v(" "),a("h3",{attrs:{id:"new-console-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-console-options"}},[t._v("#")]),t._v(" new Console(options)")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("options")]),t._v(" {Object}\n"),a("ul",[a("li",[a("code",[t._v("stdout")]),t._v(" {stream.Writable}")]),t._v(" "),a("li",[a("code",[t._v("stderr")]),t._v(" {stream.Writable}")]),t._v(" "),a("li",[a("code",[t._v("ignoreErrors")]),t._v(" {boolean} Ignore errors when writing to the underlying\nstreams. "),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("true")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("colorMode")]),t._v(" {boolean|string} Set color support for this "),a("code",[t._v("Console")]),t._v(" instance.\nSetting to "),a("code",[t._v("true")]),t._v(" enables coloring while inspecting values, setting to\n"),a("code",[t._v("'auto'")]),t._v(" will make color support depend on the value of the "),a("code",[t._v("isTTY")]),t._v(" property\nand the value returned by "),a("code",[t._v("getColorDepth()")]),t._v(" on the respective stream. This\noption can not be used, if "),a("code",[t._v("inspectOptions.colors")]),t._v(" is set as well.\n"),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("'auto'")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("inspectOptions")]),t._v(" {Object} Specifies options that are passed along to\n"),a("router-link",{attrs:{to:"/node/util.html#util_util_inspect_object_options"}},[a("code",[t._v("util.inspect()")])]),t._v(".")],1)])])]),t._v(" "),a("p",[t._v("Creates a new "),a("code",[t._v("Console")]),t._v(" with one or two writable stream instances. "),a("code",[t._v("stdout")]),t._v(" is a\nwritable stream to print log or info output. "),a("code",[t._v("stderr")]),t._v(" is used for warning or\nerror output. If "),a("code",[t._v("stderr")]),t._v(" is not provided, "),a("code",[t._v("stdout")]),t._v(" is used for "),a("code",[t._v("stderr")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" output "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createWriteStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./stdout.log'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" errorOutput "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createWriteStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./stderr.log'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Custom simple logger")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" logger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" stdout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stderr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" errorOutput "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use it like console")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlogger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'count: %d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// In stdout.log: count 5")]),t._v("\n")])])]),a("p",[t._v("The global "),a("code",[t._v("console")]),t._v(" is a special "),a("code",[t._v("Console")]),t._v(" whose output is sent to\n"),a("router-link",{attrs:{to:"/node/process.html#process_process_stdout"}},[a("code",[t._v("process.stdout")])]),t._v(" and "),a("router-link",{attrs:{to:"/node/process.html#process_process_stderr"}},[a("code",[t._v("process.stderr")])]),t._v(". It is equivalent to calling:")],1),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" stdout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stderr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stderr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"console-assert-value-message"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-assert-value-message"}},[t._v("#")]),t._v(" console.assert(value[, ...message])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("value")]),t._v(" {any} The value tested for being truthy.")]),t._v(" "),a("li",[a("code",[t._v("...message")]),t._v(" {any} All arguments besides "),a("code",[t._v("value")]),t._v(" are used as error message.")])]),t._v(" "),a("p",[t._v("A simple assertion test that verifies whether "),a("code",[t._v("value")]),t._v(" is truthy. If it is not,\n"),a("code",[t._v("Assertion failed")]),t._v(" is logged. If provided, the error "),a("code",[t._v("message")]),t._v(" is formatted\nusing "),a("router-link",{attrs:{to:"/node/util.html#util_util_format_format_args"}},[a("code",[t._v("util.format()")])]),t._v(" by passing along all message arguments. The output is\nused as the error message.")],1),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'does nothing'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Whoops %s work'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'didn\\'t'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Assertion failed: Whoops didn't work")]),t._v("\n")])])]),a("p",[t._v("Calling "),a("code",[t._v("console.assert()")]),t._v(" with a falsy assertion will only cause the "),a("code",[t._v("message")]),t._v("\nto be printed to the console without interrupting execution of subsequent code.")]),t._v(" "),a("h3",{attrs:{id:"console-clear"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-clear"}},[t._v("#")]),t._v(" console.clear()")]),t._v(" "),a("p",[t._v("When "),a("code",[t._v("stdout")]),t._v(" is a TTY, calling "),a("code",[t._v("console.clear()")]),t._v(" will attempt to clear the\nTTY. When "),a("code",[t._v("stdout")]),t._v(" is not a TTY, this method does nothing.")]),t._v(" "),a("p",[t._v("The specific operation of "),a("code",[t._v("console.clear()")]),t._v(" can vary across operating systems\nand terminal types. For most Linux operating systems, "),a("code",[t._v("console.clear()")]),t._v("\noperates similarly to the "),a("code",[t._v("clear")]),t._v(" shell command. On Windows, "),a("code",[t._v("console.clear()")]),t._v("\nwill clear only the output in the current terminal viewport for the Node.js\nbinary.")]),t._v(" "),a("h3",{attrs:{id:"console-count-label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-count-label"}},[t._v("#")]),t._v(" console.count([label])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("label")]),t._v(" {string} The display label for the counter. "),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("'default'")]),t._v(".")])]),t._v(" "),a("p",[t._v("Maintains an internal counter specific to "),a("code",[t._v("label")]),t._v(" and outputs to "),a("code",[t._v("stdout")]),t._v(" the\nnumber of times "),a("code",[t._v("console.count()")]),t._v(" has been called with the given "),a("code",[t._v("label")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nabc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xyz'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nxyz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nabc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h3",{attrs:{id:"console-countreset-label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-countreset-label"}},[t._v("#")]),t._v(" console.countReset([label])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("label")]),t._v(" {string} The display label for the counter. "),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("'default'")]),t._v(".")])]),t._v(" "),a("p",[t._v("Resets the internal counter specific to "),a("code",[t._v("label")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nabc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("countReset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nabc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h3",{attrs:{id:"console-debug-data-args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-debug-data-args"}},[t._v("#")]),t._v(" console.debug(data[, ...args])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("data")]),t._v(" {any}")]),t._v(" "),a("li",[a("code",[t._v("...args")]),t._v(" {any}")])]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("console.debug()")]),t._v(" function is an alias for "),a("a",{attrs:{href:"#console_console_log_data_args"}},[a("code",[t._v("console.log()")])]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"console-dir-obj-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-dir-obj-options"}},[t._v("#")]),t._v(" console.dir(obj[, options])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("obj")]),t._v(" {any}")]),t._v(" "),a("li",[a("code",[t._v("options")]),t._v(" {Object}\n"),a("ul",[a("li",[a("code",[t._v("showHidden")]),t._v(" {boolean} If "),a("code",[t._v("true")]),t._v(" then the object's non-enumerable and symbol\nproperties will be shown too. "),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("false")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("depth")]),t._v(" {number} Tells "),a("router-link",{attrs:{to:"/node/util.html#util_util_inspect_object_options"}},[a("code",[t._v("util.inspect()")])]),t._v(" how many times to recurse while\nformatting the object. This is useful for inspecting large complicated\nobjects. To make it recurse indefinitely, pass "),a("code",[t._v("null")]),t._v(". "),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("2")]),t._v(".")],1),t._v(" "),a("li",[a("code",[t._v("colors")]),t._v(" {boolean} If "),a("code",[t._v("true")]),t._v(", then the output will be styled with ANSI color\ncodes. Colors are customizable;\nsee "),a("router-link",{attrs:{to:"/node/util.html#util_customizing_util_inspect_colors"}},[t._v("customizing "),a("code",[t._v("util.inspect()")]),t._v(" colors")]),t._v(". "),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("false")]),t._v(".")],1)])])]),t._v(" "),a("p",[t._v("Uses "),a("router-link",{attrs:{to:"/node/util.html#util_util_inspect_object_options"}},[a("code",[t._v("util.inspect()")])]),t._v(" on "),a("code",[t._v("obj")]),t._v(" and prints the resulting string to "),a("code",[t._v("stdout")]),t._v(".\nThis function bypasses any custom "),a("code",[t._v("inspect()")]),t._v(" function defined on "),a("code",[t._v("obj")]),t._v(".")],1),t._v(" "),a("h3",{attrs:{id:"console-dirxml-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-dirxml-data"}},[t._v("#")]),t._v(" console.dirxml(...data)")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("...data")]),t._v(" {any}")])]),t._v(" "),a("p",[t._v("This method calls "),a("code",[t._v("console.log()")]),t._v(" passing it the arguments received.\nThis method does not produce any XML formatting.")]),t._v(" "),a("h3",{attrs:{id:"console-error-data-args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-error-data-args"}},[t._v("#")]),t._v(" console.error([data][, ...args])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("data")]),t._v(" {any}")]),t._v(" "),a("li",[a("code",[t._v("...args")]),t._v(" {any}")])]),t._v(" "),a("p",[t._v("Prints to "),a("code",[t._v("stderr")]),t._v(" with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to printf(3) (the arguments are all passed to\n"),a("router-link",{attrs:{to:"/node/util.html#util_util_format_format_args"}},[a("code",[t._v("util.format()")])]),t._v(").")],1),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error #%d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: error #5, to stderr")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: error 5, to stderr")]),t._v("\n")])])]),a("p",[t._v("If formatting elements (e.g. "),a("code",[t._v("%d")]),t._v(") are not found in the first string then\n"),a("router-link",{attrs:{to:"/node/util.html#util_util_inspect_object_options"}},[a("code",[t._v("util.inspect()")])]),t._v(" is called on each argument and the resulting string\nvalues are concatenated. See "),a("router-link",{attrs:{to:"/node/util.html#util_util_format_format_args"}},[a("code",[t._v("util.format()")])]),t._v(" for more information.")],1),t._v(" "),a("h3",{attrs:{id:"console-group-label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-group-label"}},[t._v("#")]),t._v(" console.group([...label])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("...label")]),t._v(" {any}")])]),t._v(" "),a("p",[t._v("Increases indentation of subsequent lines by two spaces.")]),t._v(" "),a("p",[t._v("If one or more "),a("code",[t._v("label")]),t._v("s are provided, those are printed first without the\nadditional indentation.")]),t._v(" "),a("h3",{attrs:{id:"console-groupcollapsed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-groupcollapsed"}},[t._v("#")]),t._v(" console.groupCollapsed()")]),t._v(" "),a("p",[t._v("An alias for "),a("a",{attrs:{href:"#console_console_group_label"}},[a("code",[t._v("console.group()")])]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"console-groupend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-groupend"}},[t._v("#")]),t._v(" console.groupEnd()")]),t._v(" "),a("p",[t._v("Decreases indentation of subsequent lines by two spaces.")]),t._v(" "),a("h3",{attrs:{id:"console-info-data-args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-info-data-args"}},[t._v("#")]),t._v(" console.info([data][, ...args])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("data")]),t._v(" {any}")]),t._v(" "),a("li",[a("code",[t._v("...args")]),t._v(" {any}")])]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("console.info()")]),t._v(" function is an alias for "),a("a",{attrs:{href:"#console_console_log_data_args"}},[a("code",[t._v("console.log()")])]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"console-log-data-args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-log-data-args"}},[t._v("#")]),t._v(" console.log([data][, ...args])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("data")]),t._v(" {any}")]),t._v(" "),a("li",[a("code",[t._v("...args")]),t._v(" {any}")])]),t._v(" "),a("p",[t._v("Prints to "),a("code",[t._v("stdout")]),t._v(" with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to printf(3) (the arguments are all passed to\n"),a("router-link",{attrs:{to:"/node/util.html#util_util_format_format_args"}},[a("code",[t._v("util.format()")])]),t._v(").")],1),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'count: %d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: count: 5, to stdout")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'count:'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: count: 5, to stdout")]),t._v("\n")])])]),a("p",[t._v("See "),a("router-link",{attrs:{to:"/node/util.html#util_util_format_format_args"}},[a("code",[t._v("util.format()")])]),t._v(" for more information.")],1),t._v(" "),a("h3",{attrs:{id:"console-table-tabulardata-properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-table-tabulardata-properties"}},[t._v("#")]),t._v(" console.table(tabularData[, properties])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("tabularData")]),t._v(" {any}")]),t._v(" "),a("li",[a("code",[t._v("properties")]),t._v(" {string[]} Alternate properties for constructing the table.")])]),t._v(" "),a("p",[t._v("Try to construct a table with the columns of the properties of "),a("code",[t._v("tabularData")]),t._v("\n(or use "),a("code",[t._v("properties")]),t._v(") and rows of "),a("code",[t._v("tabularData")]),t._v(" and log it. Falls back to just\nlogging the argument if it can’t be parsed as tabular.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// These can't be parsed as tabular data")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("table")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Symbol()")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("table")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("table")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Y'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Z'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ┌─────────┬─────┬─────┐")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// │ (index) │  a  │  b  │")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ├─────────┼─────┼─────┤")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// │    0    │  1  │ 'Y' │")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// │    1    │ 'Z' │  2  │")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// └─────────┴─────┴─────┘")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("table")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Y'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Z'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ┌─────────┬─────┐")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// │ (index) │  a  │")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ├─────────┼─────┤")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// │    0    │  1  │")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// │    1    │ 'Z' │")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// └─────────┴─────┘")]),t._v("\n")])])]),a("h3",{attrs:{id:"console-time-label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-time-label"}},[t._v("#")]),t._v(" console.time([label])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("label")]),t._v(" {string} "),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("'default'")])])]),t._v(" "),a("p",[t._v("Starts a timer that can be used to compute the duration of an operation. Timers\nare identified by a unique "),a("code",[t._v("label")]),t._v(". Use the same "),a("code",[t._v("label")]),t._v(" when calling\n"),a("a",{attrs:{href:"#console_console_timeend_label"}},[a("code",[t._v("console.timeEnd()")])]),t._v(" to stop the timer and output the elapsed time in\nmilliseconds to "),a("code",[t._v("stdout")]),t._v(". Timer durations are accurate to the sub-millisecond.")]),t._v(" "),a("h3",{attrs:{id:"console-timeend-label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-timeend-label"}},[t._v("#")]),t._v(" console.timeEnd([label])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("label")]),t._v(" {string} "),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("'default'")])])]),t._v(" "),a("p",[t._v("Stops a timer that was previously started by calling "),a("a",{attrs:{href:"#console_console_time_label"}},[a("code",[t._v("console.time()")])]),t._v(" and\nprints the result to "),a("code",[t._v("stdout")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'100-elements'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeEnd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'100-elements'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prints 100-elements: 225.438ms")]),t._v("\n")])])]),a("h3",{attrs:{id:"console-timelog-label-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-timelog-label-data"}},[t._v("#")]),t._v(" console.timeLog([label][, ...data])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("label")]),t._v(" {string} "),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("'default'")])]),t._v(" "),a("li",[a("code",[t._v("...data")]),t._v(" {any}")])]),t._v(" "),a("p",[t._v("For a timer that was previously started by calling "),a("a",{attrs:{href:"#console_console_time_label"}},[a("code",[t._v("console.time()")])]),t._v(", prints\nthe elapsed time and other "),a("code",[t._v("data")]),t._v(" arguments to "),a("code",[t._v("stdout")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'process'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("expensiveProcess1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Returns 42")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'process'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Prints "process: 365.227ms 42".')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doExpensiveProcess2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeEnd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'process'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"console-trace-message-args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-trace-message-args"}},[t._v("#")]),t._v(" console.trace([message][, ...args])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("message")]),t._v(" {any}")]),t._v(" "),a("li",[a("code",[t._v("...args")]),t._v(" {any}")])]),t._v(" "),a("p",[t._v("Prints to "),a("code",[t._v("stderr")]),t._v(" the string "),a("code",[t._v("'Trace: '")]),t._v(", followed by the "),a("router-link",{attrs:{to:"/node/util.html#util_util_format_format_args"}},[a("code",[t._v("util.format()")])]),t._v("\nformatted message and stack trace to the current position in the code.")],1),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Show me'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints: (stack trace will vary based on where trace is called)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  Trace: Show me")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    at repl:2:9")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    at REPLServer.defaultEval (repl.js:248:27)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    at bound (domain.js:287:14)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    at REPLServer.runBound [as eval] (domain.js:300:12)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    at REPLServer.<anonymous> (repl.js:412:12)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    at emitOne (events.js:82:20)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    at REPLServer.emit (events.js:169:7)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    at REPLServer.Interface._onLine (readline.js:210:10)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    at REPLServer.Interface._line (readline.js:549:8)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    at REPLServer.Interface._ttyWrite (readline.js:826:14)")]),t._v("\n")])])]),a("h3",{attrs:{id:"console-warn-data-args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-warn-data-args"}},[t._v("#")]),t._v(" console.warn([data][, ...args])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("data")]),t._v(" {any}")]),t._v(" "),a("li",[a("code",[t._v("...args")]),t._v(" {any}")])]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("console.warn()")]),t._v(" function is an alias for "),a("a",{attrs:{href:"#console_console_error_data_args"}},[a("code",[t._v("console.error()")])]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"inspector-only-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inspector-only-methods"}},[t._v("#")]),t._v(" Inspector only methods")]),t._v(" "),a("p",[t._v("The following methods are exposed by the V8 engine in the general API but do\nnot display anything unless used in conjunction with the "),a("router-link",{attrs:{to:"/node/debugger.html"}},[t._v("inspector")]),t._v("\n("),a("code",[t._v("--inspect")]),t._v(" flag).")],1),t._v(" "),a("h3",{attrs:{id:"console-marktimeline-label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-marktimeline-label"}},[t._v("#")]),t._v(" console.markTimeline([label])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("label")]),t._v(" {string} "),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("'default'")])])]),t._v(" "),a("p",[t._v("This method does not display anything unless used in the inspector. The\n"),a("code",[t._v("console.markTimeline()")]),t._v(" method is the deprecated form of\n"),a("a",{attrs:{href:"#console_console_timestamp_label"}},[a("code",[t._v("console.timeStamp()")])]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"console-profile-label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-profile-label"}},[t._v("#")]),t._v(" console.profile([label])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("label")]),t._v(" {string}")])]),t._v(" "),a("p",[t._v("This method does not display anything unless used in the inspector. The\n"),a("code",[t._v("console.profile()")]),t._v(" method starts a JavaScript CPU profile with an optional\nlabel until "),a("a",{attrs:{href:"#console_console_profileend_label"}},[a("code",[t._v("console.profileEnd()")])]),t._v(" is called. The profile is then added to\nthe "),a("strong",[t._v("Profile")]),t._v(" panel of the inspector.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("profile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MyLabel'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Some code")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("profileEnd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MyLabel'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Adds the profile 'MyLabel' to the Profiles panel of the inspector.")]),t._v("\n")])])]),a("h3",{attrs:{id:"console-profileend-label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-profileend-label"}},[t._v("#")]),t._v(" console.profileEnd([label])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("label")]),t._v(" {string}")])]),t._v(" "),a("p",[t._v("This method does not display anything unless used in the inspector. Stops the\ncurrent JavaScript CPU profiling session if one has been started and prints\nthe report to the "),a("strong",[t._v("Profiles")]),t._v(" panel of the inspector. See\n"),a("a",{attrs:{href:"#console_console_profile_label"}},[a("code",[t._v("console.profile()")])]),t._v(" for an example.")]),t._v(" "),a("p",[t._v("If this method is called without a label, the most recently started profile is\nstopped.")]),t._v(" "),a("h3",{attrs:{id:"console-timestamp-label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-timestamp-label"}},[t._v("#")]),t._v(" console.timeStamp([label])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("label")]),t._v(" {string}")])]),t._v(" "),a("p",[t._v("This method does not display anything unless used in the inspector. The\n"),a("code",[t._v("console.timeStamp()")]),t._v(" method adds an event with the label "),a("code",[t._v("'label'")]),t._v(" to the\n"),a("strong",[t._v("Timeline")]),t._v(" panel of the inspector.")]),t._v(" "),a("h3",{attrs:{id:"console-timeline-label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-timeline-label"}},[t._v("#")]),t._v(" console.timeline([label])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("label")]),t._v(" {string} "),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("'default'")])])]),t._v(" "),a("p",[t._v("This method does not display anything unless used in the inspector. The\n"),a("code",[t._v("console.timeline()")]),t._v(" method is the deprecated form of "),a("a",{attrs:{href:"#console_console_time_label"}},[a("code",[t._v("console.time()")])]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"console-timelineend-label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-timelineend-label"}},[t._v("#")]),t._v(" console.timelineEnd([label])")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("label")]),t._v(" {string} "),a("strong",[t._v("Default:")]),t._v(" "),a("code",[t._v("'default'")])])]),t._v(" "),a("p",[t._v("This method does not display anything unless used in the inspector. The\n"),a("code",[t._v("console.timelineEnd()")]),t._v(" method is the deprecated form of\n"),a("a",{attrs:{href:"#console_console_timeend_label"}},[a("code",[t._v("console.timeEnd()")])]),t._v(".")])])}),[],!1,null,null,null);s.default=e.exports}}]);