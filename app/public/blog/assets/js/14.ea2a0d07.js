(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{221:function(t,s,e){"use strict";e.r(s);var n=e(3),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"child-process"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#child-process"}},[t._v("#")]),t._v(" Child Process")]),t._v(" "),e("blockquote",[e("p",[t._v("Stability: 2 - Stable")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("child_process")]),t._v(" module provides the ability to spawn child processes in\na manner that is similar, but not identical, to popen(3). This capability\nis primarily provided by the "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(" function:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ls "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-lh'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/usr'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("stdout: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("stderr: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'close'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("code")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("child process exited with code ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("By default, pipes for "),e("code",[t._v("stdin")]),t._v(", "),e("code",[t._v("stdout")]),t._v(", and "),e("code",[t._v("stderr")]),t._v(" are established between\nthe parent Node.js process and the spawned child. These pipes have\nlimited (and platform-specific) capacity. If the child process writes to\nstdout in excess of that limit without the output being captured, the child\nprocess will block waiting for the pipe buffer to accept more data. This is\nidentical to the behavior of pipes in the shell. Use the "),e("code",[t._v("{ stdio: 'ignore' }")]),t._v("\noption if the output will not be consumed.")]),t._v(" "),e("p",[t._v("The "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(" method spawns the child process asynchronously,\nwithout blocking the Node.js event loop. The "),e("a",{attrs:{href:"#child_process_child_process_spawnsync_command_args_options"}},[e("code",[t._v("child_process.spawnSync()")])]),t._v("\nfunction provides equivalent functionality in a synchronous manner that blocks\nthe event loop until the spawned process either exits or is terminated.")]),t._v(" "),e("p",[t._v("For convenience, the "),e("code",[t._v("child_process")]),t._v(" module provides a handful of synchronous\nand asynchronous alternatives to "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(" and\n"),e("a",{attrs:{href:"#child_process_child_process_spawnsync_command_args_options"}},[e("code",[t._v("child_process.spawnSync()")])]),t._v(". Each of these alternatives are implemented on\ntop of "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(" or "),e("a",{attrs:{href:"#child_process_child_process_spawnsync_command_args_options"}},[e("code",[t._v("child_process.spawnSync()")])]),t._v(".")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(": spawns a shell and runs a command within that\nshell, passing the "),e("code",[t._v("stdout")]),t._v(" and "),e("code",[t._v("stderr")]),t._v(" to a callback function when\ncomplete.")]),t._v(" "),e("li",[e("a",{attrs:{href:"#child_process_child_process_execfile_file_args_options_callback"}},[e("code",[t._v("child_process.execFile()")])]),t._v(": similar to "),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(" except\nthat it spawns the command directly without first spawning a shell by\ndefault.")]),t._v(" "),e("li",[e("a",{attrs:{href:"#child_process_child_process_fork_modulepath_args_options"}},[e("code",[t._v("child_process.fork()")])]),t._v(": spawns a new Node.js process and invokes a\nspecified module with an IPC communication channel established that allows\nsending messages between parent and child.")]),t._v(" "),e("li",[e("a",{attrs:{href:"#child_process_child_process_execsync_command_options"}},[e("code",[t._v("child_process.execSync()")])]),t._v(": a synchronous version of\n"),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(" that will block the Node.js event loop.")]),t._v(" "),e("li",[e("a",{attrs:{href:"#child_process_child_process_execfilesync_file_args_options"}},[e("code",[t._v("child_process.execFileSync()")])]),t._v(": a synchronous version of\n"),e("a",{attrs:{href:"#child_process_child_process_execfile_file_args_options_callback"}},[e("code",[t._v("child_process.execFile()")])]),t._v(" that will block the Node.js event loop.")])]),t._v(" "),e("p",[t._v("For certain use cases, such as automating shell scripts, the\n"),e("a",{attrs:{href:"#child_process_synchronous_process_creation"}},[t._v("synchronous counterparts")]),t._v(" may be more convenient. In many cases, however,\nthe synchronous methods can have significant impact on performance due to\nstalling the event loop while spawned processes complete.")]),t._v(" "),e("h2",{attrs:{id:"asynchronous-process-creation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#asynchronous-process-creation"}},[t._v("#")]),t._v(" Asynchronous Process Creation")]),t._v(" "),e("p",[t._v("The "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(", "),e("a",{attrs:{href:"#child_process_child_process_fork_modulepath_args_options"}},[e("code",[t._v("child_process.fork()")])]),t._v(", "),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(",\nand "),e("a",{attrs:{href:"#child_process_child_process_execfile_file_args_options_callback"}},[e("code",[t._v("child_process.execFile()")])]),t._v(" methods all follow the idiomatic asynchronous\nprogramming pattern typical of other Node.js APIs.")]),t._v(" "),e("p",[t._v("Each of the methods returns a "),e("a",{attrs:{href:"#child_process_child_process"}},[e("code",[t._v("ChildProcess")])]),t._v(" instance. These objects\nimplement the Node.js "),e("router-link",{attrs:{to:"/node/events.html#events_class_eventemitter"}},[e("code",[t._v("EventEmitter")])]),t._v(" API, allowing the parent process to\nregister listener functions that are called when certain events occur during\nthe life cycle of the child process.")],1),t._v(" "),e("p",[t._v("The "),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(" and "),e("a",{attrs:{href:"#child_process_child_process_execfile_file_args_options_callback"}},[e("code",[t._v("child_process.execFile()")])]),t._v(" methods\nadditionally allow for an optional "),e("code",[t._v("callback")]),t._v(" function to be specified that is\ninvoked when the child process terminates.")]),t._v(" "),e("h3",{attrs:{id:"spawning-bat-and-cmd-files-on-windows"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spawning-bat-and-cmd-files-on-windows"}},[t._v("#")]),t._v(" Spawning "),e("code",[t._v(".bat")]),t._v(" and "),e("code",[t._v(".cmd")]),t._v(" files on Windows")]),t._v(" "),e("p",[t._v("The importance of the distinction between "),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(" and\n"),e("a",{attrs:{href:"#child_process_child_process_execfile_file_args_options_callback"}},[e("code",[t._v("child_process.execFile()")])]),t._v(" can vary based on platform. On Unix-type\noperating systems (Unix, Linux, macOS) "),e("a",{attrs:{href:"#child_process_child_process_execfile_file_args_options_callback"}},[e("code",[t._v("child_process.execFile()")])]),t._v(" can be\nmore efficient because it does not spawn a shell by default. On Windows,\nhowever, "),e("code",[t._v(".bat")]),t._v(" and "),e("code",[t._v(".cmd")]),t._v(" files are not executable on their own without a\nterminal, and therefore cannot be launched using "),e("a",{attrs:{href:"#child_process_child_process_execfile_file_args_options_callback"}},[e("code",[t._v("child_process.execFile()")])]),t._v(".\nWhen running on Windows, "),e("code",[t._v(".bat")]),t._v(" and "),e("code",[t._v(".cmd")]),t._v(" files can be invoked using\n"),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(" with the "),e("code",[t._v("shell")]),t._v(" option set, with\n"),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(", or by spawning "),e("code",[t._v("cmd.exe")]),t._v(" and passing the "),e("code",[t._v(".bat")]),t._v(" or\n"),e("code",[t._v(".cmd")]),t._v(" file as an argument (which is what the "),e("code",[t._v("shell")]),t._v(" option and\n"),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(" do). In any case, if the script filename contains\nspaces it needs to be quoted.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// On Windows Only...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bat "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cmd.exe'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/c'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my.bat'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nbat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nbat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nbat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'exit'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("code")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Child exited with code ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OR...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" exec"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my.bat'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stderr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Script with spaces in the filename:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bat "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"my script.cmd\"'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" shell"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"my script.cmd\" a b'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stderr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"child-process-exec-command-options-callback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#child-process-exec-command-options-callback"}},[t._v("#")]),t._v(" child_process.exec(command[, options][, callback])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("command")]),t._v(" {string} The command to run, with space-separated arguments.")]),t._v(" "),e("li",[e("code",[t._v("options")]),t._v(" {Object}\n"),e("ul",[e("li",[e("code",[t._v("cwd")]),t._v(" {string} Current working directory of the child process.\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("null")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("env")]),t._v(" {Object} Environment key-value pairs. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("process.env")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("encoding")]),t._v(" {string} "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'utf8'")])]),t._v(" "),e("li",[e("code",[t._v("shell")]),t._v(" {string} Shell to execute the command with. See\n"),e("a",{attrs:{href:"#child_process_shell_requirements"}},[t._v("Shell Requirements")]),t._v(" and "),e("a",{attrs:{href:"#child_process_default_windows_shell"}},[t._v("Default Windows Shell")]),t._v(". "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'/bin/sh'")]),t._v(" on Unix, "),e("code",[t._v("process.env.ComSpec")]),t._v(" on Windows.")]),t._v(" "),e("li",[e("code",[t._v("timeout")]),t._v(" {number} "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("0")])]),t._v(" "),e("li",[e("code",[t._v("maxBuffer")]),t._v(" {number} Largest amount of data in bytes allowed on stdout or\nstderr. If exceeded, the child process is terminated and any output is\ntruncated. See caveat at "),e("a",{attrs:{href:"#child_process_maxbuffer_and_unicode"}},[e("code",[t._v("maxBuffer")]),t._v(" and Unicode")]),t._v(".\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("1024 * 1024")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("killSignal")]),t._v(" {string|integer} "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'SIGTERM'")])]),t._v(" "),e("li",[e("code",[t._v("uid")]),t._v(" {number} Sets the user identity of the process (see setuid(2)).")]),t._v(" "),e("li",[e("code",[t._v("gid")]),t._v(" {number} Sets the group identity of the process (see setgid(2)).")]),t._v(" "),e("li",[e("code",[t._v("windowsHide")]),t._v(" {boolean} Hide the subprocess console window that would\nnormally be created on Windows systems. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")])])]),t._v(" "),e("li",[e("code",[t._v("callback")]),t._v(" {Function} called with the output when process terminates.\n"),e("ul",[e("li",[e("code",[t._v("error")]),t._v(" {Error}")]),t._v(" "),e("li",[e("code",[t._v("stdout")]),t._v(" {string|Buffer}")]),t._v(" "),e("li",[e("code",[t._v("stderr")]),t._v(" {string|Buffer}")])])]),t._v(" "),e("li",[t._v("Returns: {ChildProcess}")])]),t._v(" "),e("p",[t._v("Spawns a shell then executes the "),e("code",[t._v("command")]),t._v(" within that shell, buffering any\ngenerated output. The "),e("code",[t._v("command")]),t._v(" string passed to the exec function is processed\ndirectly by the shell and special characters (vary based on\n"),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/List_of_command-line_interpreters",target:"_blank",rel:"noopener noreferrer"}},[t._v("shell"),e("OutboundLink")],1),t._v(")\nneed to be dealt with accordingly:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"/path/to/test file/test.sh\" arg1 arg2'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Double quotes are used so that the space in the path is not interpreted as")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a delimiter of multiple arguments.")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'echo \"The \\\\$HOME variable is $HOME\"'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The $HOME variable is escaped in the first instance, but not in the second.")]),t._v("\n")])])]),e("p",[e("strong",[t._v("Never pass unsanitized user input to this function. Any input containing shell\nmetacharacters may be used to trigger arbitrary command execution.")])]),t._v(" "),e("p",[t._v("If a "),e("code",[t._v("callback")]),t._v(" function is provided, it is called with the arguments\n"),e("code",[t._v("(error, stdout, stderr)")]),t._v(". On success, "),e("code",[t._v("error")]),t._v(" will be "),e("code",[t._v("null")]),t._v(". On error,\n"),e("code",[t._v("error")]),t._v(" will be an instance of "),e("router-link",{attrs:{to:"/node/errors.html#errors_class_error"}},[e("code",[t._v("Error")])]),t._v(". The "),e("code",[t._v("error.code")]),t._v(" property will be\nthe exit code of the child process while "),e("code",[t._v("error.signal")]),t._v(" will be set to the\nsignal that terminated the process. Any exit code other than "),e("code",[t._v("0")]),t._v(" is considered\nto be an error.")],1),t._v(" "),e("p",[t._v("The "),e("code",[t._v("stdout")]),t._v(" and "),e("code",[t._v("stderr")]),t._v(" arguments passed to the callback will contain the\nstdout and stderr output of the child process. By default, Node.js will decode\nthe output as UTF-8 and pass strings to the callback. The "),e("code",[t._v("encoding")]),t._v(" option\ncan be used to specify the character encoding used to decode the stdout and\nstderr output. If "),e("code",[t._v("encoding")]),t._v(" is "),e("code",[t._v("'buffer'")]),t._v(", or an unrecognized character\nencoding, "),e("code",[t._v("Buffer")]),t._v(" objects will be passed to the callback instead.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" exec "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cat *.js missing_file | wc -l'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stderr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("exec error: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("error"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("stdout: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("stderr: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("stderr"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("If "),e("code",[t._v("timeout")]),t._v(" is greater than "),e("code",[t._v("0")]),t._v(", the parent will send the signal\nidentified by the "),e("code",[t._v("killSignal")]),t._v(" property (the default is "),e("code",[t._v("'SIGTERM'")]),t._v(") if the\nchild runs longer than "),e("code",[t._v("timeout")]),t._v(" milliseconds.")]),t._v(" "),e("p",[t._v("Unlike the exec(3) POSIX system call, "),e("code",[t._v("child_process.exec()")]),t._v(" does not replace\nthe existing process and uses a shell to execute the command.")]),t._v(" "),e("p",[t._v("If this method is invoked as its "),e("router-link",{attrs:{to:"/node/util.html#util_util_promisify_original"}},[e("code",[t._v("util.promisify()")])]),t._v("ed version, it returns\na "),e("code",[t._v("Promise")]),t._v(" for an "),e("code",[t._v("Object")]),t._v(" with "),e("code",[t._v("stdout")]),t._v(" and "),e("code",[t._v("stderr")]),t._v(" properties. The returned\n"),e("code",[t._v("ChildProcess")]),t._v(" instance is attached to the "),e("code",[t._v("Promise")]),t._v(" as a "),e("code",[t._v("child")]),t._v(" property. In\ncase of an error (including any error resulting in an exit code other than 0), a\nrejected promise is returned, with the same "),e("code",[t._v("error")]),t._v(" object given in the\ncallback, but with two additional properties "),e("code",[t._v("stdout")]),t._v(" and "),e("code",[t._v("stderr")]),t._v(".")],1),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" util "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'util'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" exec "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" util"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("promisify")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exec"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("lsExample")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stderr "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stdout:'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stderr:'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("lsExample")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"child-process-execfile-file-args-options-callback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#child-process-execfile-file-args-options-callback"}},[t._v("#")]),t._v(" child_process.execFile(file[, args][, options][, callback])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("file")]),t._v(" {string} The name or path of the executable file to run.")]),t._v(" "),e("li",[e("code",[t._v("args")]),t._v(" {string[]} List of string arguments.")]),t._v(" "),e("li",[e("code",[t._v("options")]),t._v(" {Object}\n"),e("ul",[e("li",[e("code",[t._v("cwd")]),t._v(" {string} Current working directory of the child process.")]),t._v(" "),e("li",[e("code",[t._v("env")]),t._v(" {Object} Environment key-value pairs. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("process.env")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("encoding")]),t._v(" {string} "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'utf8'")])]),t._v(" "),e("li",[e("code",[t._v("timeout")]),t._v(" {number} "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("0")])]),t._v(" "),e("li",[e("code",[t._v("maxBuffer")]),t._v(" {number} Largest amount of data in bytes allowed on stdout or\nstderr. If exceeded, the child process is terminated and any output is\ntruncated. See caveat at "),e("a",{attrs:{href:"#child_process_maxbuffer_and_unicode"}},[e("code",[t._v("maxBuffer")]),t._v(" and Unicode")]),t._v(".\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("1024 * 1024")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("killSignal")]),t._v(" {string|integer} "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'SIGTERM'")])]),t._v(" "),e("li",[e("code",[t._v("uid")]),t._v(" {number} Sets the user identity of the process (see setuid(2)).")]),t._v(" "),e("li",[e("code",[t._v("gid")]),t._v(" {number} Sets the group identity of the process (see setgid(2)).")]),t._v(" "),e("li",[e("code",[t._v("windowsHide")]),t._v(" {boolean} Hide the subprocess console window that would\nnormally be created on Windows systems. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("windowsVerbatimArguments")]),t._v(" {boolean} No quoting or escaping of arguments is\ndone on Windows. Ignored on Unix. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("shell")]),t._v(" {boolean|string} If "),e("code",[t._v("true")]),t._v(", runs "),e("code",[t._v("command")]),t._v(" inside of a shell. Uses\n"),e("code",[t._v("'/bin/sh'")]),t._v(" on Unix, and "),e("code",[t._v("process.env.ComSpec")]),t._v(" on Windows. A different\nshell can be specified as a string. See "),e("a",{attrs:{href:"#child_process_shell_requirements"}},[t._v("Shell Requirements")]),t._v(" and\n"),e("a",{attrs:{href:"#child_process_default_windows_shell"}},[t._v("Default Windows Shell")]),t._v(". "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(" (no shell).")])])]),t._v(" "),e("li",[e("code",[t._v("callback")]),t._v(" {Function} Called with the output when process terminates.\n"),e("ul",[e("li",[e("code",[t._v("error")]),t._v(" {Error}")]),t._v(" "),e("li",[e("code",[t._v("stdout")]),t._v(" {string|Buffer}")]),t._v(" "),e("li",[e("code",[t._v("stderr")]),t._v(" {string|Buffer}")])])]),t._v(" "),e("li",[t._v("Returns: {ChildProcess}")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("child_process.execFile()")]),t._v(" function is similar to "),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v("\nexcept that it does not spawn a shell by default. Rather, the specified\nexecutable "),e("code",[t._v("file")]),t._v(" is spawned directly as a new process making it slightly more\nefficient than "),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(".")]),t._v(" "),e("p",[t._v("The same options as "),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(" are supported. Since a shell is\nnot spawned, behaviors such as I/O redirection and file globbing are not\nsupported.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" execFile "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" child "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("execFile")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'node'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--version'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stderr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The "),e("code",[t._v("stdout")]),t._v(" and "),e("code",[t._v("stderr")]),t._v(" arguments passed to the callback will contain the\nstdout and stderr output of the child process. By default, Node.js will decode\nthe output as UTF-8 and pass strings to the callback. The "),e("code",[t._v("encoding")]),t._v(" option\ncan be used to specify the character encoding used to decode the stdout and\nstderr output. If "),e("code",[t._v("encoding")]),t._v(" is "),e("code",[t._v("'buffer'")]),t._v(", or an unrecognized character\nencoding, "),e("code",[t._v("Buffer")]),t._v(" objects will be passed to the callback instead.")]),t._v(" "),e("p",[t._v("If this method is invoked as its "),e("router-link",{attrs:{to:"/node/util.html#util_util_promisify_original"}},[e("code",[t._v("util.promisify()")])]),t._v("ed version, it returns\na "),e("code",[t._v("Promise")]),t._v(" for an "),e("code",[t._v("Object")]),t._v(" with "),e("code",[t._v("stdout")]),t._v(" and "),e("code",[t._v("stderr")]),t._v(" properties. The returned\n"),e("code",[t._v("ChildProcess")]),t._v(" instance is attached to the "),e("code",[t._v("Promise")]),t._v(" as a "),e("code",[t._v("child")]),t._v(" property. In\ncase of an error (including any error resulting in an exit code other than 0), a\nrejected promise is returned, with the same "),e("code",[t._v("error")]),t._v(" object given in the\ncallback, but with two additional properties "),e("code",[t._v("stdout")]),t._v(" and "),e("code",[t._v("stderr")]),t._v(".")],1),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" util "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'util'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" execFile "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" util"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("promisify")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execFile"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" stdout "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("execFile")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'node'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--version'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[e("strong",[t._v("If the "),e("code",[t._v("shell")]),t._v(" option is enabled, do not pass unsanitized user input to this\nfunction. Any input containing shell metacharacters may be used to trigger\narbitrary command execution.")])]),t._v(" "),e("h3",{attrs:{id:"child-process-fork-modulepath-args-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#child-process-fork-modulepath-args-options"}},[t._v("#")]),t._v(" child_process.fork(modulePath[, args][, options])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("modulePath")]),t._v(" {string} The module to run in the child.")]),t._v(" "),e("li",[e("code",[t._v("args")]),t._v(" {string[]} List of string arguments.")]),t._v(" "),e("li",[e("code",[t._v("options")]),t._v(" {Object}\n"),e("ul",[e("li",[e("code",[t._v("cwd")]),t._v(" {string} Current working directory of the child process.")]),t._v(" "),e("li",[e("code",[t._v("detached")]),t._v(" {boolean} Prepare child to run independently of its parent\nprocess. Specific behavior depends on the platform, see\n"),e("a",{attrs:{href:"#child_process_options_detached"}},[e("code",[t._v("options.detached")])]),t._v(").")]),t._v(" "),e("li",[e("code",[t._v("env")]),t._v(" {Object} Environment key-value pairs.  "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("process.env")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("execPath")]),t._v(" {string} Executable used to create the child process.")]),t._v(" "),e("li",[e("code",[t._v("execArgv")]),t._v(" {string[]} List of string arguments passed to the executable.\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("process.execArgv")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("serialization")]),t._v(" {string} Specify the kind of serialization used for sending\nmessages between processes. Possible values are "),e("code",[t._v("'json'")]),t._v(" and "),e("code",[t._v("'advanced'")]),t._v(".\nSee "),e("a",{attrs:{href:"#child_process_advanced_serialization"}},[t._v("Advanced Serialization")]),t._v(" for more details. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'json'")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("silent")]),t._v(" {boolean} If "),e("code",[t._v("true")]),t._v(", stdin, stdout, and stderr of the child will be\npiped to the parent, otherwise they will be inherited from the parent, see\nthe "),e("code",[t._v("'pipe'")]),t._v(" and "),e("code",[t._v("'inherit'")]),t._v(" options for "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v("'s\n"),e("a",{attrs:{href:"#child_process_options_stdio"}},[e("code",[t._v("stdio")])]),t._v(" for more details. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("stdio")]),t._v(" {Array|string} See "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v("'s "),e("a",{attrs:{href:"#child_process_options_stdio"}},[e("code",[t._v("stdio")])]),t._v(".\nWhen this option is provided, it overrides "),e("code",[t._v("silent")]),t._v(". If the array variant\nis used, it must contain exactly one item with value "),e("code",[t._v("'ipc'")]),t._v(" or an error\nwill be thrown. For instance "),e("code",[t._v("[0, 1, 2, 'ipc']")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("windowsVerbatimArguments")]),t._v(" {boolean} No quoting or escaping of arguments is\ndone on Windows. Ignored on Unix. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("uid")]),t._v(" {number} Sets the user identity of the process (see setuid(2)).")]),t._v(" "),e("li",[e("code",[t._v("gid")]),t._v(" {number} Sets the group identity of the process (see setgid(2)).")])])]),t._v(" "),e("li",[t._v("Returns: {ChildProcess}")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("child_process.fork()")]),t._v(" method is a special case of\n"),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(" used specifically to spawn new Node.js processes.\nLike "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(", a "),e("a",{attrs:{href:"#child_process_child_process"}},[e("code",[t._v("ChildProcess")])]),t._v(" object is returned. The\nreturned "),e("a",{attrs:{href:"#child_process_child_process"}},[e("code",[t._v("ChildProcess")])]),t._v(" will have an additional communication channel\nbuilt-in that allows messages to be passed back and forth between the parent and\nchild. See "),e("a",{attrs:{href:"#child_process_subprocess_send_message_sendhandle_options_callback"}},[e("code",[t._v("subprocess.send()")])]),t._v(" for details.")]),t._v(" "),e("p",[t._v("Keep in mind that spawned Node.js child processes are\nindependent of the parent with exception of the IPC communication channel\nthat is established between the two. Each process has its own memory, with\ntheir own V8 instances. Because of the additional resource allocations\nrequired, spawning a large number of child Node.js processes is not\nrecommended.")]),t._v(" "),e("p",[t._v("By default, "),e("code",[t._v("child_process.fork()")]),t._v(" will spawn new Node.js instances using the\n"),e("router-link",{attrs:{to:"/node/process.html#process_process_execpath"}},[e("code",[t._v("process.execPath")])]),t._v(" of the parent process. The "),e("code",[t._v("execPath")]),t._v(" property in the\n"),e("code",[t._v("options")]),t._v(" object allows for an alternative execution path to be used.")],1),t._v(" "),e("p",[t._v("Node.js processes launched with a custom "),e("code",[t._v("execPath")]),t._v(" will communicate with the\nparent process using the file descriptor (fd) identified using the\nenvironment variable "),e("code",[t._v("NODE_CHANNEL_FD")]),t._v(" on the child process.")]),t._v(" "),e("p",[t._v("Unlike the fork(2) POSIX system call, "),e("code",[t._v("child_process.fork()")]),t._v(" does not clone the\ncurrent process.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("shell")]),t._v(" option available in "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(" is not supported by\n"),e("code",[t._v("child_process.fork()")]),t._v(" and will be ignored if set.")]),t._v(" "),e("h3",{attrs:{id:"child-process-spawn-command-args-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#child-process-spawn-command-args-options"}},[t._v("#")]),t._v(" child_process.spawn(command[, args][, options])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("command")]),t._v(" {string} The command to run.")]),t._v(" "),e("li",[e("code",[t._v("args")]),t._v(" {string[]} List of string arguments.")]),t._v(" "),e("li",[e("code",[t._v("options")]),t._v(" {Object}\n"),e("ul",[e("li",[e("code",[t._v("cwd")]),t._v(" {string} Current working directory of the child process.")]),t._v(" "),e("li",[e("code",[t._v("env")]),t._v(" {Object} Environment key-value pairs. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("process.env")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("argv0")]),t._v(" {string} Explicitly set the value of "),e("code",[t._v("argv[0]")]),t._v(" sent to the child\nprocess. This will be set to "),e("code",[t._v("command")]),t._v(" if not specified.")]),t._v(" "),e("li",[e("code",[t._v("stdio")]),t._v(" {Array|string} Child's stdio configuration (see\n"),e("a",{attrs:{href:"#child_process_options_stdio"}},[e("code",[t._v("options.stdio")])]),t._v(").")]),t._v(" "),e("li",[e("code",[t._v("detached")]),t._v(" {boolean} Prepare child to run independently of its parent\nprocess. Specific behavior depends on the platform, see\n"),e("a",{attrs:{href:"#child_process_options_detached"}},[e("code",[t._v("options.detached")])]),t._v(").")]),t._v(" "),e("li",[e("code",[t._v("uid")]),t._v(" {number} Sets the user identity of the process (see setuid(2)).")]),t._v(" "),e("li",[e("code",[t._v("gid")]),t._v(" {number} Sets the group identity of the process (see setgid(2)).")]),t._v(" "),e("li",[e("code",[t._v("serialization")]),t._v(" {string} Specify the kind of serialization used for sending\nmessages between processes. Possible values are "),e("code",[t._v("'json'")]),t._v(" and "),e("code",[t._v("'advanced'")]),t._v(".\nSee "),e("a",{attrs:{href:"#child_process_advanced_serialization"}},[t._v("Advanced Serialization")]),t._v(" for more details. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'json'")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("shell")]),t._v(" {boolean|string} If "),e("code",[t._v("true")]),t._v(", runs "),e("code",[t._v("command")]),t._v(" inside of a shell. Uses\n"),e("code",[t._v("'/bin/sh'")]),t._v(" on Unix, and "),e("code",[t._v("process.env.ComSpec")]),t._v(" on Windows. A different\nshell can be specified as a string. See "),e("a",{attrs:{href:"#child_process_shell_requirements"}},[t._v("Shell Requirements")]),t._v(" and\n"),e("a",{attrs:{href:"#child_process_default_windows_shell"}},[t._v("Default Windows Shell")]),t._v(". "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(" (no shell).")]),t._v(" "),e("li",[e("code",[t._v("windowsVerbatimArguments")]),t._v(" {boolean} No quoting or escaping of arguments is\ndone on Windows. Ignored on Unix. This is set to "),e("code",[t._v("true")]),t._v(" automatically\nwhen "),e("code",[t._v("shell")]),t._v(" is specified and is CMD. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("windowsHide")]),t._v(" {boolean} Hide the subprocess console window that would\nnormally be created on Windows systems. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")])])]),t._v(" "),e("li",[t._v("Returns: {ChildProcess}")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("child_process.spawn()")]),t._v(" method spawns a new process using the given\n"),e("code",[t._v("command")]),t._v(", with command line arguments in "),e("code",[t._v("args")]),t._v(". If omitted, "),e("code",[t._v("args")]),t._v(" defaults\nto an empty array.")]),t._v(" "),e("p",[e("strong",[t._v("If the "),e("code",[t._v("shell")]),t._v(" option is enabled, do not pass unsanitized user input to this\nfunction. Any input containing shell metacharacters may be used to trigger\narbitrary command execution.")])]),t._v(" "),e("p",[t._v("A third argument may be used to specify additional options, with these defaults:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" defaults "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  cwd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  env"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Use "),e("code",[t._v("cwd")]),t._v(" to specify the working directory from which the process is spawned.\nIf not given, the default is to inherit the current working directory.")]),t._v(" "),e("p",[t._v("Use "),e("code",[t._v("env")]),t._v(" to specify environment variables that will be visible to the new\nprocess, the default is "),e("router-link",{attrs:{to:"/node/process.html#process_process_env"}},[e("code",[t._v("process.env")])]),t._v(".")],1),t._v(" "),e("p",[e("code",[t._v("undefined")]),t._v(" values in "),e("code",[t._v("env")]),t._v(" will be ignored.")]),t._v(" "),e("p",[t._v("Example of running "),e("code",[t._v("ls -lh /usr")]),t._v(", capturing "),e("code",[t._v("stdout")]),t._v(", "),e("code",[t._v("stderr")]),t._v(", and the\nexit code:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ls "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-lh'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/usr'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("stdout: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("stderr: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'close'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("code")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("child process exited with code ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Example: A very elaborate way to run "),e("code",[t._v("ps ax | grep ssh")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ps'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ax'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" grep "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'grep'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ssh'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  grep"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("ps stderr: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'close'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("code")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("ps process exited with code ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  grep"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ngrep"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ngrep"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("grep stderr: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ngrep"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'close'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("code")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("grep process exited with code ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Example of checking for failed "),e("code",[t._v("spawn")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subprocess "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bad_command'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nsubprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Failed to start subprocess.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Certain platforms (macOS, Linux) will use the value of "),e("code",[t._v("argv[0]")]),t._v(" for the process\ntitle while others (Windows, SunOS) will use "),e("code",[t._v("command")]),t._v(".")]),t._v(" "),e("p",[t._v("Node.js currently overwrites "),e("code",[t._v("argv[0]")]),t._v(" with "),e("code",[t._v("process.execPath")]),t._v(" on startup, so\n"),e("code",[t._v("process.argv[0]")]),t._v(" in a Node.js child process will not match the "),e("code",[t._v("argv0")]),t._v("\nparameter passed to "),e("code",[t._v("spawn")]),t._v(" from the parent, retrieve it with the\n"),e("code",[t._v("process.argv0")]),t._v(" property instead.")]),t._v(" "),e("h4",{attrs:{id:"options-detached"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#options-detached"}},[t._v("#")]),t._v(" options.detached")]),t._v(" "),e("p",[t._v("On Windows, setting "),e("code",[t._v("options.detached")]),t._v(" to "),e("code",[t._v("true")]),t._v(" makes it possible for the\nchild process to continue running after the parent exits. The child will have\nits own console window. Once enabled for a child process, it cannot be\ndisabled.")]),t._v(" "),e("p",[t._v("On non-Windows platforms, if "),e("code",[t._v("options.detached")]),t._v(" is set to "),e("code",[t._v("true")]),t._v(", the child\nprocess will be made the leader of a new process group and session. Child\nprocesses may continue running after the parent exits regardless of whether\nthey are detached or not. See setsid(2) for more information.")]),t._v(" "),e("p",[t._v("By default, the parent will wait for the detached child to exit. To prevent the\nparent from waiting for a given "),e("code",[t._v("subprocess")]),t._v(" to exit, use the\n"),e("code",[t._v("subprocess.unref()")]),t._v(" method. Doing so will cause the parent's event loop to not\ninclude the child in its reference count, allowing the parent to exit\nindependently of the child, unless there is an established IPC channel between\nthe child and the parent.")]),t._v(" "),e("p",[t._v("When using the "),e("code",[t._v("detached")]),t._v(" option to start a long-running process, the process\nwill not stay running in the background after the parent exits unless it is\nprovided with a "),e("code",[t._v("stdio")]),t._v(" configuration that is not connected to the parent.\nIf the parent's "),e("code",[t._v("stdio")]),t._v(" is inherited, the child will remain attached to the\ncontrolling terminal.")]),t._v(" "),e("p",[t._v("Example of a long-running process, by detaching and also ignoring its parent\n"),e("code",[t._v("stdio")]),t._v(" file descriptors, in order to ignore the parent's termination:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subprocess "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_program.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  detached"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ignore'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nsubprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unref")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Alternatively one can redirect the child process' output into files:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" out "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("openSync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./out.log'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" err "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("openSync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./out.log'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subprocess "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prg'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  detached"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ignore'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nsubprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unref")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h4",{attrs:{id:"options-stdio"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#options-stdio"}},[t._v("#")]),t._v(" options.stdio")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("options.stdio")]),t._v(" option is used to configure the pipes that are established\nbetween the parent and child process. By default, the child's stdin, stdout,\nand stderr are redirected to corresponding "),e("a",{attrs:{href:"#child_process_subprocess_stdin"}},[e("code",[t._v("subprocess.stdin")])]),t._v(",\n"),e("a",{attrs:{href:"#child_process_subprocess_stdout"}},[e("code",[t._v("subprocess.stdout")])]),t._v(", and "),e("a",{attrs:{href:"#child_process_subprocess_stderr"}},[e("code",[t._v("subprocess.stderr")])]),t._v(" streams on the\n"),e("a",{attrs:{href:"#child_process_child_process"}},[e("code",[t._v("ChildProcess")])]),t._v(" object. This is equivalent to setting the "),e("code",[t._v("options.stdio")]),t._v("\nequal to "),e("code",[t._v("['pipe', 'pipe', 'pipe']")]),t._v(".")]),t._v(" "),e("p",[t._v("For convenience, "),e("code",[t._v("options.stdio")]),t._v(" may be one of the following strings:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("'pipe'")]),t._v(": equivalent to "),e("code",[t._v("['pipe', 'pipe', 'pipe']")]),t._v(" (the default)")]),t._v(" "),e("li",[e("code",[t._v("'ignore'")]),t._v(": equivalent to "),e("code",[t._v("['ignore', 'ignore', 'ignore']")])]),t._v(" "),e("li",[e("code",[t._v("'inherit'")]),t._v(": equivalent to "),e("code",[t._v("['inherit', 'inherit', 'inherit']")]),t._v(" or "),e("code",[t._v("[0, 1, 2]")])])]),t._v(" "),e("p",[t._v("Otherwise, the value of "),e("code",[t._v("options.stdio")]),t._v(" is an array where each index corresponds\nto an fd in the child. The fds 0, 1, and 2 correspond to stdin, stdout,\nand stderr, respectively. Additional fds can be specified to create additional\npipes between the parent and child. The value is one of the following:")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("'pipe'")]),t._v(": Create a pipe between the child process and the parent process.\nThe parent end of the pipe is exposed to the parent as a property on the\n"),e("code",[t._v("child_process")]),t._v(" object as "),e("a",{attrs:{href:"#child_process_subprocess_stdio"}},[e("code",[t._v("subprocess.stdio[fd]")])]),t._v(". Pipes\ncreated for fds 0, 1, and 2 are also available as "),e("a",{attrs:{href:"#child_process_subprocess_stdin"}},[e("code",[t._v("subprocess.stdin")])]),t._v(",\n"),e("a",{attrs:{href:"#child_process_subprocess_stdout"}},[e("code",[t._v("subprocess.stdout")])]),t._v(" and "),e("a",{attrs:{href:"#child_process_subprocess_stderr"}},[e("code",[t._v("subprocess.stderr")])]),t._v(", respectively.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("'ipc'")]),t._v(": Create an IPC channel for passing messages/file descriptors\nbetween parent and child. A "),e("a",{attrs:{href:"#child_process_child_process"}},[e("code",[t._v("ChildProcess")])]),t._v(" may have at most one IPC\nstdio file descriptor. Setting this option enables the\n"),e("a",{attrs:{href:"#child_process_subprocess_send_message_sendhandle_options_callback"}},[e("code",[t._v("subprocess.send()")])]),t._v(" method. If the child is a Node.js process, the\npresence of an IPC channel will enable "),e("router-link",{attrs:{to:"/node/process.html#process_process_send_message_sendhandle_options_callback"}},[e("code",[t._v("process.send()")])]),t._v(" and\n"),e("router-link",{attrs:{to:"/node/process.html#process_process_disconnect"}},[e("code",[t._v("process.disconnect()")])]),t._v(" methods, as well as "),e("router-link",{attrs:{to:"/node/process.html#process_event_disconnect"}},[e("code",[t._v("'disconnect'")])]),t._v(" and\n"),e("router-link",{attrs:{to:"/node/process.html#process_event_message"}},[e("code",[t._v("'message'")])]),t._v(" events within the child.")],1),t._v(" "),e("p",[t._v("Accessing the IPC channel fd in any way other than "),e("router-link",{attrs:{to:"/node/process.html#process_process_send_message_sendhandle_options_callback"}},[e("code",[t._v("process.send()")])]),t._v("\nor using the IPC channel with a child process that is not a Node.js instance\nis not supported.")],1)]),t._v(" "),e("li",[e("p",[e("code",[t._v("'ignore'")]),t._v(": Instructs Node.js to ignore the fd in the child. While Node.js\nwill always open fds 0, 1, and 2 for the processes it spawns, setting the fd\nto "),e("code",[t._v("'ignore'")]),t._v(" will cause Node.js to open "),e("code",[t._v("/dev/null")]),t._v(" and attach it to the\nchild's fd.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("'inherit'")]),t._v(": Pass through the corresponding stdio stream to/from the\nparent process. In the first three positions, this is equivalent to\n"),e("code",[t._v("process.stdin")]),t._v(", "),e("code",[t._v("process.stdout")]),t._v(", and "),e("code",[t._v("process.stderr")]),t._v(", respectively. In\nany other position, equivalent to "),e("code",[t._v("'ignore'")]),t._v(".")])]),t._v(" "),e("li",[e("p",[t._v("{Stream} object: Share a readable or writable stream that refers to a tty,\nfile, socket, or a pipe with the child process. The stream's underlying\nfile descriptor is duplicated in the child process to the fd that\ncorresponds to the index in the "),e("code",[t._v("stdio")]),t._v(" array. The stream must have an\nunderlying descriptor (file streams do not until the "),e("code",[t._v("'open'")]),t._v(" event has\noccurred).")])]),t._v(" "),e("li",[e("p",[t._v("Positive integer: The integer value is interpreted as a file descriptor\nthat is currently open in the parent process. It is shared with the child\nprocess, similar to how {Stream} objects can be shared. Passing sockets\nis not supported on Windows.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("null")]),t._v(", "),e("code",[t._v("undefined")]),t._v(": Use default value. For stdio fds 0, 1, and 2 (in other\nwords, stdin, stdout, and stderr) a pipe is created. For fd 3 and up, the\ndefault is "),e("code",[t._v("'ignore'")]),t._v(".")])])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Child will use parent's stdios.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prg'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inherit'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Spawn child sharing only stderr.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prg'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pipe'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pipe'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Open an extra fd=4, to interact with programs presenting a")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// startd-style interface.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prg'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pipe'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pipe'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[e("em",[t._v("It is worth noting that when an IPC channel is established between the\nparent and child processes, and the child is a Node.js process, the child\nis launched with the IPC channel unreferenced (using "),e("code",[t._v("unref()")]),t._v(") until the\nchild registers an event handler for the "),e("router-link",{attrs:{to:"/node/process.html#process_event_disconnect"}},[e("code",[t._v("'disconnect'")])]),t._v(" event\nor the "),e("router-link",{attrs:{to:"/node/process.html#process_event_message"}},[e("code",[t._v("'message'")])]),t._v(" event. This allows the child to exit\nnormally without the process being held open by the open IPC channel.")],1)]),t._v(" "),e("p",[t._v("On Unix-like operating systems, the "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(" method\nperforms memory operations synchronously before decoupling the event loop\nfrom the child. Applications with a large memory footprint may find frequent\n"),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(" calls to be a bottleneck. For more information,\nsee "),e("a",{attrs:{href:"https://bugs.chromium.org/p/v8/issues/detail?id=7381",target:"_blank",rel:"noopener noreferrer"}},[t._v("V8 issue 7381"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("See also: "),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(" and "),e("a",{attrs:{href:"#child_process_child_process_fork_modulepath_args_options"}},[e("code",[t._v("child_process.fork()")])]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"synchronous-process-creation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#synchronous-process-creation"}},[t._v("#")]),t._v(" Synchronous Process Creation")]),t._v(" "),e("p",[t._v("The "),e("a",{attrs:{href:"#child_process_child_process_spawnsync_command_args_options"}},[e("code",[t._v("child_process.spawnSync()")])]),t._v(", "),e("a",{attrs:{href:"#child_process_child_process_execsync_command_options"}},[e("code",[t._v("child_process.execSync()")])]),t._v(", and\n"),e("a",{attrs:{href:"#child_process_child_process_execfilesync_file_args_options"}},[e("code",[t._v("child_process.execFileSync()")])]),t._v(" methods are synchronous and will block the\nNode.js event loop, pausing execution of any additional code until the spawned\nprocess exits.")]),t._v(" "),e("p",[t._v("Blocking calls like these are mostly useful for simplifying general-purpose\nscripting tasks and for simplifying the loading/processing of application\nconfiguration at startup.")]),t._v(" "),e("h3",{attrs:{id:"child-process-execfilesync-file-args-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#child-process-execfilesync-file-args-options"}},[t._v("#")]),t._v(" child_process.execFileSync(file[, args][, options])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("file")]),t._v(" {string} The name or path of the executable file to run.")]),t._v(" "),e("li",[e("code",[t._v("args")]),t._v(" {string[]} List of string arguments.")]),t._v(" "),e("li",[e("code",[t._v("options")]),t._v(" {Object}\n"),e("ul",[e("li",[e("code",[t._v("cwd")]),t._v(" {string} Current working directory of the child process.")]),t._v(" "),e("li",[e("code",[t._v("input")]),t._v(" {string|Buffer|TypedArray|DataView} The value which will be passed\nas stdin to the spawned process. Supplying this value will override\n"),e("code",[t._v("stdio[0]")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("stdio")]),t._v(" {string|Array} Child's stdio configuration. "),e("code",[t._v("stderr")]),t._v(" by default will\nbe output to the parent process' stderr unless "),e("code",[t._v("stdio")]),t._v(" is specified.\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'pipe'")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("env")]),t._v(" {Object} Environment key-value pairs.  "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("process.env")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("uid")]),t._v(" {number} Sets the user identity of the process (see setuid(2)).")]),t._v(" "),e("li",[e("code",[t._v("gid")]),t._v(" {number} Sets the group identity of the process (see setgid(2)).")]),t._v(" "),e("li",[e("code",[t._v("timeout")]),t._v(" {number} In milliseconds the maximum amount of time the process\nis allowed to run. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("undefined")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("killSignal")]),t._v(" {string|integer} The signal value to be used when the spawned\nprocess will be killed. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'SIGTERM'")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("maxBuffer")]),t._v(" {number} Largest amount of data in bytes allowed on stdout or\nstderr. If exceeded, the child process is terminated. See caveat at\n"),e("a",{attrs:{href:"#child_process_maxbuffer_and_unicode"}},[e("code",[t._v("maxBuffer")]),t._v(" and Unicode")]),t._v(". "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("1024 * 1024")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("encoding")]),t._v(" {string} The encoding used for all stdio inputs and outputs.\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'buffer'")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("windowsHide")]),t._v(" {boolean} Hide the subprocess console window that would\nnormally be created on Windows systems. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("shell")]),t._v(" {boolean|string} If "),e("code",[t._v("true")]),t._v(", runs "),e("code",[t._v("command")]),t._v(" inside of a shell. Uses\n"),e("code",[t._v("'/bin/sh'")]),t._v(" on Unix, and "),e("code",[t._v("process.env.ComSpec")]),t._v(" on Windows. A different\nshell can be specified as a string. See "),e("a",{attrs:{href:"#child_process_shell_requirements"}},[t._v("Shell Requirements")]),t._v(" and\n"),e("a",{attrs:{href:"#child_process_default_windows_shell"}},[t._v("Default Windows Shell")]),t._v(". "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(" (no shell).")])])]),t._v(" "),e("li",[t._v("Returns: {Buffer|string} The stdout from the command.")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("child_process.execFileSync()")]),t._v(" method is generally identical to\n"),e("a",{attrs:{href:"#child_process_child_process_execfile_file_args_options_callback"}},[e("code",[t._v("child_process.execFile()")])]),t._v(" with the exception that the method will not\nreturn until the child process has fully closed. When a timeout has been\nencountered and "),e("code",[t._v("killSignal")]),t._v(" is sent, the method won't return until the process\nhas completely exited.")]),t._v(" "),e("p",[t._v("If the child process intercepts and handles the "),e("code",[t._v("SIGTERM")]),t._v(" signal and\ndoes not exit, the parent process will still wait until the child process has\nexited.")]),t._v(" "),e("p",[t._v("If the process times out or has a non-zero exit code, this method will throw an\n"),e("router-link",{attrs:{to:"/node/errors.html#errors_class_error"}},[e("code",[t._v("Error")])]),t._v(" that will include the full result of the underlying\n"),e("a",{attrs:{href:"#child_process_child_process_spawnsync_command_args_options"}},[e("code",[t._v("child_process.spawnSync()")])]),t._v(".")],1),t._v(" "),e("p",[e("strong",[t._v("If the "),e("code",[t._v("shell")]),t._v(" option is enabled, do not pass unsanitized user input to this\nfunction. Any input containing shell metacharacters may be used to trigger\narbitrary command execution.")])]),t._v(" "),e("h3",{attrs:{id:"child-process-execsync-command-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#child-process-execsync-command-options"}},[t._v("#")]),t._v(" child_process.execSync(command[, options])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("command")]),t._v(" {string} The command to run.")]),t._v(" "),e("li",[e("code",[t._v("options")]),t._v(" {Object}\n"),e("ul",[e("li",[e("code",[t._v("cwd")]),t._v(" {string} Current working directory of the child process.")]),t._v(" "),e("li",[e("code",[t._v("input")]),t._v(" {string|Buffer|TypedArray|DataView} The value which will be passed\nas stdin to the spawned process. Supplying this value will override\n"),e("code",[t._v("stdio[0]")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("stdio")]),t._v(" {string|Array} Child's stdio configuration. "),e("code",[t._v("stderr")]),t._v(" by default will\nbe output to the parent process' stderr unless "),e("code",[t._v("stdio")]),t._v(" is specified.\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'pipe'")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("env")]),t._v(" {Object} Environment key-value pairs. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("process.env")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("shell")]),t._v(" {string} Shell to execute the command with. See\n"),e("a",{attrs:{href:"#child_process_shell_requirements"}},[t._v("Shell Requirements")]),t._v(" and "),e("a",{attrs:{href:"#child_process_default_windows_shell"}},[t._v("Default Windows Shell")]),t._v(". "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'/bin/sh'")]),t._v(" on Unix, "),e("code",[t._v("process.env.ComSpec")]),t._v(" on Windows.")]),t._v(" "),e("li",[e("code",[t._v("uid")]),t._v(" {number} Sets the user identity of the process. (See setuid(2)).")]),t._v(" "),e("li",[e("code",[t._v("gid")]),t._v(" {number} Sets the group identity of the process. (See setgid(2)).")]),t._v(" "),e("li",[e("code",[t._v("timeout")]),t._v(" {number} In milliseconds the maximum amount of time the process\nis allowed to run. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("undefined")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("killSignal")]),t._v(" {string|integer} The signal value to be used when the spawned\nprocess will be killed. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'SIGTERM'")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("maxBuffer")]),t._v(" {number} Largest amount of data in bytes allowed on stdout or\nstderr. If exceeded, the child process is terminated and any output is\ntruncated. See caveat at "),e("a",{attrs:{href:"#child_process_maxbuffer_and_unicode"}},[e("code",[t._v("maxBuffer")]),t._v(" and Unicode")]),t._v(".\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("1024 * 1024")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("encoding")]),t._v(" {string} The encoding used for all stdio inputs and outputs.\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'buffer'")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("windowsHide")]),t._v(" {boolean} Hide the subprocess console window that would\nnormally be created on Windows systems. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")])])]),t._v(" "),e("li",[t._v("Returns: {Buffer|string} The stdout from the command.")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("child_process.execSync()")]),t._v(" method is generally identical to\n"),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(" with the exception that the method will not return\nuntil the child process has fully closed. When a timeout has been encountered\nand "),e("code",[t._v("killSignal")]),t._v(" is sent, the method won't return until the process has\ncompletely exited. If the child process intercepts and handles the "),e("code",[t._v("SIGTERM")]),t._v("\nsignal and doesn't exit, the parent process will wait until the child process\nhas exited.")]),t._v(" "),e("p",[t._v("If the process times out or has a non-zero exit code, this method will throw.\nThe "),e("router-link",{attrs:{to:"/node/errors.html#errors_class_error"}},[e("code",[t._v("Error")])]),t._v(" object will contain the entire result from\n"),e("a",{attrs:{href:"#child_process_child_process_spawnsync_command_args_options"}},[e("code",[t._v("child_process.spawnSync()")])]),t._v(".")],1),t._v(" "),e("p",[e("strong",[t._v("Never pass unsanitized user input to this function. Any input containing shell\nmetacharacters may be used to trigger arbitrary command execution.")])]),t._v(" "),e("h3",{attrs:{id:"child-process-spawnsync-command-args-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#child-process-spawnsync-command-args-options"}},[t._v("#")]),t._v(" child_process.spawnSync(command[, args][, options])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("command")]),t._v(" {string} The command to run.")]),t._v(" "),e("li",[e("code",[t._v("args")]),t._v(" {string[]} List of string arguments.")]),t._v(" "),e("li",[e("code",[t._v("options")]),t._v(" {Object}\n"),e("ul",[e("li",[e("code",[t._v("cwd")]),t._v(" {string} Current working directory of the child process.")]),t._v(" "),e("li",[e("code",[t._v("input")]),t._v(" {string|Buffer|TypedArray|DataView} The value which will be passed\nas stdin to the spawned process. Supplying this value will override\n"),e("code",[t._v("stdio[0]")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("argv0")]),t._v(" {string} Explicitly set the value of "),e("code",[t._v("argv[0]")]),t._v(" sent to the child\nprocess. This will be set to "),e("code",[t._v("command")]),t._v(" if not specified.")]),t._v(" "),e("li",[e("code",[t._v("stdio")]),t._v(" {string|Array} Child's stdio configuration.")]),t._v(" "),e("li",[e("code",[t._v("env")]),t._v(" {Object} Environment key-value pairs.  "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("process.env")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("uid")]),t._v(" {number} Sets the user identity of the process (see setuid(2)).")]),t._v(" "),e("li",[e("code",[t._v("gid")]),t._v(" {number} Sets the group identity of the process (see setgid(2)).")]),t._v(" "),e("li",[e("code",[t._v("timeout")]),t._v(" {number} In milliseconds the maximum amount of time the process\nis allowed to run. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("undefined")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("killSignal")]),t._v(" {string|integer} The signal value to be used when the spawned\nprocess will be killed. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'SIGTERM'")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("maxBuffer")]),t._v(" {number} Largest amount of data in bytes allowed on stdout or\nstderr. If exceeded, the child process is terminated and any output is\ntruncated. See caveat at "),e("a",{attrs:{href:"#child_process_maxbuffer_and_unicode"}},[e("code",[t._v("maxBuffer")]),t._v(" and Unicode")]),t._v(".\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("1024 * 1024")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("encoding")]),t._v(" {string} The encoding used for all stdio inputs and outputs.\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("'buffer'")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("shell")]),t._v(" {boolean|string} If "),e("code",[t._v("true")]),t._v(", runs "),e("code",[t._v("command")]),t._v(" inside of a shell. Uses\n"),e("code",[t._v("'/bin/sh'")]),t._v(" on Unix, and "),e("code",[t._v("process.env.ComSpec")]),t._v(" on Windows. A different\nshell can be specified as a string. See "),e("a",{attrs:{href:"#child_process_shell_requirements"}},[t._v("Shell Requirements")]),t._v(" and\n"),e("a",{attrs:{href:"#child_process_default_windows_shell"}},[t._v("Default Windows Shell")]),t._v(". "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(" (no shell).")]),t._v(" "),e("li",[e("code",[t._v("windowsVerbatimArguments")]),t._v(" {boolean} No quoting or escaping of arguments is\ndone on Windows. Ignored on Unix. This is set to "),e("code",[t._v("true")]),t._v(" automatically\nwhen "),e("code",[t._v("shell")]),t._v(" is specified and is CMD. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("windowsHide")]),t._v(" {boolean} Hide the subprocess console window that would\nnormally be created on Windows systems. "),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")])])]),t._v(" "),e("li",[t._v("Returns: {Object}\n"),e("ul",[e("li",[e("code",[t._v("pid")]),t._v(" {number} Pid of the child process.")]),t._v(" "),e("li",[e("code",[t._v("output")]),t._v(" {Array} Array of results from stdio output.")]),t._v(" "),e("li",[e("code",[t._v("stdout")]),t._v(" {Buffer|string} The contents of "),e("code",[t._v("output[1]")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("stderr")]),t._v(" {Buffer|string} The contents of "),e("code",[t._v("output[2]")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("status")]),t._v(" {number|null} The exit code of the subprocess, or "),e("code",[t._v("null")]),t._v(" if the\nsubprocess terminated due to a signal.")]),t._v(" "),e("li",[e("code",[t._v("signal")]),t._v(" {string|null} The signal used to kill the subprocess, or "),e("code",[t._v("null")]),t._v(" if\nthe subprocess did not terminate due to a signal.")]),t._v(" "),e("li",[e("code",[t._v("error")]),t._v(" {Error} The error object if the child process failed or timed out.")])])])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("child_process.spawnSync()")]),t._v(" method is generally identical to\n"),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(" with the exception that the function will not return\nuntil the child process has fully closed. When a timeout has been encountered\nand "),e("code",[t._v("killSignal")]),t._v(" is sent, the method won't return until the process has\ncompletely exited. If the process intercepts and handles the "),e("code",[t._v("SIGTERM")]),t._v(" signal\nand doesn't exit, the parent process will wait until the child process has\nexited.")]),t._v(" "),e("p",[e("strong",[t._v("If the "),e("code",[t._v("shell")]),t._v(" option is enabled, do not pass unsanitized user input to this\nfunction. Any input containing shell metacharacters may be used to trigger\narbitrary command execution.")])]),t._v(" "),e("h2",{attrs:{id:"class-childprocess"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class-childprocess"}},[t._v("#")]),t._v(" Class: ChildProcess")]),t._v(" "),e("ul",[e("li",[t._v("Extends: {EventEmitter}")])]),t._v(" "),e("p",[t._v("Instances of the "),e("code",[t._v("ChildProcess")]),t._v(" represent spawned child processes.")]),t._v(" "),e("p",[t._v("Instances of "),e("code",[t._v("ChildProcess")]),t._v(" are not intended to be created directly. Rather,\nuse the "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(", "),e("a",{attrs:{href:"#child_process_child_process_exec_command_options_callback"}},[e("code",[t._v("child_process.exec()")])]),t._v(",\n"),e("a",{attrs:{href:"#child_process_child_process_execfile_file_args_options_callback"}},[e("code",[t._v("child_process.execFile()")])]),t._v(", or "),e("a",{attrs:{href:"#child_process_child_process_fork_modulepath_args_options"}},[e("code",[t._v("child_process.fork()")])]),t._v(" methods to create\ninstances of "),e("code",[t._v("ChildProcess")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"event-close"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-close"}},[t._v("#")]),t._v(" Event: 'close'")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("code")]),t._v(" {number} The exit code if the child exited on its own.")]),t._v(" "),e("li",[e("code",[t._v("signal")]),t._v(" {string} The signal by which the child process was terminated.")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'close'")]),t._v(" event is emitted when the stdio streams of a child process have\nbeen closed. This is distinct from the "),e("a",{attrs:{href:"#child_process_event_exit"}},[e("code",[t._v("'exit'")])]),t._v(" event, since multiple\nprocesses might share the same stdio streams.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ls "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-lh'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/usr'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("stdout: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'close'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("code")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("child process close all stdio with code ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'exit'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("code")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("child process exited with code ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"event-disconnect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-disconnect"}},[t._v("#")]),t._v(" Event: 'disconnect'")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'disconnect'")]),t._v(" event is emitted after calling the\n"),e("a",{attrs:{href:"#child_process_subprocess_disconnect"}},[e("code",[t._v("subprocess.disconnect()")])]),t._v(" method in parent process or\n"),e("router-link",{attrs:{to:"/node/process.html#process_process_disconnect"}},[e("code",[t._v("process.disconnect()")])]),t._v(" in child process. After disconnecting it is no longer\npossible to send or receive messages, and the "),e("a",{attrs:{href:"#child_process_subprocess_connected"}},[e("code",[t._v("subprocess.connected")])]),t._v("\nproperty is "),e("code",[t._v("false")]),t._v(".")],1),t._v(" "),e("h3",{attrs:{id:"event-error"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-error"}},[t._v("#")]),t._v(" Event: 'error'")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("err")]),t._v(" {Error} The error.")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'error'")]),t._v(" event is emitted whenever:")]),t._v(" "),e("ol",[e("li",[t._v("The process could not be spawned, or")]),t._v(" "),e("li",[t._v("The process could not be killed, or")]),t._v(" "),e("li",[t._v("Sending a message to the child process failed.")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'exit'")]),t._v(" event may or may not fire after an error has occurred. When\nlistening to both the "),e("code",[t._v("'exit'")]),t._v(" and "),e("code",[t._v("'error'")]),t._v(" events, guard\nagainst accidentally invoking handler functions multiple times.")]),t._v(" "),e("p",[t._v("See also "),e("a",{attrs:{href:"#child_process_subprocess_kill_signal"}},[e("code",[t._v("subprocess.kill()")])]),t._v(" and "),e("a",{attrs:{href:"#child_process_subprocess_send_message_sendhandle_options_callback"}},[e("code",[t._v("subprocess.send()")])]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"event-exit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-exit"}},[t._v("#")]),t._v(" Event: 'exit'")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("code")]),t._v(" {number} The exit code if the child exited on its own.")]),t._v(" "),e("li",[e("code",[t._v("signal")]),t._v(" {string} The signal by which the child process was terminated.")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'exit'")]),t._v(" event is emitted after the child process ends. If the process\nexited, "),e("code",[t._v("code")]),t._v(" is the final exit code of the process, otherwise "),e("code",[t._v("null")]),t._v(". If the\nprocess terminated due to receipt of a signal, "),e("code",[t._v("signal")]),t._v(" is the string name of\nthe signal, otherwise "),e("code",[t._v("null")]),t._v(". One of the two will always be non-null.")]),t._v(" "),e("p",[t._v("When the "),e("code",[t._v("'exit'")]),t._v(" event is triggered, child process stdio streams might still be\nopen.")]),t._v(" "),e("p",[t._v("Node.js establishes signal handlers for "),e("code",[t._v("SIGINT")]),t._v(" and "),e("code",[t._v("SIGTERM")]),t._v(" and Node.js\nprocesses will not terminate immediately due to receipt of those signals.\nRather, Node.js will perform a sequence of cleanup actions and then will\nre-raise the handled signal.")]),t._v(" "),e("p",[t._v("See waitpid(2).")]),t._v(" "),e("h3",{attrs:{id:"event-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-message"}},[t._v("#")]),t._v(" Event: 'message'")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("message")]),t._v(" {Object} A parsed JSON object or primitive value.")]),t._v(" "),e("li",[e("code",[t._v("sendHandle")]),t._v(" {Handle} A "),e("router-link",{attrs:{to:"/node/net.html#net_class_net_socket"}},[e("code",[t._v("net.Socket")])]),t._v(" or "),e("router-link",{attrs:{to:"/node/net.html#net_class_net_server"}},[e("code",[t._v("net.Server")])]),t._v(" object, or\nundefined.")],1)]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'message'")]),t._v(" event is triggered when a child process uses\n"),e("router-link",{attrs:{to:"/node/process.html#process_process_send_message_sendhandle_options_callback"}},[e("code",[t._v("process.send()")])]),t._v(" to send messages.")],1),t._v(" "),e("p",[t._v("The message goes through serialization and parsing. The resulting\nmessage might not be the same as what is originally sent.")]),t._v(" "),e("p",[t._v("If the "),e("code",[t._v("serialization")]),t._v(" option was set to "),e("code",[t._v("'advanced'")]),t._v(" used when spawning the\nchild process, the "),e("code",[t._v("message")]),t._v(" argument can contain data that JSON is not able\nto represent.\nSee "),e("a",{attrs:{href:"#child_process_advanced_serialization"}},[t._v("Advanced Serialization")]),t._v(" for more details.")]),t._v(" "),e("h3",{attrs:{id:"subprocess-channel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-channel"}},[t._v("#")]),t._v(" subprocess.channel")]),t._v(" "),e("ul",[e("li",[t._v("{Object} A pipe representing the IPC channel to the child process.")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("subprocess.channel")]),t._v(" property is a reference to the child's IPC channel. If\nno IPC channel currently exists, this property is "),e("code",[t._v("undefined")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"subprocess-connected"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-connected"}},[t._v("#")]),t._v(" subprocess.connected")]),t._v(" "),e("ul",[e("li",[t._v("{boolean} Set to "),e("code",[t._v("false")]),t._v(" after "),e("code",[t._v("subprocess.disconnect()")]),t._v(" is called.")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("subprocess.connected")]),t._v(" property indicates whether it is still possible to\nsend and receive messages from a child process. When "),e("code",[t._v("subprocess.connected")]),t._v(" is\n"),e("code",[t._v("false")]),t._v(", it is no longer possible to send or receive messages.")]),t._v(" "),e("h3",{attrs:{id:"subprocess-disconnect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-disconnect"}},[t._v("#")]),t._v(" subprocess.disconnect()")]),t._v(" "),e("p",[t._v("Closes the IPC channel between parent and child, allowing the child to exit\ngracefully once there are no other connections keeping it alive. After calling\nthis method the "),e("code",[t._v("subprocess.connected")]),t._v(" and "),e("code",[t._v("process.connected")]),t._v(" properties in\nboth the parent and child (respectively) will be set to "),e("code",[t._v("false")]),t._v(", and it will be\nno longer possible to pass messages between the processes.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("'disconnect'")]),t._v(" event will be emitted when there are no messages in the\nprocess of being received. This will most often be triggered immediately after\ncalling "),e("code",[t._v("subprocess.disconnect()")]),t._v(".")]),t._v(" "),e("p",[t._v("When the child process is a Node.js instance (e.g. spawned using\n"),e("a",{attrs:{href:"#child_process_child_process_fork_modulepath_args_options"}},[e("code",[t._v("child_process.fork()")])]),t._v("), the "),e("code",[t._v("process.disconnect()")]),t._v(" method can be invoked\nwithin the child process to close the IPC channel as well.")]),t._v(" "),e("h3",{attrs:{id:"subprocess-kill-signal"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-kill-signal"}},[t._v("#")]),t._v(" subprocess.kill([signal])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("signal")]),t._v(" {number|string}")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("subprocess.kill()")]),t._v(" method sends a signal to the child process. If no\nargument is given, the process will be sent the "),e("code",[t._v("'SIGTERM'")]),t._v(" signal. See\nsignal(7) for a list of available signals.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" grep "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'grep'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ssh'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ngrep"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'close'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("code"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" signal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("child process terminated due to receipt of signal ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("signal"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Send SIGHUP to process.")]),t._v("\ngrep"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SIGHUP'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The "),e("a",{attrs:{href:"#child_process_child_process"}},[e("code",[t._v("ChildProcess")])]),t._v(" object may emit an "),e("a",{attrs:{href:"#child_process_event_error"}},[e("code",[t._v("'error'")])]),t._v(" event if the signal\ncannot be delivered. Sending a signal to a child process that has already exited\nis not an error but may have unforeseen consequences. Specifically, if the\nprocess identifier (PID) has been reassigned to another process, the signal will\nbe delivered to that process instead which can have unexpected results.")]),t._v(" "),e("p",[t._v("While the function is called "),e("code",[t._v("kill")]),t._v(", the signal delivered to the child process\nmay not actually terminate the process.")]),t._v(" "),e("p",[t._v("See kill(2) for reference.")]),t._v(" "),e("p",[t._v("On Linux, child processes of child processes will not be terminated\nwhen attempting to kill their parent. This is likely to happen when running a\nnew process in a shell or with the use of the "),e("code",[t._v("shell")]),t._v(" option of "),e("code",[t._v("ChildProcess")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'use strict'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subprocess "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sh'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-c'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("node -e \"setInterval(() => {\n      console.log(process.pid, 'is alive')\n    }, 500);\"")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inherit'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inherit'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inherit'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  subprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Does not terminate the Node.js process in the shell.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"subprocess-killed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-killed"}},[t._v("#")]),t._v(" subprocess.killed")]),t._v(" "),e("ul",[e("li",[t._v("{boolean} Set to "),e("code",[t._v("true")]),t._v(" after "),e("code",[t._v("subprocess.kill()")]),t._v(" is used to successfully\nsend a signal to the child process.")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("subprocess.killed")]),t._v(" property indicates whether the child process\nsuccessfully received a signal from "),e("code",[t._v("subprocess.kill()")]),t._v(". The "),e("code",[t._v("killed")]),t._v(" property\ndoes not indicate that the child process has been terminated.")]),t._v(" "),e("h3",{attrs:{id:"subprocess-pid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-pid"}},[t._v("#")]),t._v(" subprocess.pid")]),t._v(" "),e("ul",[e("li",[t._v("{integer}")])]),t._v(" "),e("p",[t._v("Returns the process identifier (PID) of the child process.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" grep "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'grep'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ssh'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Spawned child pid: ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("grep"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pid"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ngrep"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"subprocess-ref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-ref"}},[t._v("#")]),t._v(" subprocess.ref()")]),t._v(" "),e("p",[t._v("Calling "),e("code",[t._v("subprocess.ref()")]),t._v(" after making a call to "),e("code",[t._v("subprocess.unref()")]),t._v(" will\nrestore the removed reference count for the child process, forcing the parent\nto wait for the child to exit before exiting itself.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subprocess "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_program.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  detached"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ignore'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nsubprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unref")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsubprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ref")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"subprocess-send-message-sendhandle-options-callback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-send-message-sendhandle-options-callback"}},[t._v("#")]),t._v(" subprocess.send(message[, sendHandle[, options]][, callback])")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("message")]),t._v(" {Object}")]),t._v(" "),e("li",[e("code",[t._v("sendHandle")]),t._v(" {Handle}")]),t._v(" "),e("li",[e("code",[t._v("options")]),t._v(" {Object} The "),e("code",[t._v("options")]),t._v(" argument, if present, is an object used to\nparameterize the sending of certain types of handles. "),e("code",[t._v("options")]),t._v(" supports\nthe following properties:\n"),e("ul",[e("li",[e("code",[t._v("keepOpen")]),t._v(" {boolean} A value that can be used when passing instances of\n"),e("code",[t._v("net.Socket")]),t._v(". When "),e("code",[t._v("true")]),t._v(", the socket is kept open in the sending process.\n"),e("strong",[t._v("Default:")]),t._v(" "),e("code",[t._v("false")]),t._v(".")])])]),t._v(" "),e("li",[e("code",[t._v("callback")]),t._v(" {Function}")]),t._v(" "),e("li",[t._v("Returns: {boolean}")])]),t._v(" "),e("p",[t._v("When an IPC channel has been established between the parent and child (\ni.e. when using "),e("a",{attrs:{href:"#child_process_child_process_fork_modulepath_args_options"}},[e("code",[t._v("child_process.fork()")])]),t._v("), the "),e("code",[t._v("subprocess.send()")]),t._v(" method can\nbe used to send messages to the child process. When the child process is a\nNode.js instance, these messages can be received via the "),e("router-link",{attrs:{to:"/node/process.html#process_event_message"}},[e("code",[t._v("'message'")])]),t._v(" event.")],1),t._v(" "),e("p",[t._v("The message goes through serialization and parsing. The resulting\nmessage might not be the same as what is originally sent.")]),t._v(" "),e("p",[t._v("For example, in the parent script:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("__dirname"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("/sub.js")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'PARENT got message:'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Causes the child to print: CHILD got message: { hello: 'world' }")]),t._v("\nn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" hello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("And then the child script, "),e("code",[t._v("'sub.js'")]),t._v(" might look like this:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CHILD got message:'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Causes the parent to print: PARENT got message: { foo: 'bar', baz: null }")]),t._v("\nprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" baz"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Child Node.js processes will have a "),e("router-link",{attrs:{to:"/node/process.html#process_process_send_message_sendhandle_options_callback"}},[e("code",[t._v("process.send()")])]),t._v(" method of their own\nthat allows the child to send messages back to the parent.")],1),t._v(" "),e("p",[t._v("There is a special case when sending a "),e("code",[t._v("{cmd: 'NODE_foo'}")]),t._v(" message. Messages\ncontaining a "),e("code",[t._v("NODE_")]),t._v(" prefix in the "),e("code",[t._v("cmd")]),t._v(" property are reserved for use within\nNode.js core and will not be emitted in the child's "),e("router-link",{attrs:{to:"/node/process.html#process_event_message"}},[e("code",[t._v("'message'")])]),t._v("\nevent. Rather, such messages are emitted using the\n"),e("code",[t._v("'internalMessage'")]),t._v(" event and are consumed internally by Node.js.\nApplications should avoid using such messages or listening for\n"),e("code",[t._v("'internalMessage'")]),t._v(" events as it is subject to change without notice.")],1),t._v(" "),e("p",[t._v("The optional "),e("code",[t._v("sendHandle")]),t._v(" argument that may be passed to "),e("code",[t._v("subprocess.send()")]),t._v(" is\nfor passing a TCP server or socket object to the child process. The child will\nreceive the object as the second argument passed to the callback function\nregistered on the "),e("router-link",{attrs:{to:"/node/process.html#process_event_message"}},[e("code",[t._v("'message'")])]),t._v(" event. Any data that is received\nand buffered in the socket will not be sent to the child.")],1),t._v(" "),e("p",[t._v("The optional "),e("code",[t._v("callback")]),t._v(" is a function that is invoked after the message is\nsent but before the child may have received it. The function is called with a\nsingle argument: "),e("code",[t._v("null")]),t._v(" on success, or an "),e("router-link",{attrs:{to:"/node/errors.html#errors_class_error"}},[e("code",[t._v("Error")])]),t._v(" object on failure.")],1),t._v(" "),e("p",[t._v("If no "),e("code",[t._v("callback")]),t._v(" function is provided and the message cannot be sent, an\n"),e("code",[t._v("'error'")]),t._v(" event will be emitted by the "),e("a",{attrs:{href:"#child_process_child_process"}},[e("code",[t._v("ChildProcess")])]),t._v(" object. This can\nhappen, for instance, when the child process has already exited.")]),t._v(" "),e("p",[e("code",[t._v("subprocess.send()")]),t._v(" will return "),e("code",[t._v("false")]),t._v(" if the channel has closed or when the\nbacklog of unsent messages exceeds a threshold that makes it unwise to send\nmore. Otherwise, the method returns "),e("code",[t._v("true")]),t._v(". The "),e("code",[t._v("callback")]),t._v(" function can be\nused to implement flow control.")]),t._v(" "),e("h4",{attrs:{id:"example-sending-a-server-object"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-sending-a-server-object"}},[t._v("#")]),t._v(" Example: sending a server object")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("sendHandle")]),t._v(" argument can be used, for instance, to pass the handle of\na TCP server object to the child process as illustrated in the example below:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subprocess "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'subprocess.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Open up the server object and send the handle.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" server "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'net'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'connection'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("socket")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  socket"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'handled by parent'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  subprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'server'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" server"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The child would then receive the server object as:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" server")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'server'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    server"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'connection'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("socket")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      socket"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'handled by child'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Once the server is now shared between the parent and child, some connections\ncan be handled by the parent and some by the child.")]),t._v(" "),e("p",[t._v("While the example above uses a server created using the "),e("code",[t._v("net")]),t._v(" module, "),e("code",[t._v("dgram")]),t._v("\nmodule servers use exactly the same workflow with the exceptions of listening on\na "),e("code",[t._v("'message'")]),t._v(" event instead of "),e("code",[t._v("'connection'")]),t._v(" and using "),e("code",[t._v("server.bind()")]),t._v(" instead\nof "),e("code",[t._v("server.listen()")]),t._v(". This is, however, currently only supported on Unix\nplatforms.")]),t._v(" "),e("h4",{attrs:{id:"example-sending-a-socket-object"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-sending-a-socket-object"}},[t._v("#")]),t._v(" Example: sending a socket object")]),t._v(" "),e("p",[t._v("Similarly, the "),e("code",[t._v("sendHandler")]),t._v(' argument can be used to pass the handle of a\nsocket to the child process. The example below spawns two children that each\nhandle connections with "normal" or "special" priority:')]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" fork "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" normal "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'subprocess.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'normal'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" special "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'subprocess.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'special'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Open up the server and send sockets to child. Use pauseOnConnect to prevent")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the sockets from being read before they are sent to the child process.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" server "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'net'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" pauseOnConnect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'connection'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("socket")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If this is special priority...")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("socket"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("remoteAddress "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'74.125.127.100'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    special"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'socket'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" socket"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is normal priority.")]),t._v("\n  normal"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'socket'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" socket"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The "),e("code",[t._v("subprocess.js")]),t._v(" would receive the socket handle as the second argument\npassed to the event callback function:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" socket")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'socket'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("socket"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check that the client socket exists.")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// It is possible for the socket to be closed between the time it is")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sent and the time it is received in the child process.")]),t._v("\n      socket"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Request handled with ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v(" priority")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Once a socket has been passed to a child, the parent is no longer capable of\ntracking when the socket is destroyed. To indicate this, the "),e("code",[t._v(".connections")]),t._v("\nproperty becomes "),e("code",[t._v("null")]),t._v(". It is recommended not to use "),e("code",[t._v(".maxConnections")]),t._v(" when\nthis occurs.")]),t._v(" "),e("p",[t._v("It is also recommended that any "),e("code",[t._v("'message'")]),t._v(" handlers in the child process\nverify that "),e("code",[t._v("socket")]),t._v(" exists, as the connection may have been closed during the\ntime it takes to send the connection to the child.")]),t._v(" "),e("h3",{attrs:{id:"subprocess-stderr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-stderr"}},[t._v("#")]),t._v(" subprocess.stderr")]),t._v(" "),e("ul",[e("li",[t._v("{stream.Readable}")])]),t._v(" "),e("p",[t._v("A "),e("code",[t._v("Readable Stream")]),t._v(" that represents the child process's "),e("code",[t._v("stderr")]),t._v(".")]),t._v(" "),e("p",[t._v("If the child was spawned with "),e("code",[t._v("stdio[2]")]),t._v(" set to anything other than "),e("code",[t._v("'pipe'")]),t._v(",\nthen this will be "),e("code",[t._v("null")]),t._v(".")]),t._v(" "),e("p",[e("code",[t._v("subprocess.stderr")]),t._v(" is an alias for "),e("code",[t._v("subprocess.stdio[2]")]),t._v(". Both properties will\nrefer to the same value.")]),t._v(" "),e("h3",{attrs:{id:"subprocess-stdin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-stdin"}},[t._v("#")]),t._v(" subprocess.stdin")]),t._v(" "),e("ul",[e("li",[t._v("{stream.Writable}")])]),t._v(" "),e("p",[t._v("A "),e("code",[t._v("Writable Stream")]),t._v(" that represents the child process's "),e("code",[t._v("stdin")]),t._v(".")]),t._v(" "),e("p",[t._v("If a child process waits to read all of its input, the child will not continue\nuntil this stream has been closed via "),e("code",[t._v("end()")]),t._v(".")]),t._v(" "),e("p",[t._v("If the child was spawned with "),e("code",[t._v("stdio[0]")]),t._v(" set to anything other than "),e("code",[t._v("'pipe'")]),t._v(",\nthen this will be "),e("code",[t._v("null")]),t._v(".")]),t._v(" "),e("p",[e("code",[t._v("subprocess.stdin")]),t._v(" is an alias for "),e("code",[t._v("subprocess.stdio[0]")]),t._v(". Both properties will\nrefer to the same value.")]),t._v(" "),e("h3",{attrs:{id:"subprocess-stdio"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-stdio"}},[t._v("#")]),t._v(" subprocess.stdio")]),t._v(" "),e("ul",[e("li",[t._v("{Array}")])]),t._v(" "),e("p",[t._v("A sparse array of pipes to the child process, corresponding with positions in\nthe "),e("a",{attrs:{href:"#child_process_options_stdio"}},[e("code",[t._v("stdio")])]),t._v(" option passed to "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v(" that have been set\nto the value "),e("code",[t._v("'pipe'")]),t._v(". "),e("code",[t._v("subprocess.stdio[0]")]),t._v(", "),e("code",[t._v("subprocess.stdio[1]")]),t._v(", and\n"),e("code",[t._v("subprocess.stdio[2]")]),t._v(" are also available as "),e("code",[t._v("subprocess.stdin")]),t._v(",\n"),e("code",[t._v("subprocess.stdout")]),t._v(", and "),e("code",[t._v("subprocess.stderr")]),t._v(", respectively.")]),t._v(" "),e("p",[t._v("In the following example, only the child's fd "),e("code",[t._v("1")]),t._v(" (stdout) is configured as a\npipe, so only the parent's "),e("code",[t._v("subprocess.stdio[1]")]),t._v(" is a stream, all other values\nin the array are "),e("code",[t._v("null")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" assert "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'assert'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" child_process "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subprocess "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" child_process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use parent's stdin for child.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pipe'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Pipe child's stdout to parent.")]),t._v("\n    fs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("openSync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'err.out'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'w'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Direct child's stderr to a file.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nassert"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("strictEqual")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nassert"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("strictEqual")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nassert"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("strictEqual")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nassert"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("strictEqual")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nassert"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("strictEqual")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"subprocess-stdout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-stdout"}},[t._v("#")]),t._v(" subprocess.stdout")]),t._v(" "),e("ul",[e("li",[t._v("{stream.Readable}")])]),t._v(" "),e("p",[t._v("A "),e("code",[t._v("Readable Stream")]),t._v(" that represents the child process's "),e("code",[t._v("stdout")]),t._v(".")]),t._v(" "),e("p",[t._v("If the child was spawned with "),e("code",[t._v("stdio[1]")]),t._v(" set to anything other than "),e("code",[t._v("'pipe'")]),t._v(",\nthen this will be "),e("code",[t._v("null")]),t._v(".")]),t._v(" "),e("p",[e("code",[t._v("subprocess.stdout")]),t._v(" is an alias for "),e("code",[t._v("subprocess.stdio[1]")]),t._v(". Both properties will\nrefer to the same value.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subprocess "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nsubprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Received chunk ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"subprocess-unref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subprocess-unref"}},[t._v("#")]),t._v(" subprocess.unref()")]),t._v(" "),e("p",[t._v("By default, the parent will wait for the detached child to exit. To prevent the\nparent from waiting for a given "),e("code",[t._v("subprocess")]),t._v(" to exit, use the\n"),e("code",[t._v("subprocess.unref()")]),t._v(" method. Doing so will cause the parent's event loop to not\ninclude the child in its reference count, allowing the parent to exit\nindependently of the child, unless there is an established IPC channel between\nthe child and the parent.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subprocess "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'child_program.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  detached"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ignore'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nsubprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unref")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"maxbuffer-and-unicode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maxbuffer-and-unicode"}},[t._v("#")]),t._v(" "),e("code",[t._v("maxBuffer")]),t._v(" and Unicode")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("maxBuffer")]),t._v(" option specifies the largest number of bytes allowed on "),e("code",[t._v("stdout")]),t._v("\nor "),e("code",[t._v("stderr")]),t._v(". If this value is exceeded, then the child process is terminated.\nThis impacts output that includes multibyte character encodings such as UTF-8 or\nUTF-16. For instance, "),e("code",[t._v("console.log('中文测试')")]),t._v(" will send 13 UTF-8 encoded bytes\nto "),e("code",[t._v("stdout")]),t._v(" although there are only 4 characters.")]),t._v(" "),e("h2",{attrs:{id:"shell-requirements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shell-requirements"}},[t._v("#")]),t._v(" Shell Requirements")]),t._v(" "),e("p",[t._v("The shell should understand the "),e("code",[t._v("-c")]),t._v(" switch. If the shell is "),e("code",[t._v("'cmd.exe'")]),t._v(", it\nshould understand the "),e("code",[t._v("/d /s /c")]),t._v(" switches and command line parsing should be\ncompatible.")]),t._v(" "),e("h2",{attrs:{id:"default-windows-shell"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#default-windows-shell"}},[t._v("#")]),t._v(" Default Windows Shell")]),t._v(" "),e("p",[t._v("Although Microsoft specifies "),e("code",[t._v("%COMSPEC%")]),t._v(" must contain the path to\n"),e("code",[t._v("'cmd.exe'")]),t._v(" in the root environment, child processes are not always subject to\nthe same requirement. Thus, in "),e("code",[t._v("child_process")]),t._v(" functions where a shell can be\nspawned, "),e("code",[t._v("'cmd.exe'")]),t._v(" is used as a fallback if "),e("code",[t._v("process.env.ComSpec")]),t._v(" is\nunavailable.")]),t._v(" "),e("h2",{attrs:{id:"advanced-serialization"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#advanced-serialization"}},[t._v("#")]),t._v(" Advanced Serialization")]),t._v(" "),e("p",[t._v("Child processes support a serialization mechanism for IPC that is based on the\n"),e("router-link",{attrs:{to:"/node/v8.html#v8_serialization_api"}},[t._v("serialization API of the "),e("code",[t._v("v8")]),t._v(" module")]),t._v(", based on the\n"),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML structured clone algorithm"),e("OutboundLink")],1),t._v(". This is generally more powerful and\nsupports more built-in JavaScript object types, such as "),e("code",[t._v("BigInt")]),t._v(", "),e("code",[t._v("Map")]),t._v("\nand "),e("code",[t._v("Set")]),t._v(", "),e("code",[t._v("ArrayBuffer")]),t._v(" and "),e("code",[t._v("TypedArray")]),t._v(", "),e("code",[t._v("Buffer")]),t._v(", "),e("code",[t._v("Error")]),t._v(", "),e("code",[t._v("RegExp")]),t._v(" etc.")],1),t._v(" "),e("p",[t._v("However, this format is not a full superset of JSON, and e.g. properties set on\nobjects of such built-in types will not be passed on through the serialization\nstep. Additionally, performance may not be equivalent to that of JSON, depending\non the structure of the passed data.\nTherefore, this feature requires opting in by setting the\n"),e("code",[t._v("serialization")]),t._v(" option to "),e("code",[t._v("'advanced'")]),t._v(" when calling "),e("a",{attrs:{href:"#child_process_child_process_spawn_command_args_options"}},[e("code",[t._v("child_process.spawn()")])]),t._v("\nor "),e("a",{attrs:{href:"#child_process_child_process_fork_modulepath_args_options"}},[e("code",[t._v("child_process.fork()")])]),t._v(".")])])}),[],!1,null,null,null);s.default=a.exports}}]);